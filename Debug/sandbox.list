
sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007190  08007190  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007190  08007190  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007190  08007190  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000088  08007220  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08007220  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167f0  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a27  00000000  00000000  000368a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000392d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  0003a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3a7  00000000  00000000  0003b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146d2  00000000  00000000  000594ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae634  00000000  00000000  0006dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  0011c258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070d0 	.word	0x080070d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080070d0 	.word	0x080070d0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ff82 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f83c 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80001d4:	f000 fa8c 	bl	80006f0 <MX_DMA_Init>
  MX_GPIO_Init();
 80001d8:	f000 fab0 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 fa58 	bl	8000690 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e0:	f000 f896 	bl	8000310 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e4:	f000 f8f0 	bl	80003c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e8:	f000 f9be 	bl	8000568 <MX_TIM2_Init>
  MX_TIM17_Init();
 80001ec:	f000 fa2a 	bl	8000644 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2); // point stdio at uart2
 80001f0:	4813      	ldr	r0, [pc, #76]	; (8000240 <main+0x78>)
 80001f2:	f000 fb7b 	bl	80008ec <RetargetInit>
  //uhADCxConvertedData_Voltage_mVolt = VAR_CONVERTED_DATA_INIT_VALUE;
  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4812      	ldr	r0, [pc, #72]	; (8000244 <main+0x7c>)
 80001fa:	f001 fb61 	bl	80018c0 <HAL_ADCEx_Calibration_Start>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <main+0x40>
  {
    Error_Handler();
 8000204:	f000 fb6c 	bl	80008e0 <Error_Handler>
  }

  /* User start transmission data through "TxBuffer" buffer */
  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 8000208:	2217      	movs	r2, #23
 800020a:	490f      	ldr	r1, [pc, #60]	; (8000248 <main+0x80>)
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x78>)
 800020e:	f005 f9c7 	bl	80055a0 <HAL_UART_Transmit_DMA>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <main+0x54>
  {
	/* Transfer error in transmission process */
	Error_Handler();
 8000218:	f000 fb62 	bl	80008e0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(issue_pulse(0) != PULSE_OK) Error_Handler();
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fe93 	bl	8000f48 <issue_pulse>
 8000222:	4603      	mov	r3, r0
 8000224:	2b02      	cmp	r3, #2
 8000226:	d001      	beq.n	800022c <main+0x64>
 8000228:	f000 fb5a 	bl	80008e0 <Error_Handler>
	  while(get_pulse_state() == PULSE_BUSY)
 800022c:	bf00      	nop
 800022e:	f000 fed5 	bl	8000fdc <get_pulse_state>
 8000232:	4603      	mov	r3, r0
 8000234:	2b01      	cmp	r3, #1
 8000236:	d0fa      	beq.n	800022e <main+0x66>
	  {

	  }
	  HAL_Delay(20);
 8000238:	2014      	movs	r0, #20
 800023a:	f000 ffb1 	bl	80011a0 <HAL_Delay>
	  if(issue_pulse(0) != PULSE_OK) Error_Handler();
 800023e:	e7ed      	b.n	800021c <main+0x54>
 8000240:	2000027c 	.word	0x2000027c
 8000244:	20000144 	.word	0x20000144
 8000248:	20000000 	.word	0x20000000

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b09c      	sub	sp, #112	; 0x70
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f006 f99c 	bl	8006598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2234      	movs	r2, #52	; 0x34
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f006 f98e 	bl	8006598 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000280:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000286:	2301      	movs	r3, #1
 8000288:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000298:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800029c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fb86 	bl	80029b4 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ae:	f000 fb17 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 fa78 	bl	80037c4 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002da:	f000 fb01 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM17
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <SystemClock_Config+0xc0>)
 80002e0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80002e6:	2300      	movs	r3, #0
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80002ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f0:	463b      	mov	r3, r7
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 fc9c 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002fe:	f000 faef 	bl	80008e0 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3770      	adds	r7, #112	; 0x70
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	00101080 	.word	0x00101080

08000310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000316:	463b      	mov	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
 8000324:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000328:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800032c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000334:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000342:	2200      	movs	r2, #0
 8000344:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034e:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000350:	2200      	movs	r2, #0
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000356:	2201      	movs	r2, #1
 8000358:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000362:	2201      	movs	r2, #1
 8000364:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000366:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000368:	2200      	movs	r2, #0
 800036a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000370:	2204      	movs	r2, #4
 8000372:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000374:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000376:	2200      	movs	r2, #0
 8000378:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000380:	4810      	ldr	r0, [pc, #64]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000382:	f000 ff4f 	bl	8001224 <HAL_ADC_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800038c:	f000 faa8 	bl	80008e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000390:	2301      	movs	r3, #1
 8000392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000394:	2301      	movs	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_ADC1_Init+0xb4>)
 80003ae:	f001 fb21 	bl	80019f4 <HAL_ADC_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003b8:	f000 fa92 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000144 	.word	0x20000144

080003c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b09e      	sub	sp, #120	; 0x78
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040c:	463b      	mov	r3, r7
 800040e:	222c      	movs	r2, #44	; 0x2c
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f006 f8c0 	bl	8006598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000418:	4b51      	ldr	r3, [pc, #324]	; (8000560 <MX_TIM1_Init+0x198>)
 800041a:	4a52      	ldr	r2, [pc, #328]	; (8000564 <MX_TIM1_Init+0x19c>)
 800041c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800041e:	4b50      	ldr	r3, [pc, #320]	; (8000560 <MX_TIM1_Init+0x198>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000424:	4b4e      	ldr	r3, [pc, #312]	; (8000560 <MX_TIM1_Init+0x198>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800042a:	4b4d      	ldr	r3, [pc, #308]	; (8000560 <MX_TIM1_Init+0x198>)
 800042c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000430:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000432:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <MX_TIM1_Init+0x198>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000438:	4b49      	ldr	r3, [pc, #292]	; (8000560 <MX_TIM1_Init+0x198>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b48      	ldr	r3, [pc, #288]	; (8000560 <MX_TIM1_Init+0x198>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000444:	4846      	ldr	r0, [pc, #280]	; (8000560 <MX_TIM1_Init+0x198>)
 8000446:	f003 fd85 	bl	8003f54 <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000450:	f000 fa46 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000458:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800045e:	4619      	mov	r1, r3
 8000460:	483f      	ldr	r0, [pc, #252]	; (8000560 <MX_TIM1_Init+0x198>)
 8000462:	f004 f877 	bl	8004554 <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800046c:	f000 fa38 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000470:	483b      	ldr	r0, [pc, #236]	; (8000560 <MX_TIM1_Init+0x198>)
 8000472:	f003 fe1b 	bl	80040ac <HAL_TIM_OC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800047c:	f000 fa30 	bl	80008e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000484:	2300      	movs	r3, #0
 8000486:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000488:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800048c:	4619      	mov	r1, r3
 800048e:	4834      	ldr	r0, [pc, #208]	; (8000560 <MX_TIM1_Init+0x198>)
 8000490:	f004 f929 	bl	80046e6 <HAL_TIM_SlaveConfigSynchro>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800049a:	f000 fa21 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ae:	4619      	mov	r1, r3
 80004b0:	482b      	ldr	r0, [pc, #172]	; (8000560 <MX_TIM1_Init+0x198>)
 80004b2:	f004 fdc5 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004bc:	f000 fa10 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c8:	2300      	movs	r3, #0
 80004ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004cc:	2300      	movs	r3, #0
 80004ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004d8:	2300      	movs	r3, #0
 80004da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004e0:	2200      	movs	r2, #0
 80004e2:	4619      	mov	r1, r3
 80004e4:	481e      	ldr	r0, [pc, #120]	; (8000560 <MX_TIM1_Init+0x198>)
 80004e6:	f003 ffbb 	bl	8004460 <HAL_TIM_OC_ConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80004f0:	f000 f9f6 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004f8:	2204      	movs	r2, #4
 80004fa:	4619      	mov	r1, r3
 80004fc:	4818      	ldr	r0, [pc, #96]	; (8000560 <MX_TIM1_Init+0x198>)
 80004fe:	f003 ffaf 	bl	8004460 <HAL_TIM_OC_ConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000508:	f000 f9ea 	bl	80008e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000524:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800052e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000532:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	4807      	ldr	r0, [pc, #28]	; (8000560 <MX_TIM1_Init+0x198>)
 8000542:	f004 fde3 	bl	800510c <HAL_TIMEx_ConfigBreakDeadTime>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800054c:	f000 f9c8 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <MX_TIM1_Init+0x198>)
 8000552:	f000 fb55 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 8000556:	bf00      	nop
 8000558:	3778      	adds	r7, #120	; 0x78
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200001d8 	.word	0x200001d8
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <MX_TIM2_Init+0xd8>)
 8000598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800059c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005be:	4820      	ldr	r0, [pc, #128]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005c0:	f003 fcc8 	bl	8003f54 <HAL_TIM_Base_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80005ca:	f000 f989 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4619      	mov	r1, r3
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005dc:	f003 ffba 	bl	8004554 <HAL_TIM_ConfigClockSource>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80005e6:	f000 f97b 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80005ea:	2108      	movs	r1, #8
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_TIM2_Init+0xd8>)
 80005ee:	f003 fdbe 	bl	800416e <HAL_TIM_OnePulse_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80005f8:	f000 f972 	bl	80008e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005fc:	2306      	movs	r3, #6
 80005fe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_TIM2_Init+0xd8>)
 800060c:	f004 f86b 	bl	80046e6 <HAL_TIM_SlaveConfigSynchro>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000616:	f000 f963 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_TIM2_Init+0xd8>)
 8000628:	f004 fd0a 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000632:	f000 f955 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3730      	adds	r7, #48	; 0x30
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000230 	.word	0x20000230

08000644 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_TIM17_Init+0x44>)
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_TIM17_Init+0x48>)
 800064c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 18;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_TIM17_Init+0x44>)
 8000650:	2212      	movs	r2, #18
 8000652:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_TIM17_Init+0x44>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_TIM17_Init+0x44>)
 800065c:	2231      	movs	r2, #49	; 0x31
 800065e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_TIM17_Init+0x44>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_TIM17_Init+0x44>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_TIM17_Init+0x44>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_TIM17_Init+0x44>)
 8000674:	f003 fc6e 	bl	8003f54 <HAL_TIM_Base_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800067e:	f000 f92f 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000f8 	.word	0x200000f8
 800068c:	40014800 	.word	0x40014800

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART2_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 800069c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006d4:	f004 fdb0 	bl	8005238 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f8ff 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000027c 	.word	0x2000027c
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_DMA_Init+0x48>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <MX_DMA_Init+0x48>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_DMA_Init+0x48>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2010      	movs	r0, #16
 8000714:	f001 fd65 	bl	80021e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000718:	2010      	movs	r0, #16
 800071a:	f001 fd7e 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2011      	movs	r0, #17
 8000724:	f001 fd5d 	bl	80021e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000728:	2011      	movs	r0, #17
 800072a:	f001 fd76 	bl	800221a <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <MX_GPIO_Init+0x170>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a55      	ldr	r2, [pc, #340]	; (80008ac <MX_GPIO_Init+0x170>)
 8000758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b53      	ldr	r3, [pc, #332]	; (80008ac <MX_GPIO_Init+0x170>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <MX_GPIO_Init+0x170>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <MX_GPIO_Init+0x170>)
 8000770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <MX_GPIO_Init+0x170>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b4a      	ldr	r3, [pc, #296]	; (80008ac <MX_GPIO_Init+0x170>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a49      	ldr	r2, [pc, #292]	; (80008ac <MX_GPIO_Init+0x170>)
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b47      	ldr	r3, [pc, #284]	; (80008ac <MX_GPIO_Init+0x170>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <MX_GPIO_Init+0x170>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a43      	ldr	r2, [pc, #268]	; (80008ac <MX_GPIO_Init+0x170>)
 80007a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_GPIO_Init+0x170>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|tx_north_n_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2183      	movs	r1, #131	; 0x83
 80007b6:	483e      	ldr	r0, [pc, #248]	; (80008b0 <MX_GPIO_Init+0x174>)
 80007b8:	f002 f8ca 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f240 7102 	movw	r1, #1794	; 0x702
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f002 f8c3 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_NORTH_P_Pin|LD2_Pin|GPIO_PIN_3|GPIO_PIN_4
 80007ca:	2200      	movs	r2, #0
 80007cc:	f242 4138 	movw	r1, #9272	; 0x2438
 80007d0:	4838      	ldr	r0, [pc, #224]	; (80008b4 <MX_GPIO_Init+0x178>)
 80007d2:	f002 f8bd 	bl	8002950 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4830      	ldr	r0, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x174>)
 80007ee:	f001 ff3d 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007f2:	2303      	movs	r3, #3
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4829      	ldr	r0, [pc, #164]	; (80008b0 <MX_GPIO_Init+0x174>)
 800080a:	f001 ff2f 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800080e:	2302      	movs	r3, #2
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f001 ff20 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_P_Pin PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = TX_NORTH_P_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800082c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x178>)
 8000846:	f001 ff11 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4814      	ldr	r0, [pc, #80]	; (80008b4 <MX_GPIO_Init+0x178>)
 8000864:	f001 ff02 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : tx_north_n_Pin */
  GPIO_InitStruct.Pin = tx_north_n_Pin;
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(tx_north_n_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_GPIO_Init+0x174>)
 8000880:	f001 fef4 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_N_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8000884:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f001 fee4 	bl	800266c <HAL_GPIO_Init>

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000800 	.word	0x48000800
 80008b4:	48000400 	.word	0x48000400

080008b8 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <RetargetInit+0x28>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <RetargetInit+0x2c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6898      	ldr	r0, [r3, #8]
 8000900:	2300      	movs	r3, #0
 8000902:	2202      	movs	r2, #2
 8000904:	2100      	movs	r1, #0
 8000906:	f005 fec5 	bl	8006694 <setvbuf>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000300 	.word	0x20000300
 8000918:	20000024 	.word	0x20000024

0800091c <_isatty>:

int _isatty(int fd) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db04      	blt.n	8000934 <_isatty+0x18>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b02      	cmp	r3, #2
 800092e:	dc01      	bgt.n	8000934 <_isatty+0x18>
    return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e005      	b.n	8000940 <_isatty+0x24>

  errno = EBADF;
 8000934:	f005 fe06 	bl	8006544 <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	2209      	movs	r2, #9
 800093c:	601a      	str	r2, [r3, #0]
  return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_write>:

int _write(int fd, char* ptr, int len) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d002      	beq.n	8000960 <_write+0x18>
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d111      	bne.n	8000984 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <_write+0x54>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	b29a      	uxth	r2, r3
 8000968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	f004 fcb1 	bl	80052d4 <HAL_UART_Transmit>
 8000972:	4603      	mov	r3, r0
 8000974:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000976:	7dfb      	ldrb	r3, [r7, #23]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <_write+0x38>
      return len;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	e008      	b.n	8000992 <_write+0x4a>
    else
      return EIO;
 8000980:	2305      	movs	r3, #5
 8000982:	e006      	b.n	8000992 <_write+0x4a>
  }
  errno = EBADF;
 8000984:	f005 fdde 	bl	8006544 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	2209      	movs	r2, #9
 800098c:	601a      	str	r2, [r3, #0]
  return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000300 	.word	0x20000300

080009a0 <_close>:

int _close(int fd) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db04      	blt.n	80009b8 <_close+0x18>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	dc01      	bgt.n	80009b8 <_close+0x18>
    return 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	e006      	b.n	80009c6 <_close+0x26>

  errno = EBADF;
 80009b8:	f005 fdc4 	bl	8006544 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	2209      	movs	r2, #9
 80009c0:	601a      	str	r2, [r3, #0]
  return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80009da:	f005 fdb3 	bl	8006544 <__errno>
 80009de:	4603      	mov	r3, r0
 80009e0:	2209      	movs	r2, #9
 80009e2:	601a      	str	r2, [r3, #0]
  return -1;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_read>:

int _read(int fd, char* ptr, int len) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d110      	bne.n	8000a24 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <_read+0x4c>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	f004 fcf5 	bl	80053fc <HAL_UART_Receive>
 8000a12:	4603      	mov	r3, r0
 8000a14:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <_read+0x30>
      return 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e008      	b.n	8000a32 <_read+0x42>
    else
      return EIO;
 8000a20:	2305      	movs	r3, #5
 8000a22:	e006      	b.n	8000a32 <_read+0x42>
  }
  errno = EBADF;
 8000a24:	f005 fd8e 	bl	8006544 <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2209      	movs	r2, #9
 8000a2c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000300 	.word	0x20000300

08000a40 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db08      	blt.n	8000a62 <_fstat+0x22>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	dc05      	bgt.n	8000a62 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	605a      	str	r2, [r3, #4]
    return 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e005      	b.n	8000a6e <_fstat+0x2e>
  }

  errno = EBADF;
 8000a62:	f005 fd6f 	bl	8006544 <__errno>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2209      	movs	r2, #9
 8000a6a:	601a      	str	r2, [r3, #0]
  return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f001 fb8c 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ae0:	d12c      	bne.n	8000b3c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_ADC_MspInit+0x84>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_ADC_MspInit+0x84>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_ADC_MspInit+0x84>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_ADC_MspInit+0x84>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_ADC_MspInit+0x84>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_ADC_MspInit+0x84>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b16:	2303      	movs	r3, #3
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f001 fda0 	bl	800266c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2012      	movs	r0, #18
 8000b32:	f001 fb56 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b36:	2012      	movs	r0, #18
 8000b38:	f001 fb6f 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a27      	ldr	r2, [pc, #156]	; (8000bf4 <HAL_TIM_Base_MspInit+0xac>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d114      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	201a      	movs	r0, #26
 8000b78:	f001 fb33 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b7c:	201a      	movs	r0, #26
 8000b7e:	f001 fb4c 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b82:	e032      	b.n	8000bea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8c:	d114      	bne.n	8000bb8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	201c      	movs	r0, #28
 8000bac:	f001 fb19 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb0:	201c      	movs	r0, #28
 8000bb2:	f001 fb32 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 8000bb6:	e018      	b.n	8000bea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_TIM_Base_MspInit+0xb4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d113      	bne.n	8000bea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	201a      	movs	r0, #26
 8000be0:	f001 faff 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000be4:	201a      	movs	r0, #26
 8000be6:	f001 fb18 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40014800 	.word	0x40014800

08000c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_TIM_MspPostInit+0x9c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d138      	bne.n	8000c94 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <HAL_TIM_MspPostInit+0xa0>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_TIM_MspPostInit+0xa0>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_TIM_MspPostInit+0xa0>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_TIM_MspPostInit+0xa0>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <HAL_TIM_MspPostInit+0xa0>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6153      	str	r3, [r2, #20]
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_TIM_MspPostInit+0xa0>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c62:	2306      	movs	r3, #6
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f001 fcfc 	bl	800266c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c74:	2301      	movs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c84:	2306      	movs	r3, #6
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_TIM_MspPostInit+0xa4>)
 8000c90:	f001 fcec 	bl	800266c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012c00 	.word	0x40012c00
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a41      	ldr	r2, [pc, #260]	; (8000dcc <HAL_UART_MspInit+0x124>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d17c      	bne.n	8000dc4 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <HAL_UART_MspInit+0x128>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <HAL_UART_MspInit+0x128>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_UART_MspInit+0x128>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b3b      	ldr	r3, [pc, #236]	; (8000dd0 <HAL_UART_MspInit+0x128>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a3a      	ldr	r2, [pc, #232]	; (8000dd0 <HAL_UART_MspInit+0x128>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <HAL_UART_MspInit+0x128>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f001 fca8 	bl	800266c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <HAL_UART_MspInit+0x130>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d4c:	4821      	ldr	r0, [pc, #132]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d4e:	f001 fa7e 	bl	800224e <HAL_DMA_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000d58:	f7ff fdc2 	bl	80008e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d60:	671a      	str	r2, [r3, #112]	; 0x70
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_UART_MspInit+0x12c>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d70:	2210      	movs	r2, #16
 8000d72:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000d9a:	f001 fa58 	bl	800224e <HAL_DMA_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000da4:	f7ff fd9c 	bl	80008e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000dac:	66da      	str	r2, [r3, #108]	; 0x6c
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2026      	movs	r0, #38	; 0x26
 8000dba:	f001 fa12 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dbe:	2026      	movs	r0, #38	; 0x26
 8000dc0:	f001 fa2b 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	200000b4 	.word	0x200000b4
 8000dd8:	4002006c 	.word	0x4002006c
 8000ddc:	20000194 	.word	0x20000194
 8000de0:	40020080 	.word	0x40020080

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f996 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <DMA1_Channel6_IRQHandler+0x10>)
 8000e3e:	f001 fb23 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000b4 	.word	0x200000b4

08000e4c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <DMA1_Channel7_IRQHandler+0x10>)
 8000e52:	f001 fb19 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000194 	.word	0x20000194

08000e60 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <ADC1_IRQHandler+0x10>)
 8000e66:	f000 fb63 	bl	8001530 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000144 	.word	0x20000144

08000e74 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000e7a:	f003 f9d2 	bl	8004222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000e80:	f003 f9cf 	bl	8004222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001d8 	.word	0x200001d8
 8000e8c:	200000f8 	.word	0x200000f8

08000e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM2_IRQHandler+0x10>)
 8000e96:	f003 f9c4 	bl	8004222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000230 	.word	0x20000230

08000ea4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART2_IRQHandler+0x10>)
 8000eaa:	f004 fc09 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000027c 	.word	0x2000027c

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f005 fb2c 	bl	8006544 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20004000 	.word	0x20004000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	20000330 	.word	0x20000330

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <issue_pulse>:

int _pulse_cnt;
const int num_edges = 10;

pulse_state issue_pulse(const tx_node node)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	printf("issue_pulse\n");
 8000f52:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <issue_pulse+0x78>)
 8000f54:	f005 fb96 	bl	8006684 <puts>
	if(_pulse_state != PULSE_IDLE) return PULSE_ERROR;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <issue_pulse+0x7c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <issue_pulse+0x1c>
 8000f60:	2303      	movs	r3, #3
 8000f62:	e028      	b.n	8000fb6 <issue_pulse+0x6e>
	_pulse_state = PULSE_BUSY;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <issue_pulse+0x7c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
	_pulse_cnt = 0;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <issue_pulse+0x80>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
	// start the timer

	// TODO assign ch based on node argument
	pulse_p.bank = GPIOA; pulse_p.ch = GPIO_PIN_8;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <issue_pulse+0x84>)
 8000f72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <issue_pulse+0x84>)
 8000f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7e:	809a      	strh	r2, [r3, #4]
	pulse_n.bank = GPIOB; pulse_n.ch = GPIO_PIN_10;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <issue_pulse+0x88>)
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <issue_pulse+0x8c>)
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <issue_pulse+0x88>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	809a      	strh	r2, [r3, #4]

	HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_SET);
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <issue_pulse+0x84>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <issue_pulse+0x84>)
 8000f94:	8891      	ldrh	r1, [r2, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fcd9 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <issue_pulse+0x88>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <issue_pulse+0x88>)
 8000fa4:	8891      	ldrh	r1, [r2, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fcd1 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim17);
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <issue_pulse+0x90>)
 8000fb0:	f003 f828 	bl	8004004 <HAL_TIM_Base_Start_IT>

    return PULSE_OK;
 8000fb4:	2302      	movs	r3, #2
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	080070e8 	.word	0x080070e8
 8000fc4:	200000a8 	.word	0x200000a8
 8000fc8:	20000304 	.word	0x20000304
 8000fcc:	20000308 	.word	0x20000308
 8000fd0:	20000310 	.word	0x20000310
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	200000f8 	.word	0x200000f8

08000fdc <get_pulse_state>:

pulse_state get_pulse_state()
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    return _pulse_state;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <get_pulse_state+0x14>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200000a8 	.word	0x200000a8

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(htim == &htim17 && _pulse_state == PULSE_BUSY)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d12f      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x70>
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d12b      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if(_pulse_cnt++ < num_edges)
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	4918      	ldr	r1, [pc, #96]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001014:	600a      	str	r2, [r1, #0]
 8001016:	220a      	movs	r2, #10
 8001018:	4293      	cmp	r3, r2
 800101a:	da10      	bge.n	800103e <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_TogglePin(pulse_p.bank, pulse_p.ch);
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001022:	8892      	ldrh	r2, [r2, #4]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fcaa 	bl	8002980 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(pulse_n.bank, pulse_n.ch);
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001032:	8892      	ldrh	r2, [r2, #4]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fca2 	bl	8002980 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
			_pulse_state = PULSE_IDLE;
		}
	}
}
 800103c:	e012      	b.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x70>
			HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_RESET);
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001044:	8891      	ldrh	r1, [r2, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fc81 	bl	8002950 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001054:	8891      	ldrh	r1, [r2, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fc79 	bl	8002950 <HAL_GPIO_WritePin>
			_pulse_state = PULSE_IDLE;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000f8 	.word	0x200000f8
 8001070:	200000a8 	.word	0x200000a8
 8001074:	20000304 	.word	0x20000304
 8001078:	20000308 	.word	0x20000308
 800107c:	20000310 	.word	0x20000310

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010aa:	f7ff ff3b 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f005 fa4f 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff f889 	bl	80001c8 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010c4:	08007198 	.word	0x08007198
  ldr r2, =_sbss
 80010c8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010cc:	2000032c 	.word	0x2000032c

080010d0 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <CAN_RX1_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x28>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x28>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f001 f871 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fcc2 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f889 	bl	8002236 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113c:	f001 f851 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000018 	.word	0x20000018
 8001158:	20000020 	.word	0x20000020
 800115c:	2000001c 	.word	0x2000001c

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000020 	.word	0x20000020
 8001184:	20000318 	.word	0x20000318

08001188 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;  
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000318 	.word	0x20000318

080011a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000020 	.word	0x20000020

080011e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09a      	sub	sp, #104	; 0x68
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e169      	b.n	8001518 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d176      	bne.n	8001344 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d152      	bne.n	8001304 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fc21 	bl	8000ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d13b      	bne.n	8001304 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fe67 	bl	8001f60 <ADC_Disable>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12f      	bne.n	8001304 <HAL_ADC_Init+0xe0>
 80012a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12b      	bne.n	8001304 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b4:	f023 0302 	bic.w	r3, r3, #2
 80012b8:	f043 0202 	orr.w	r2, r3, #2
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012e0:	4b8f      	ldr	r3, [pc, #572]	; (8001520 <HAL_ADC_Init+0x2fc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a8f      	ldr	r2, [pc, #572]	; (8001524 <HAL_ADC_Init+0x300>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9a      	lsrs	r2, r3, #18
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f6:	e002      	b.n	80012fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f9      	bne.n	80012f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001320:	d110      	bne.n	8001344 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f023 0312 	bic.w	r3, r3, #18
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f040 80d6 	bne.w	80014fe <HAL_ADC_Init+0x2da>
 8001352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80d1 	bne.w	80014fe <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80c9 	bne.w	80014fe <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001374:	f043 0202 	orr.w	r2, r3, #2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137c:	4b6a      	ldr	r3, [pc, #424]	; (8001528 <HAL_ADC_Init+0x304>)
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_ADC_Init+0x180>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_Init+0x180>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_ADC_Init+0x182>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11c      	bne.n	80013e4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d010      	beq.n	80013d2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_ADC_Init+0x1a8>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_Init+0x1a8>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_ADC_Init+0x1aa>
 80013cc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	431a      	orrs	r2, r3
 80013e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e5b      	ldrb	r3, [r3, #25]
 80013e8:	035b      	lsls	r3, r3, #13
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ee:	2a01      	cmp	r2, #1
 80013f0:	d002      	beq.n	80013f8 <HAL_ADC_Init+0x1d4>
 80013f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f6:	e000      	b.n	80013fa <HAL_ADC_Init+0x1d6>
 80013f8:	2200      	movs	r2, #0
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4313      	orrs	r3, r2
 8001408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140a:	4313      	orrs	r3, r2
 800140c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d11b      	bne.n	8001450 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e5b      	ldrb	r3, [r3, #25]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	3b01      	subs	r3, #1
 8001426:	045a      	lsls	r2, r3, #17
 8001428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800142a:	4313      	orrs	r3, r2
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	663b      	str	r3, [r7, #96]	; 0x60
 8001432:	e00d      	b.n	8001450 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800143c:	f043 0220 	orr.w	r2, r3, #32
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	4313      	orrs	r3, r2
 8001462:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001464:	4313      	orrs	r3, r2
 8001466:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b00      	cmp	r3, #0
 8001474:	d114      	bne.n	80014a0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e1b      	ldrb	r3, [r3, #24]
 800148e:	039a      	lsls	r2, r3, #14
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4313      	orrs	r3, r2
 800149a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800149c:	4313      	orrs	r3, r2
 800149e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_ADC_Init+0x308>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014b0:	430b      	orrs	r3, r1
 80014b2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d10c      	bne.n	80014d6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f023 010f 	bic.w	r1, r3, #15
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
 80014d4:	e007      	b.n	80014e6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 020f 	bic.w	r2, r2, #15
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f023 0303 	bic.w	r3, r3, #3
 80014f4:	f043 0201 	orr.w	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
 80014fc:	e00a      	b.n	8001514 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f023 0312 	bic.w	r3, r3, #18
 8001506:	f043 0210 	orr.w	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001518:	4618      	mov	r0, r3
 800151a:	3768      	adds	r7, #104	; 0x68
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000018 	.word	0x20000018
 8001524:	431bde83 	.word	0x431bde83
 8001528:	50000300 	.word	0x50000300
 800152c:	fff0c007 	.word	0xfff0c007

08001530 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b04      	cmp	r3, #4
 8001550:	d106      	bne.n	8001560 <HAL_ADC_IRQHandler+0x30>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b04      	cmp	r3, #4
 800155e:	d00d      	beq.n	800157c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800156a:	2b08      	cmp	r3, #8
 800156c:	d15e      	bne.n	800162c <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b08      	cmp	r3, #8
 800157a:	d157      	bne.n	800162c <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d139      	bne.n	800161e <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d134      	bne.n	800161e <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d12d      	bne.n	800161e <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11a      	bne.n	8001606 <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020c 	bic.w	r2, r2, #12
 80015de:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d112      	bne.n	800161e <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	641a      	str	r2, [r3, #64]	; 0x40
 8001604:	e00b      	b.n	800161e <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f043 0210 	orr.w	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fde2 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	220c      	movs	r2, #12
 800162a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b20      	cmp	r3, #32
 8001638:	d106      	bne.n	8001648 <HAL_ADC_IRQHandler+0x118>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b20      	cmp	r3, #32
 8001646:	d00d      	beq.n	8001664 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001652:	2b40      	cmp	r3, #64	; 0x40
 8001654:	d16d      	bne.n	8001732 <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	2b40      	cmp	r3, #64	; 0x40
 8001662:	d166      	bne.n	8001732 <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d14e      	bne.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_ADC_IRQHandler+0x178>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800169a:	2b00      	cmp	r3, #0
 800169c:	d142      	bne.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d13d      	bne.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b2:	2b40      	cmp	r3, #64	; 0x40
 80016b4:	d136      	bne.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d12d      	bne.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11a      	bne.n	800170c <HAL_ADC_IRQHandler+0x1dc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016e4:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d112      	bne.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
 800170a:	e00b      	b.n	8001724 <HAL_ADC_IRQHandler+0x1f4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f93d 	bl	80019a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2260      	movs	r2, #96	; 0x60
 8001730:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173c:	2b80      	cmp	r3, #128	; 0x80
 800173e:	d113      	bne.n	8001768 <HAL_ADC_IRQHandler+0x238>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	2b80      	cmp	r3, #128	; 0x80
 800174c:	d10c      	bne.n	8001768 <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fd4e 	bl	80011fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001776:	d115      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x274>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001786:	d10d      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f919 	bl	80019cc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b2:	d115      	bne.n	80017e0 <HAL_ADC_IRQHandler+0x2b0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	d10d      	bne.n	80017e0 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f905 	bl	80019e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d13d      	bne.n	800186a <HAL_ADC_IRQHandler+0x33a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d136      	bne.n	800186a <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 8001804:	2301      	movs	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e019      	b.n	800183e <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_ADC_IRQHandler+0x38c>)
 800180c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10a      	bne.n	800183e <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e007      	b.n	800183e <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10e      	bne.n	8001862 <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	f043 0202 	orr.w	r2, r3, #2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fcd7 	bl	8001210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2210      	movs	r2, #16
 8001868:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001878:	d11b      	bne.n	80018b2 <HAL_ADC_IRQHandler+0x382>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d113      	bne.n	80018b2 <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f043 0208 	orr.w	r2, r3, #8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f883 	bl	80019b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	50000300 	.word	0x50000300

080018c0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ADCEx_Calibration_Start+0x1c>
 80018d8:	2302      	movs	r3, #2
 80018da:	e05f      	b.n	800199c <HAL_ADCEx_Calibration_Start+0xdc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fb3b 	bl	8001f60 <ADC_Disable>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d14e      	bne.n	8001992 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001908:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800191e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001930:	f7ff fc2a 	bl	8001188 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001936:	e01c      	b.n	8001972 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001938:	f7ff fc26 	bl	8001188 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d915      	bls.n	8001972 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001954:	d10d      	bne.n	8001972 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f023 0312 	bic.w	r3, r3, #18
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e014      	b.n	800199c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800197c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001980:	d0da      	beq.n	8001938 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b09b      	sub	sp, #108	; 0x6c
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x22>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e299      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x556>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 827d 	bne.w	8001f28 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d81c      	bhi.n	8001a70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	461a      	mov	r2, r3
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4019      	ands	r1, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	e063      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d81e      	bhi.n	8001ab6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	3b1e      	subs	r3, #30
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4019      	ands	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	3b1e      	subs	r3, #30
 8001aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab4:	e040      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b0e      	cmp	r3, #14
 8001abc:	d81e      	bhi.n	8001afc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	3b3c      	subs	r3, #60	; 0x3c
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	3b3c      	subs	r3, #60	; 0x3c
 8001aee:	fa00 f203 	lsl.w	r2, r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
 8001afa:	e01d      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	3b5a      	subs	r3, #90	; 0x5a
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4019      	ands	r1, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	3b5a      	subs	r3, #90	; 0x5a
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80e5 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d91c      	bls.n	8001b8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6999      	ldr	r1, [r3, #24]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b1e      	subs	r3, #30
 8001b62:	2207      	movs	r2, #7
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4019      	ands	r1, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b1e      	subs	r3, #30
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	619a      	str	r2, [r3, #24]
 8001b88:	e019      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6959      	ldr	r1, [r3, #20]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d84f      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0x28c>
 8001be0:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be6:	bf00      	nop
 8001be8:	08001bf9 	.word	0x08001bf9
 8001bec:	08001c1b 	.word	0x08001c1b
 8001bf0:	08001c3d 	.word	0x08001c3d
 8001bf4:	08001c5f 	.word	0x08001c5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfe:	4b99      	ldr	r3, [pc, #612]	; (8001e64 <HAL_ADC_ConfigChannel+0x470>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	0691      	lsls	r1, r2, #26
 8001c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c18:	e07e      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c20:	4b90      	ldr	r3, [pc, #576]	; (8001e64 <HAL_ADC_ConfigChannel+0x470>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	0691      	lsls	r1, r2, #26
 8001c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c3a:	e06d      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_ADC_ConfigChannel+0x470>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	0691      	lsls	r1, r2, #26
 8001c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c5c:	e05c      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c64:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_ADC_ConfigChannel+0x470>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	0691      	lsls	r1, r2, #26
 8001c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c70:	430a      	orrs	r2, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c7e:	e04b      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	069b      	lsls	r3, r3, #26
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	069b      	lsls	r3, r3, #26
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cc6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	069b      	lsls	r3, r3, #26
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	069b      	lsls	r3, r3, #26
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10a      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d10:	e001      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d16:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x344>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x344>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x346>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80ff 	bne.w	8001f3e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00f      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d66:	e049      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	409a      	lsls	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	d91c      	bls.n	8001dc4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6999      	ldr	r1, [r3, #24]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b1b      	subs	r3, #27
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4019      	ands	r1, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6898      	ldr	r0, [r3, #8]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1b      	subs	r3, #27
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	e01b      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6959      	ldr	r1, [r3, #20]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4019      	ands	r1, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6898      	ldr	r0, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	fa00 f203 	lsl.w	r2, r0, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_ADC_ConfigChannel+0x474>)
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e18:	2b11      	cmp	r3, #17
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	f040 8086 	bne.w	8001f3e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d17f      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d10d      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x478>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d106      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x478>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e005      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x47a>
 8001e62:	bf00      	nop
 8001e64:	83fff000 	.word	0x83fff000
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d150      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e72:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x4a0>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x4a0>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x4a2>
 8001e94:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13c      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d11d      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x4ea>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eaa:	d118      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_ADC_ConfigChannel+0x564>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_ADC_ConfigChannel+0x568>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9a      	lsrs	r2, r3, #18
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ece:	e002      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001edc:	e02e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b11      	cmp	r3, #17
 8001ee4:	d10b      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x50a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eee:	d106      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001efc:	e01e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d11a      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f12:	e013      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f26:	e00a      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f3a:	e000      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f3c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	376c      	adds	r7, #108	; 0x6c
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000018 	.word	0x20000018
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <ADC_Disable+0x2c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <ADC_Disable+0x2c>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <ADC_Disable+0x2e>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d047      	beq.n	8002022 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030d 	and.w	r3, r3, #13
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10f      	bne.n	8001fc0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0202 	orr.w	r2, r2, #2
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff f8e6 	bl	8001188 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fbe:	e029      	b.n	8002014 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e023      	b.n	8002024 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fdc:	f7ff f8d4 	bl	8001188 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d914      	bls.n	8002014 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10d      	bne.n	8002014 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0210 	orr.w	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e007      	b.n	8002024 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d0dc      	beq.n	8001fdc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e037      	b.n	80022d4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800227a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800227e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9b8 	bl	800262c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}  
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_DMA_Start_IT+0x20>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e04a      	b.n	8002392 <HAL_DMA_Start_IT+0xb6>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800230a:	2b01      	cmp	r3, #1
 800230c:	d13a      	bne.n	8002384 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f94b 	bl	80025ce <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 020e 	orr.w	r2, r2, #14
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e00f      	b.n	8002372 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 020a 	orr.w	r2, r2, #10
 8002360:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0204 	bic.w	r2, r2, #4
 8002370:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e005      	b.n	8002390 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800238c:	2302      	movs	r3, #2
 800238e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002390:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2204      	movs	r2, #4
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e020      	b.n	8002400 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020e 	bic.w	r2, r2, #14
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800241e:	2b02      	cmp	r3, #2
 8002420:	d005      	beq.n	800242e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e027      	b.n	800247e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 020e 	bic.w	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
    } 
  }
  return status;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2204      	movs	r2, #4
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d024      	beq.n	80024fa <HAL_DMA_IRQHandler+0x72>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01f      	beq.n	80024fa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2104      	movs	r1, #4
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d06a      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	e065      	b.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2202      	movs	r2, #2
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02c      	beq.n	8002564 <HAL_DMA_IRQHandler+0xdc>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d027      	beq.n	8002564 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 020a 	bic.w	r2, r2, #10
 8002530:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	2102      	movs	r1, #2
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d035      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002562:	e030      	b.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2208      	movs	r2, #8
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d028      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d023      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 020e 	bic.w	r2, r2, #14
 800258c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
    }
  }
}  
 80025c4:	e7ff      	b.n	80025c6 <HAL_DMA_IRQHandler+0x13e>
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d108      	bne.n	800260e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800260c:	e007      	b.n	800261e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	60da      	str	r2, [r3, #12]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <DMA_CalcBaseAndBitshift+0x34>)
 800263c:	4413      	add	r3, r2
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <DMA_CalcBaseAndBitshift+0x38>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a06      	ldr	r2, [pc, #24]	; (8002668 <DMA_CalcBaseAndBitshift+0x3c>)
 8002650:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	bffdfff8 	.word	0xbffdfff8
 8002664:	cccccccd 	.word	0xcccccccd
 8002668:	40020000 	.word	0x40020000

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	e14e      	b.n	800291a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8140 	beq.w	8002914 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d005      	beq.n	80026ac <HAL_GPIO_Init+0x40>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d130      	bne.n	800270e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e2:	2201      	movs	r2, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0201 	and.w	r2, r3, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b03      	cmp	r3, #3
 8002718:	d017      	beq.n	800274a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d123      	bne.n	800279e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	6939      	ldr	r1, [r7, #16]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 809a 	beq.w	8002914 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_GPIO_Init+0x2cc>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_GPIO_Init+0x2cc>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <HAL_GPIO_Init+0x2cc>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x2d0>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002822:	d013      	beq.n	800284c <HAL_GPIO_Init+0x1e0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a46      	ldr	r2, [pc, #280]	; (8002940 <HAL_GPIO_Init+0x2d4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00d      	beq.n	8002848 <HAL_GPIO_Init+0x1dc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a45      	ldr	r2, [pc, #276]	; (8002944 <HAL_GPIO_Init+0x2d8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <HAL_GPIO_Init+0x1d8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a44      	ldr	r2, [pc, #272]	; (8002948 <HAL_GPIO_Init+0x2dc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_GPIO_Init+0x1d4>
 800283c:	2303      	movs	r3, #3
 800283e:	e006      	b.n	800284e <HAL_GPIO_Init+0x1e2>
 8002840:	2305      	movs	r3, #5
 8002842:	e004      	b.n	800284e <HAL_GPIO_Init+0x1e2>
 8002844:	2302      	movs	r3, #2
 8002846:	e002      	b.n	800284e <HAL_GPIO_Init+0x1e2>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_GPIO_Init+0x1e2>
 800284c:	2300      	movs	r3, #0
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4093      	lsls	r3, r2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800285e:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_GPIO_Init+0x2d0>)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_GPIO_Init+0x2e0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002890:	4a2e      	ldr	r2, [pc, #184]	; (800294c <HAL_GPIO_Init+0x2e0>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_GPIO_Init+0x2e0>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_GPIO_Init+0x2e0>)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_GPIO_Init+0x2e0>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_GPIO_Init+0x2e0>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_GPIO_Init+0x2e0>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_GPIO_Init+0x2e0>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f aea9 	bne.w	800267c <HAL_GPIO_Init+0x10>
  }
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	48000400 	.word	0x48000400
 8002944:	48000800 	.word	0x48000800
 8002948:	48000c00 	.word	0x48000c00
 800294c:	40010400 	.word	0x40010400

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800296c:	e002      	b.n	8002974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4013      	ands	r3, r2
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43d9      	mvns	r1, r3
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	400b      	ands	r3, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f000 bef4 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 816a 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029de:	4bb3      	ldr	r3, [pc, #716]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ea:	4bb0      	ldr	r3, [pc, #704]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d159      	bne.n	8002aaa <HAL_RCC_OscConfig+0xf6>
 80029f6:	4bad      	ldr	r3, [pc, #692]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d152      	bne.n	8002aaa <HAL_RCC_OscConfig+0xf6>
 8002a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_OscConfig+0x82>
 8002a30:	4b9e      	ldr	r3, [pc, #632]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0xae>
 8002a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a5e:	4b93      	ldr	r3, [pc, #588]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a6e:	fa92 f2a2 	rbit	r2, r2
 8002a72:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 810c 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x2fc>
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 8106 	bne.w	8002cb0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f000 be86 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x110>
 8002ab6:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7c      	ldr	r2, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e030      	b.n	8002b26 <HAL_RCC_OscConfig+0x172>
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x134>
 8002ace:	4b77      	ldr	r3, [pc, #476]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a76      	ldr	r2, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b74      	ldr	r3, [pc, #464]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a73      	ldr	r2, [pc, #460]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e01e      	b.n	8002b26 <HAL_RCC_OscConfig+0x172>
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x15a>
 8002af4:	4b6d      	ldr	r3, [pc, #436]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6c      	ldr	r2, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a69      	ldr	r2, [pc, #420]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e00b      	b.n	8002b26 <HAL_RCC_OscConfig+0x172>
 8002b0e:	4b67      	ldr	r3, [pc, #412]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a66      	ldr	r2, [pc, #408]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b64      	ldr	r3, [pc, #400]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	495d      	ldr	r1, [pc, #372]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d059      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fb20 	bl	8001188 <HAL_GetTick>
 8002b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fb1b 	bl	8001188 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f000 be29 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>
 8002b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b78:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_OscConfig+0x1e2>
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x20e>
 8002b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bb2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bd6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bda:	fab2 f282 	clz	r2, r2
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f042 0220 	orr.w	r2, r2, #32
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f002 021f 	and.w	r2, r2, #31
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ab      	beq.n	8002b4e <HAL_RCC_OscConfig+0x19a>
 8002bf6:	e05c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fac6 	bl	8001188 <HAL_GetTick>
 8002bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c02:	f7fe fac1 	bl	8001188 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d902      	bls.n	8002c18 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	f000 bdcf 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>
 8002c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_OscConfig+0x296>
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x2c2>
 8002c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c62:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_RCC_OscConfig+0x2f8>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c7a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c8e:	fab2 f282 	clz	r2, r2
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f002 021f 	and.w	r2, r2, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ab      	bne.n	8002c02 <HAL_RCC_OscConfig+0x24e>
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2fe>
 8002cac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 816f 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cc2:	4bd0      	ldr	r3, [pc, #832]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cce:	4bcd      	ldr	r3, [pc, #820]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d16c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x400>
 8002cda:	4bca      	ldr	r3, [pc, #808]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d166      	bne.n	8002db4 <HAL_RCC_OscConfig+0x400>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cf8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_OscConfig+0x362>
 8002d10:	4bbc      	ldr	r3, [pc, #752]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	e013      	b.n	8002d3e <HAL_RCC_OscConfig+0x38a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d3a:	4bb2      	ldr	r3, [pc, #712]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d48:	fa92 f2a2 	rbit	r2, r2
 8002d4c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d50:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d54:	fab2 f282 	clz	r2, r2
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f002 021f 	and.w	r2, r2, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_RCC_OscConfig+0x3cc>
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f000 bd1b 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4ba0      	ldr	r3, [pc, #640]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	21f8      	movs	r1, #248	; 0xf8
 8002d90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d98:	fa91 f1a1 	rbit	r1, r1
 8002d9c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002da0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002da4:	fab1 f181 	clz	r1, r1
 8002da8:	b2c9      	uxtb	r1, r1
 8002daa:	408b      	lsls	r3, r1
 8002dac:	4995      	ldr	r1, [pc, #596]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	e0f5      	b.n	8002fa0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8085 	beq.w	8002eca <HAL_RCC_OscConfig+0x516>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002dd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	461a      	mov	r2, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe f9cc 	bl	8001188 <HAL_GetTick>
 8002df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe f9c7 	bl	8001188 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d902      	bls.n	8002e0c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	f000 bcd5 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d102      	bne.n	8002e3c <HAL_RCC_OscConfig+0x488>
 8002e36:	4b73      	ldr	r3, [pc, #460]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	e013      	b.n	8002e64 <HAL_RCC_OscConfig+0x4b0>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e6e:	fa92 f2a2 	rbit	r2, r2
 8002e72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e7a:	fab2 f282 	clz	r2, r2
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f042 0220 	orr.w	r2, r2, #32
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f002 021f 	and.w	r2, r2, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0af      	beq.n	8002df6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	21f8      	movs	r1, #248	; 0xf8
 8002ea6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002eae:	fa91 f1a1 	rbit	r1, r1
 8002eb2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002eb6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002eba:	fab1 f181 	clz	r1, r1
 8002ebe:	b2c9      	uxtb	r1, r1
 8002ec0:	408b      	lsls	r3, r1
 8002ec2:	4950      	ldr	r1, [pc, #320]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e06a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x5ec>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002edc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f947 	bl	8001188 <HAL_GetTick>
 8002efa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe f942 	bl	8001188 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d902      	bls.n	8002f16 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	f000 bc50 	b.w	80037b6 <HAL_RCC_OscConfig+0xe02>
 8002f16:	2302      	movs	r3, #2
 8002f18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_OscConfig+0x592>
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	e013      	b.n	8002f6e <HAL_RCC_OscConfig+0x5ba>
 8002f46:	2302      	movs	r3, #2
 8002f48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_RCC_OscConfig+0x650>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f74:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f78:	fa92 f2a2 	rbit	r2, r2
 8002f7c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f80:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f042 0220 	orr.w	r2, r2, #32
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f002 021f 	and.w	r2, r2, #31
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1af      	bne.n	8002f00 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80da 	beq.w	8003164 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d069      	beq.n	800308e <HAL_RCC_OscConfig+0x6da>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_OscConfig+0x654>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f8d0 	bl	8001188 <HAL_GetTick>
 8002fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fec:	e00e      	b.n	800300c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fee:	f7fe f8cb 	bl	8001188 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d906      	bls.n	800300c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e3d9      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	10908120 	.word	0x10908120
 800300c:	2302      	movs	r3, #2
 800300e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800301e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003022:	2202      	movs	r2, #2
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800303a:	2202      	movs	r2, #2
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	fa93 f2a3 	rbit	r2, r3
 8003048:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800304c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	4ba5      	ldr	r3, [pc, #660]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003052:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003056:	2102      	movs	r1, #2
 8003058:	6019      	str	r1, [r3, #0]
 800305a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f1a3 	rbit	r1, r3
 8003064:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003068:	6019      	str	r1, [r3, #0]
  return result;
 800306a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0b0      	beq.n	8002fee <HAL_RCC_OscConfig+0x63a>
 800308c:	e06a      	b.n	8003164 <HAL_RCC_OscConfig+0x7b0>
 800308e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030a4:	601a      	str	r2, [r3, #0]
  return result;
 80030a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b8c      	ldr	r3, [pc, #560]	; (80032e8 <HAL_RCC_OscConfig+0x934>)
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe f862 	bl	8001188 <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e009      	b.n	80030de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe f85d 	bl	8001188 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e36b      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 80030de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030e2:	2202      	movs	r2, #2
 80030e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fa93 f2a3 	rbit	r2, r3
 80030f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030fa:	2202      	movs	r2, #2
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fa93 f2a3 	rbit	r2, r3
 8003108:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003112:	2202      	movs	r2, #2
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003124:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003126:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800312e:	2102      	movs	r1, #2
 8003130:	6019      	str	r1, [r3, #0]
 8003132:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f1a3 	rbit	r1, r3
 800313c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003140:	6019      	str	r1, [r3, #0]
  return result;
 8003142:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1b2      	bne.n	80030ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8158 	beq.w	8003424 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b5a      	ldr	r3, [pc, #360]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d112      	bne.n	80031ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	61d3      	str	r3, [r2, #28]
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_RCC_OscConfig+0x938>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11a      	bne.n	80031ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x938>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a4b      	ldr	r2, [pc, #300]	; (80032ec <HAL_RCC_OscConfig+0x938>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c4:	f7fd ffe0 	bl	8001188 <HAL_GetTick>
 80031c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e009      	b.n	80031e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fd ffdb 	bl	8001188 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2e9      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b42      	ldr	r3, [pc, #264]	; (80032ec <HAL_RCC_OscConfig+0x938>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ef      	beq.n	80031ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x852>
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a39      	ldr	r2, [pc, #228]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e02f      	b.n	8003266 <HAL_RCC_OscConfig+0x8b2>
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x876>
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a33      	ldr	r2, [pc, #204]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	e01d      	b.n	8003266 <HAL_RCC_OscConfig+0x8b2>
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b05      	cmp	r3, #5
 8003232:	d10c      	bne.n	800324e <HAL_RCC_OscConfig+0x89a>
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	e00b      	b.n	8003266 <HAL_RCC_OscConfig+0x8b2>
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6213      	str	r3, [r2, #32]
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d06b      	beq.n	8003348 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003270:	f7fd ff8a 	bl	8001188 <HAL_GetTick>
 8003274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd ff85 	bl	8001188 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e291      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 8003292:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003296:	2202      	movs	r2, #2
 8003298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ae:	2202      	movs	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032c0:	601a      	str	r2, [r3, #0]
  return result;
 80032c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_OscConfig+0x93c>
 80032dc:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <HAL_RCC_OscConfig+0x930>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	e014      	b.n	800330c <HAL_RCC_OscConfig+0x958>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	10908120 	.word	0x10908120
 80032ec:	40007000 	.word	0x40007000
 80032f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032f4:	2202      	movs	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	4bbb      	ldr	r3, [pc, #748]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003310:	2102      	movs	r1, #2
 8003312:	6011      	str	r1, [r2, #0]
 8003314:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	fa92 f1a2 	rbit	r1, r2
 800331e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003322:	6011      	str	r1, [r2, #0]
  return result;
 8003324:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	fab2 f282 	clz	r2, r2
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f002 021f 	and.w	r2, r2, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d099      	beq.n	800327a <HAL_RCC_OscConfig+0x8c6>
 8003346:	e063      	b.n	8003410 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fd ff1e 	bl	8001188 <HAL_GetTick>
 800334c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fd ff19 	bl	8001188 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e225      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 800336a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fa93 f2a3 	rbit	r2, r3
 800337c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003386:	2202      	movs	r2, #2
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003398:	601a      	str	r2, [r3, #0]
  return result;
 800339a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800339e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0xa06>
 80033b4:	4b90      	ldr	r3, [pc, #576]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	e00d      	b.n	80033d6 <HAL_RCC_OscConfig+0xa22>
 80033ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033be:	2202      	movs	r2, #2
 80033c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	fa93 f2a3 	rbit	r2, r3
 80033cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033da:	2102      	movs	r1, #2
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	fa92 f1a2 	rbit	r1, r2
 80033e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033ec:	6011      	str	r1, [r2, #0]
  return result;
 80033ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1a0      	bne.n	8003352 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003410:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b77      	ldr	r3, [pc, #476]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	4a76      	ldr	r2, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003422:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 81c2 	beq.w	80037b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003430:	4b71      	ldr	r3, [pc, #452]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	f000 819c 	beq.w	8003776 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b02      	cmp	r3, #2
 8003446:	f040 8114 	bne.w	8003672 <HAL_RCC_OscConfig+0xcbe>
 800344a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800344e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003462:	601a      	str	r2, [r3, #0]
  return result;
 8003464:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003468:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003474:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	461a      	mov	r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd fe82 	bl	8001188 <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e009      	b.n	800349e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd fe7d 	bl	8001188 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e18b      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 800349e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034b6:	601a      	str	r2, [r3, #0]
  return result;
 80034b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_OscConfig+0xb24>
 80034d2:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e01b      	b.n	8003510 <HAL_RCC_OscConfig+0xb5c>
 80034d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f2a3 	rbit	r2, r3
 8003506:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fa92 f1a2 	rbit	r1, r2
 8003524:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003528:	6011      	str	r1, [r2, #0]
  return result;
 800352a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f042 0220 	orr.w	r2, r2, #32
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d19e      	bne.n	800348a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	430b      	orrs	r3, r1
 8003562:	4925      	ldr	r1, [pc, #148]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
 8003568:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800356c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003580:	601a      	str	r2, [r3, #0]
  return result;
 8003582:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003586:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003592:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	461a      	mov	r2, r3
 800359a:	2301      	movs	r3, #1
 800359c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fd fdf3 	bl	8001188 <HAL_GetTick>
 80035a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a6:	e009      	b.n	80035bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fd fdee 	bl	8001188 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0fc      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 80035bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035d4:	601a      	str	r2, [r3, #0]
  return result;
 80035d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_RCC_OscConfig+0xc48>
 80035f0:	4b01      	ldr	r3, [pc, #4]	; (80035f8 <HAL_RCC_OscConfig+0xc44>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	e01e      	b.n	8003634 <HAL_RCC_OscConfig+0xc80>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800361a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_OscConfig+0xe0c>)
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800363c:	6011      	str	r1, [r2, #0]
 800363e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	fa92 f1a2 	rbit	r1, r2
 8003648:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800364c:	6011      	str	r1, [r2, #0]
  return result;
 800364e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	fab2 f282 	clz	r2, r2
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	f042 0220 	orr.w	r2, r2, #32
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f002 021f 	and.w	r2, r2, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d09b      	beq.n	80035a8 <HAL_RCC_OscConfig+0xbf4>
 8003670:	e0a0      	b.n	80037b4 <HAL_RCC_OscConfig+0xe00>
 8003672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800367a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800368a:	601a      	str	r2, [r3, #0]
  return result;
 800368c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003690:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800369c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fd fd6e 	bl	8001188 <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b0:	e009      	b.n	80036c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd fd69 	bl	8001188 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e077      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
 80036c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036de:	601a      	str	r2, [r3, #0]
  return result;
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_OscConfig+0xd4c>
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCC_OscConfig+0xe0c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e01b      	b.n	8003738 <HAL_RCC_OscConfig+0xd84>
 8003700:	f107 0320 	add.w	r3, r7, #32
 8003704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f107 0320 	add.w	r3, r7, #32
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f107 0318 	add.w	r3, r7, #24
 800371e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f107 0318 	add.w	r3, r7, #24
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_OscConfig+0xe0c>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f107 0210 	add.w	r2, r7, #16
 800373c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003740:	6011      	str	r1, [r2, #0]
 8003742:	f107 0210 	add.w	r2, r7, #16
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	fa92 f1a2 	rbit	r1, r2
 800374c:	f107 020c 	add.w	r2, r7, #12
 8003750:	6011      	str	r1, [r2, #0]
  return result;
 8003752:	f107 020c 	add.w	r2, r7, #12
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f002 021f 	and.w	r2, r2, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d19e      	bne.n	80036b2 <HAL_RCC_OscConfig+0xcfe>
 8003774:	e01e      	b.n	80037b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e018      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCC_OscConfig+0xe0c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800378c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	429a      	cmp	r2, r3
 800379c:	d108      	bne.n	80037b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800379e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b09e      	sub	sp, #120	; 0x78
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e162      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b90      	ldr	r3, [pc, #576]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 0207 	bic.w	r2, r3, #7
 80037f2:	498b      	ldr	r1, [pc, #556]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e14a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b82      	ldr	r3, [pc, #520]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	497f      	ldr	r1, [pc, #508]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80dc 	beq.w	80039f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d13c      	bne.n	80038ba <HAL_RCC_ClockConfig+0xf6>
 8003840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003844:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d102      	bne.n	800386a <HAL_RCC_ClockConfig+0xa6>
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	e00f      	b.n	800388a <HAL_RCC_ClockConfig+0xc6>
 800386a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	667b      	str	r3, [r7, #100]	; 0x64
 8003878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800388e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003892:	fa92 f2a2 	rbit	r2, r2
 8003896:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800389a:	fab2 f282 	clz	r2, r2
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	f042 0220 	orr.w	r2, r2, #32
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	f002 021f 	and.w	r2, r2, #31
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d17b      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0f3      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d13c      	bne.n	800393c <HAL_RCC_ClockConfig+0x178>
 80038c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_ClockConfig+0x128>
 80038e6:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e00f      	b.n	800390c <HAL_RCC_ClockConfig+0x148>
 80038ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003910:	63ba      	str	r2, [r7, #56]	; 0x38
 8003912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003914:	fa92 f2a2 	rbit	r2, r2
 8003918:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800391a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f002 021f 	and.w	r2, r2, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13a      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b2      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
 800393c:	2302      	movs	r3, #2
 800393e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_RCC_ClockConfig+0x1a0>
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e00d      	b.n	8003980 <HAL_RCC_ClockConfig+0x1bc>
 8003964:	2302      	movs	r3, #2
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2202      	movs	r2, #2
 8003982:	61ba      	str	r2, [r7, #24]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	fa92 f2a2 	rbit	r2, r2
 800398a:	617a      	str	r2, [r7, #20]
  return result;
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0220 	orr.w	r2, r2, #32
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e079      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c0:	f7fd fbe2 	bl	8001188 <HAL_GetTick>
 80039c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fbde 	bl	8001188 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e061      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d214      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	4906      	ldr	r1, [pc, #24]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e040      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	491a      	ldr	r1, [pc, #104]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4912      	ldr	r1, [pc, #72]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a66:	f000 f829 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	22f0      	movs	r2, #240	; 0xf0
 8003a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	fa92 f2a2 	rbit	r2, r2
 8003a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	40d3      	lsrs	r3, r2
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fb30 	bl	8001100 <HAL_InitTick>
  
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3778      	adds	r7, #120	; 0x78
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	080070f4 	.word	0x080070f4
 8003ab4:	20000018 	.word	0x20000018
 8003ab8:	2000001c 	.word	0x2000001c

08003abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b08b      	sub	sp, #44	; 0x2c
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d002      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x30>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x36>
 8003aea:	e03c      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aee:	623b      	str	r3, [r7, #32]
      break;
 8003af0:	e03c      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003af8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003afc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	fa92 f2a2 	rbit	r2, r2
 8003b04:	607a      	str	r2, [r7, #4]
  return result;
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	fab2 f282 	clz	r2, r2
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	40d3      	lsrs	r3, r2
 8003b10:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	220f      	movs	r2, #15
 8003b20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	fa92 f2a2 	rbit	r2, r2
 8003b28:	60fa      	str	r2, [r7, #12]
  return result;
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	40d3      	lsrs	r3, r2
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b44:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	e004      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	623b      	str	r3, [r7, #32]
      break;
 8003b64:	e002      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b68:	623b      	str	r3, [r7, #32]
      break;
 8003b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	372c      	adds	r7, #44	; 0x2c
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	0800710c 	.word	0x0800710c
 8003b88:	0800711c 	.word	0x0800711c
 8003b8c:	003d0900 	.word	0x003d0900

08003b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000018 	.word	0x20000018

08003ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bae:	f7ff ffef 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	603a      	str	r2, [r7, #0]
  return result;
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	40d3      	lsrs	r3, r2
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000
 8003be8:	08007104 	.word	0x08007104

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bf2:	f7ff ffcd 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	fa92 f2a2 	rbit	r2, r2
 8003c0c:	603a      	str	r2, [r7, #0]
  return result;
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	fab2 f282 	clz	r2, r2
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	40d3      	lsrs	r3, r2
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c1a:	5cd3      	ldrb	r3, [r2, r3]
 8003c1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	08007104 	.word	0x08007104

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b092      	sub	sp, #72	; 0x48
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80d4 	beq.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c54:	4b4e      	ldr	r3, [pc, #312]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4a4a      	ldr	r2, [pc, #296]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	61d3      	str	r3, [r2, #28]
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d118      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fd fa77 	bl	8001188 <HAL_GetTick>
 8003c9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7fd fa73 	bl	8001188 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	; 0x64
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e14b      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8084 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d07c      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	461a      	mov	r2, r3
 8003d06:	2301      	movs	r3, #1
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04b      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fd fa23 	bl	8001188 <HAL_GetTick>
 8003d42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fa1f 	bl	8001188 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0f5      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	2302      	movs	r3, #2
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	61fb      	str	r3, [r7, #28]
  return result;
 8003d74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d108      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d8a:	4b01      	ldr	r3, [pc, #4]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	e00d      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	10908100 	.word	0x10908100
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2202      	movs	r2, #2
 8003dae:	613a      	str	r2, [r7, #16]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	fa92 f2a2 	rbit	r2, r2
 8003db6:	60fa      	str	r2, [r7, #12]
  return result;
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f002 021f 	and.w	r2, r2, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0b7      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dd6:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	495b      	ldr	r1, [pc, #364]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b57      	ldr	r3, [pc, #348]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	4a56      	ldr	r2, [pc, #344]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e08:	4b51      	ldr	r3, [pc, #324]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f023 0203 	bic.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	494e      	ldr	r1, [pc, #312]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e26:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f023 0210 	bic.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4947      	ldr	r1, [pc, #284]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e44:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	493f      	ldr	r1, [pc, #252]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f023 0220 	bic.w	r2, r3, #32
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	4938      	ldr	r1, [pc, #224]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	4930      	ldr	r1, [pc, #192]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4929      	ldr	r1, [pc, #164]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4921      	ldr	r1, [pc, #132]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	491a      	ldr	r1, [pc, #104]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	4912      	ldr	r1, [pc, #72]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	490b      	ldr	r1, [pc, #44]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3748      	adds	r7, #72	; 0x48
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000

08003f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e049      	b.n	8003ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fde4 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fc12 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e03b      	b.n	8004094 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x4e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d004      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x4e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d115      	bne.n	800407e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d015      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x8c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d011      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407c:	e008      	b.n	8004090 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e000      	b.n	8004092 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40014000 	.word	0x40014000
 80040a8:	00010007 	.word	0x00010007

080040ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e049      	b.n	8004152 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f841 	bl	800415a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fb66 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f839 	bl	800420e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 fb04 	bl	80047bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0208 	bic.w	r2, r2, #8
 80041c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	d122      	bne.n	800427e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d11b      	bne.n	800427e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f06f 0202 	mvn.w	r2, #2
 800424e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa8a 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 800426a:	e005      	b.n	8004278 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa7c 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa8d 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b04      	cmp	r3, #4
 800428a:	d122      	bne.n	80042d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d11b      	bne.n	80042d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f06f 0204 	mvn.w	r2, #4
 80042a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa60 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 80042be:	e005      	b.n	80042cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa52 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa63 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d122      	bne.n	8004326 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11b      	bne.n	8004326 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0208 	mvn.w	r2, #8
 80042f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2204      	movs	r2, #4
 80042fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa36 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 8004312:	e005      	b.n	8004320 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fa28 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa39 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b10      	cmp	r3, #16
 8004332:	d122      	bne.n	800437a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b10      	cmp	r3, #16
 8004340:	d11b      	bne.n	800437a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0210 	mvn.w	r2, #16
 800434a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2208      	movs	r2, #8
 8004350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fa0c 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 8004366:	e005      	b.n	8004374 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f9fe 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa0f 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d10e      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0201 	mvn.w	r2, #1
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fc fe27 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b80      	cmp	r3, #128	; 0x80
 80043b2:	d10e      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 ff1f 	bl	8005210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 ff12 	bl	8005224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9bd 	bl	80047a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b20      	cmp	r3, #32
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0220 	mvn.w	r2, #32
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fed2 	bl	80051fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_TIM_OC_ConfigChannel+0x1e>
 800447a:	2302      	movs	r3, #2
 800447c:	e066      	b.n	800454c <HAL_TIM_OC_ConfigChannel+0xec>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b14      	cmp	r3, #20
 800448a:	d857      	bhi.n	800453c <HAL_TIM_OC_ConfigChannel+0xdc>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_TIM_OC_ConfigChannel+0x34>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044e9 	.word	0x080044e9
 8004498:	0800453d 	.word	0x0800453d
 800449c:	0800453d 	.word	0x0800453d
 80044a0:	0800453d 	.word	0x0800453d
 80044a4:	080044f7 	.word	0x080044f7
 80044a8:	0800453d 	.word	0x0800453d
 80044ac:	0800453d 	.word	0x0800453d
 80044b0:	0800453d 	.word	0x0800453d
 80044b4:	08004505 	.word	0x08004505
 80044b8:	0800453d 	.word	0x0800453d
 80044bc:	0800453d 	.word	0x0800453d
 80044c0:	0800453d 	.word	0x0800453d
 80044c4:	08004513 	.word	0x08004513
 80044c8:	0800453d 	.word	0x0800453d
 80044cc:	0800453d 	.word	0x0800453d
 80044d0:	0800453d 	.word	0x0800453d
 80044d4:	08004521 	.word	0x08004521
 80044d8:	0800453d 	.word	0x0800453d
 80044dc:	0800453d 	.word	0x0800453d
 80044e0:	0800453d 	.word	0x0800453d
 80044e4:	0800452f 	.word	0x0800452f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f9d2 	bl	8004898 <TIM_OC1_SetConfig>
      break;
 80044f4:	e025      	b.n	8004542 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa51 	bl	80049a4 <TIM_OC2_SetConfig>
      break;
 8004502:	e01e      	b.n	8004542 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 faca 	bl	8004aa4 <TIM_OC3_SetConfig>
      break;
 8004510:	e017      	b.n	8004542 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fb41 	bl	8004ba0 <TIM_OC4_SetConfig>
      break;
 800451e:	e010      	b.n	8004542 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb9e 	bl	8004c68 <TIM_OC5_SetConfig>
      break;
 800452c:	e009      	b.n	8004542 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fbf5 	bl	8004d24 <TIM_OC6_SetConfig>
      break;
 800453a:	e002      	b.n	8004542 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
      break;
 8004540:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIM_ConfigClockSource+0x1c>
 800456c:	2302      	movs	r3, #2
 800456e:	e0b6      	b.n	80046de <HAL_TIM_ConfigClockSource+0x18a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ac:	d03e      	beq.n	800462c <HAL_TIM_ConfigClockSource+0xd8>
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b2:	f200 8087 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	f000 8086 	beq.w	80046ca <HAL_TIM_ConfigClockSource+0x176>
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	d87f      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045c4:	2b70      	cmp	r3, #112	; 0x70
 80045c6:	d01a      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0xaa>
 80045c8:	2b70      	cmp	r3, #112	; 0x70
 80045ca:	d87b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045cc:	2b60      	cmp	r3, #96	; 0x60
 80045ce:	d050      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x11e>
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d877      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045d4:	2b50      	cmp	r3, #80	; 0x50
 80045d6:	d03c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0xfe>
 80045d8:	2b50      	cmp	r3, #80	; 0x50
 80045da:	d873      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d058      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x13e>
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d86f      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045e4:	2b30      	cmp	r3, #48	; 0x30
 80045e6:	d064      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x15e>
 80045e8:	2b30      	cmp	r3, #48	; 0x30
 80045ea:	d86b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d060      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x15e>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d867      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05c      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x15e>
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d05a      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x15e>
 80045fc:	e062      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6899      	ldr	r1, [r3, #8]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f000 fcf6 	bl	8004ffe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	609a      	str	r2, [r3, #8]
      break;
 800462a:	e04f      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6899      	ldr	r1, [r3, #8]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f000 fcdf 	bl	8004ffe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e03c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	461a      	mov	r2, r3
 8004660:	f000 fc53 	bl	8004f0a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2150      	movs	r1, #80	; 0x50
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fcac 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 8004670:	e02c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	461a      	mov	r2, r3
 8004680:	f000 fc72 	bl	8004f68 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2160      	movs	r1, #96	; 0x60
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fc9c 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 8004690:	e01c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 fc33 	bl	8004f0a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2140      	movs	r1, #64	; 0x40
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fc8c 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e00c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f000 fc83 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 80046c2:	e003      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      break;
 80046c8:	e000      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_SlaveConfigSynchro+0x18>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e031      	b.n	8004762 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fb67 	bl	8004de4 <TIM_SlaveTimer_SetConfig>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e018      	b.n	8004762 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800474e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a2e      	ldr	r2, [pc, #184]	; (8004888 <TIM_Base_SetConfig+0xcc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0x20>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047da:	d108      	bne.n	80047ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <TIM_Base_SetConfig+0xcc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_Base_SetConfig+0x5a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fc:	d00b      	beq.n	8004816 <TIM_Base_SetConfig+0x5a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a22      	ldr	r2, [pc, #136]	; (800488c <TIM_Base_SetConfig+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_Base_SetConfig+0x5a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a21      	ldr	r2, [pc, #132]	; (8004890 <TIM_Base_SetConfig+0xd4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0x5a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a20      	ldr	r2, [pc, #128]	; (8004894 <TIM_Base_SetConfig+0xd8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d108      	bne.n	8004828 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <TIM_Base_SetConfig+0xcc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0xb0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0d      	ldr	r2, [pc, #52]	; (800488c <TIM_Base_SetConfig+0xd0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0xb0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <TIM_Base_SetConfig+0xd4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <TIM_Base_SetConfig+0xd8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0302 	bic.w	r3, r3, #2
 80048e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a28      	ldr	r2, [pc, #160]	; (8004994 <TIM_OC1_SetConfig+0xfc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_OC1_SetConfig+0x78>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a27      	ldr	r2, [pc, #156]	; (8004998 <TIM_OC1_SetConfig+0x100>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_OC1_SetConfig+0x78>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a26      	ldr	r2, [pc, #152]	; (800499c <TIM_OC1_SetConfig+0x104>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_OC1_SetConfig+0x78>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <TIM_OC1_SetConfig+0x108>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <TIM_OC1_SetConfig+0xfc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_OC1_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <TIM_OC1_SetConfig+0x100>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_OC1_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <TIM_OC1_SetConfig+0x104>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC1_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <TIM_OC1_SetConfig+0x108>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d111      	bne.n	800496e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40014000 	.word	0x40014000
 800499c:	40014400 	.word	0x40014400
 80049a0:	40014800 	.word	0x40014800

080049a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0210 	bic.w	r2, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0320 	bic.w	r3, r3, #32
 80049f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <TIM_OC2_SetConfig+0xf0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10d      	bne.n	8004a24 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <TIM_OC2_SetConfig+0xf0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <TIM_OC2_SetConfig+0xa0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1a      	ldr	r2, [pc, #104]	; (8004a98 <TIM_OC2_SetConfig+0xf4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <TIM_OC2_SetConfig+0xa0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <TIM_OC2_SetConfig+0xf8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_OC2_SetConfig+0xa0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <TIM_OC2_SetConfig+0xfc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d113      	bne.n	8004a6c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a52:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800

08004aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a23      	ldr	r2, [pc, #140]	; (8004b90 <TIM_OC3_SetConfig+0xec>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d10d      	bne.n	8004b22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b20:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <TIM_OC3_SetConfig+0xec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_OC3_SetConfig+0x9e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <TIM_OC3_SetConfig+0xf0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_OC3_SetConfig+0x9e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <TIM_OC3_SetConfig+0xf4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x9e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <TIM_OC3_SetConfig+0xf8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d113      	bne.n	8004b6a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	031b      	lsls	r3, r3, #12
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <TIM_OC4_SetConfig+0xb8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <TIM_OC4_SetConfig+0x7c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <TIM_OC4_SetConfig+0xbc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_OC4_SetConfig+0x7c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC4_SetConfig+0xc0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC4_SetConfig+0x7c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <TIM_OC4_SetConfig+0xc4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <TIM_OC5_SetConfig+0xac>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC5_SetConfig+0x72>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <TIM_OC5_SetConfig+0xb0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC5_SetConfig+0x72>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <TIM_OC5_SetConfig+0xb4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC5_SetConfig+0x72>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <TIM_OC5_SetConfig+0xb8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d109      	bne.n	8004cee <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800

08004d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	051b      	lsls	r3, r3, #20
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <TIM_OC6_SetConfig+0xb0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <TIM_OC6_SetConfig+0x74>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <TIM_OC6_SetConfig+0xb4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <TIM_OC6_SetConfig+0x74>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <TIM_OC6_SetConfig+0xb8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_OC6_SetConfig+0x74>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <TIM_OC6_SetConfig+0xbc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d109      	bne.n	8004dac <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	029b      	lsls	r3, r3, #10
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800

08004de4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b70      	cmp	r3, #112	; 0x70
 8004e30:	d01a      	beq.n	8004e68 <TIM_SlaveTimer_SetConfig+0x84>
 8004e32:	2b70      	cmp	r3, #112	; 0x70
 8004e34:	d860      	bhi.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
 8004e36:	2b60      	cmp	r3, #96	; 0x60
 8004e38:	d054      	beq.n	8004ee4 <TIM_SlaveTimer_SetConfig+0x100>
 8004e3a:	2b60      	cmp	r3, #96	; 0x60
 8004e3c:	d85c      	bhi.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
 8004e3e:	2b50      	cmp	r3, #80	; 0x50
 8004e40:	d046      	beq.n	8004ed0 <TIM_SlaveTimer_SetConfig+0xec>
 8004e42:	2b50      	cmp	r3, #80	; 0x50
 8004e44:	d858      	bhi.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d019      	beq.n	8004e7e <TIM_SlaveTimer_SetConfig+0x9a>
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d854      	bhi.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d055      	beq.n	8004efe <TIM_SlaveTimer_SetConfig+0x11a>
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	d850      	bhi.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d051      	beq.n	8004efe <TIM_SlaveTimer_SetConfig+0x11a>
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d84c      	bhi.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04d      	beq.n	8004efe <TIM_SlaveTimer_SetConfig+0x11a>
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d04b      	beq.n	8004efe <TIM_SlaveTimer_SetConfig+0x11a>
 8004e66:	e047      	b.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68d9      	ldr	r1, [r3, #12]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f000 f8c1 	bl	8004ffe <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004e7c:	e040      	b.n	8004f00 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	d101      	bne.n	8004e8a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e03b      	b.n	8004f02 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
      break;
 8004ece:	e017      	b.n	8004f00 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f000 f814 	bl	8004f0a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004ee2:	e00d      	b.n	8004f00 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f000 f839 	bl	8004f68 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004ef6:	e003      	b.n	8004f00 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	e000      	b.n	8004f00 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004efe:	bf00      	nop
  }

  return status;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f023 0201 	bic.w	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 030a 	bic.w	r3, r3, #10
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f023 0210 	bic.w	r2, r3, #16
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	031b      	lsls	r3, r3, #12
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f043 0307 	orr.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	609a      	str	r2, [r3, #8]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005018:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	021a      	lsls	r2, r3, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	431a      	orrs	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4313      	orrs	r3, r2
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	609a      	str	r2, [r3, #8]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e04f      	b.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a21      	ldr	r2, [pc, #132]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005088:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d004      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10c      	bne.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005124:	2302      	movs	r3, #2
 8005126:	e060      	b.n	80051ea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d115      	bne.n	80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	051b      	lsls	r3, r3, #20
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00

080051fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e040      	b.n	80052cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fb fd24 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fd16 	bl	8005ca8 <UART_SetConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fe40 	bl	8005f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fec7 	bl	8006058 <UART_CheckIdleState>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	f040 8082 	bne.w	80053f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_UART_Transmit+0x26>
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e07a      	b.n	80053f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x38>
 8005308:	2302      	movs	r3, #2
 800530a:	e073      	b.n	80053f4 <HAL_UART_Transmit+0x120>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2221      	movs	r2, #33	; 0x21
 8005320:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005322:	f7fb ff31 	bl	8001188 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d108      	bne.n	8005354 <HAL_UART_Transmit+0x80>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e003      	b.n	800535c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005364:	e02d      	b.n	80053c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 feba 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e039      	b.n	80053f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005392:	b292      	uxth	r2, r2
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3302      	adds	r3, #2
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e008      	b.n	80053b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b292      	uxth	r2, r2
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cb      	bne.n	8005366 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2140      	movs	r1, #64	; 0x40
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fe86 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e005      	b.n	80053f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005410:	2b20      	cmp	r3, #32
 8005412:	f040 80bf 	bne.w	8005594 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_UART_Receive+0x26>
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0b7      	b.n	8005596 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_UART_Receive+0x38>
 8005430:	2302      	movs	r3, #2
 8005432:	e0b0      	b.n	8005596 <HAL_UART_Receive+0x19a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2222      	movs	r2, #34	; 0x22
 8005448:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005450:	f7fb fe9a 	bl	8001188 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d10e      	bne.n	800548e <HAL_UART_Receive+0x92>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <HAL_UART_Receive+0x88>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800547e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005482:	e02d      	b.n	80054e0 <HAL_UART_Receive+0xe4>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	22ff      	movs	r2, #255	; 0xff
 8005488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800548c:	e028      	b.n	80054e0 <HAL_UART_Receive+0xe4>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10d      	bne.n	80054b2 <HAL_UART_Receive+0xb6>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <HAL_UART_Receive+0xac>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054a6:	e01b      	b.n	80054e0 <HAL_UART_Receive+0xe4>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	227f      	movs	r2, #127	; 0x7f
 80054ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b0:	e016      	b.n	80054e0 <HAL_UART_Receive+0xe4>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ba:	d10d      	bne.n	80054d8 <HAL_UART_Receive+0xdc>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_UART_Receive+0xd2>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	227f      	movs	r2, #127	; 0x7f
 80054c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054cc:	e008      	b.n	80054e0 <HAL_UART_Receive+0xe4>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	223f      	movs	r2, #63	; 0x3f
 80054d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d6:	e003      	b.n	80054e0 <HAL_UART_Receive+0xe4>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d108      	bne.n	8005504 <HAL_UART_Receive+0x108>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005514:	e033      	b.n	800557e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2120      	movs	r1, #32
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fde2 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e032      	b.n	8005596 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800553c:	b29a      	uxth	r2, r3
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	4013      	ands	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3302      	adds	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e00d      	b.n	800556c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005556:	b29b      	uxth	r3, r3
 8005558:	b2da      	uxtb	r2, r3
 800555a:	8a7b      	ldrh	r3, [r7, #18]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	4013      	ands	r3, r2
 8005560:	b2da      	uxtb	r2, r3
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1c5      	bne.n	8005516 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d178      	bne.n	80056a8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_UART_Transmit_DMA+0x22>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e071      	b.n	80056aa <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Transmit_DMA+0x34>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e06a      	b.n	80056aa <HAL_UART_Transmit_DMA+0x10a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2221      	movs	r2, #33	; 0x21
 80055fe:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02b      	beq.n	8005660 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <HAL_UART_Transmit_DMA+0x114>)
 800560e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005614:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <HAL_UART_Transmit_DMA+0x118>)
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <HAL_UART_Transmit_DMA+0x11c>)
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005624:	2200      	movs	r2, #0
 8005626:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005630:	4619      	mov	r1, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3328      	adds	r3, #40	; 0x28
 8005638:	461a      	mov	r2, r3
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	f7fc fe4e 	bl	80022dc <HAL_DMA_Start_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2210      	movs	r2, #16
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e024      	b.n	80056aa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2240      	movs	r2, #64	; 0x40
 8005666:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	613b      	str	r3, [r7, #16]
   return(result);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	623a      	str	r2, [r7, #32]
 8005692:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	69f9      	ldr	r1, [r7, #28]
 8005696:	6a3a      	ldr	r2, [r7, #32]
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	61bb      	str	r3, [r7, #24]
   return(result);
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e5      	bne.n	8005670 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3728      	adds	r7, #40	; 0x28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	08006385 	.word	0x08006385
 80056b8:	08006419 	.word	0x08006419
 80056bc:	08006435 	.word	0x08006435

080056c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b0ba      	sub	sp, #232	; 0xe8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80056ee:	4013      	ands	r3, r2
 80056f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d115      	bne.n	8005728 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00f      	beq.n	8005728 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 82a3 	beq.w	8005c64 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
      }
      return;
 8005726:	e29d      	b.n	8005c64 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8117 	beq.w	8005960 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800573e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005742:	4b85      	ldr	r3, [pc, #532]	; (8005958 <HAL_UART_IRQHandler+0x298>)
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 810a 	beq.w	8005960 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d011      	beq.n	800577c <HAL_UART_IRQHandler+0xbc>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d011      	beq.n	80057ac <HAL_UART_IRQHandler+0xec>
 8005788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2202      	movs	r2, #2
 800579a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a2:	f043 0204 	orr.w	r2, r3, #4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <HAL_UART_IRQHandler+0x11c>
 80057b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2204      	movs	r2, #4
 80057ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d2:	f043 0202 	orr.w	r2, r3, #2
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d017      	beq.n	8005818 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2208      	movs	r2, #8
 8005806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580e:	f043 0208 	orr.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_UART_IRQHandler+0x18a>
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8209 	beq.w	8005c68 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d005      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800589a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d04f      	beq.n	8005942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fd0b 	bl	80062be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d141      	bne.n	800593a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1d9      	bne.n	80058b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	2b00      	cmp	r3, #0
 8005908:	d013      	beq.n	8005932 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	4a13      	ldr	r2, [pc, #76]	; (800595c <HAL_UART_IRQHandler+0x29c>)
 8005910:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4618      	mov	r0, r3
 8005918:	f7fc fd78 	bl	800240c <HAL_DMA_Abort_IT>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d017      	beq.n	8005952 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800592c:	4610      	mov	r0, r2
 800592e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e00f      	b.n	8005952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fa ffca 	bl	80008cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e00b      	b.n	8005952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fa ffc6 	bl	80008cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e007      	b.n	8005952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fa ffc2 	bl	80008cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005950:	e18a      	b.n	8005c68 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005952:	bf00      	nop
    return;
 8005954:	e188      	b.n	8005c68 <HAL_UART_IRQHandler+0x5a8>
 8005956:	bf00      	nop
 8005958:	04000120 	.word	0x04000120
 800595c:	080064b1 	.word	0x080064b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	2b01      	cmp	r3, #1
 8005966:	f040 8143 	bne.w	8005bf0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 813c 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8135 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2210      	movs	r2, #16
 800598c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	f040 80b1 	bne.w	8005b00 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 815c 	beq.w	8005c6c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059be:	429a      	cmp	r2, r3
 80059c0:	f080 8154 	bcs.w	8005c6c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	f000 8085 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1da      	bne.n	80059da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e1      	bne.n	8005a24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e3      	bne.n	8005a60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ac8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e4      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fc fc5b 	bl	800239a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8c9 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005afe:	e0b5      	b.n	8005c6c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80a7 	beq.w	8005c70 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80a2 	beq.w	8005c70 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e4      	bne.n	8005b2c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	623b      	str	r3, [r7, #32]
   return(result);
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b86:	633a      	str	r2, [r7, #48]	; 0x30
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e3      	bne.n	8005b62 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
 8005bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	617b      	str	r3, [r7, #20]
   return(result);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e4      	bne.n	8005bac <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f851 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bee:	e03f      	b.n	8005c70 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <HAL_UART_IRQHandler+0x55a>
 8005bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fc8c 	bl	8006530 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c18:	e02d      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01c      	beq.n	8005c74 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
    }
    return;
 8005c42:	e017      	b.n	8005c74 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fc3d 	bl	80064dc <UART_EndTransmit_IT>
    return;
 8005c62:	e008      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c64:	bf00      	nop
 8005c66:	e006      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005c68:	bf00      	nop
 8005c6a:	e004      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c6c:	bf00      	nop
 8005c6e:	e002      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c70:	bf00      	nop
 8005c72:	e000      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005c74:	bf00      	nop
  }

}
 8005c76:	37e8      	adds	r7, #232	; 0xe8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b8a      	ldr	r3, [pc, #552]	; (8005efc <UART_SetConfig+0x254>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	6979      	ldr	r1, [r7, #20]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a78      	ldr	r2, [pc, #480]	; (8005f00 <UART_SetConfig+0x258>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d120      	bne.n	8005d66 <UART_SetConfig+0xbe>
 8005d24:	4b77      	ldr	r3, [pc, #476]	; (8005f04 <UART_SetConfig+0x25c>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d817      	bhi.n	8005d60 <UART_SetConfig+0xb8>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x90>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d55 	.word	0x08005d55
 8005d40:	08005d5b 	.word	0x08005d5b
 8005d44:	08005d4f 	.word	0x08005d4f
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e01d      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e01a      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d54:	2304      	movs	r3, #4
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e017      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e014      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e011      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a67      	ldr	r2, [pc, #412]	; (8005f08 <UART_SetConfig+0x260>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d102      	bne.n	8005d76 <UART_SetConfig+0xce>
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a64      	ldr	r2, [pc, #400]	; (8005f0c <UART_SetConfig+0x264>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d102      	bne.n	8005d86 <UART_SetConfig+0xde>
 8005d80:	2300      	movs	r3, #0
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e001      	b.n	8005d8a <UART_SetConfig+0xe2>
 8005d86:	2310      	movs	r3, #16
 8005d88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d92:	d15b      	bne.n	8005e4c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005d94:	7ffb      	ldrb	r3, [r7, #31]
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d827      	bhi.n	8005dea <UART_SetConfig+0x142>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <UART_SetConfig+0xf8>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	08005deb 	.word	0x08005deb
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	08005deb 	.word	0x08005deb
 8005db8:	08005deb 	.word	0x08005deb
 8005dbc:	08005deb 	.word	0x08005deb
 8005dc0:	08005de3 	.word	0x08005de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc4:	f7fd fef0 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8005dc8:	61b8      	str	r0, [r7, #24]
        break;
 8005dca:	e013      	b.n	8005df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dcc:	f7fd ff0e 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8005dd0:	61b8      	str	r0, [r7, #24]
        break;
 8005dd2:	e00f      	b.n	8005df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dd4:	4b4e      	ldr	r3, [pc, #312]	; (8005f10 <UART_SetConfig+0x268>)
 8005dd6:	61bb      	str	r3, [r7, #24]
        break;
 8005dd8:	e00c      	b.n	8005df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dda:	f7fd fe6f 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8005dde:	61b8      	str	r0, [r7, #24]
        break;
 8005de0:	e008      	b.n	8005df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de6:	61bb      	str	r3, [r7, #24]
        break;
 8005de8:	e004      	b.n	8005df4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	77bb      	strb	r3, [r7, #30]
        break;
 8005df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d074      	beq.n	8005ee4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	005a      	lsls	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b0f      	cmp	r3, #15
 8005e16:	d916      	bls.n	8005e46 <UART_SetConfig+0x19e>
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1e:	d212      	bcs.n	8005e46 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f023 030f 	bic.w	r3, r3, #15
 8005e28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	89fb      	ldrh	r3, [r7, #14]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	89fa      	ldrh	r2, [r7, #14]
 8005e42:	60da      	str	r2, [r3, #12]
 8005e44:	e04e      	b.n	8005ee4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	77bb      	strb	r3, [r7, #30]
 8005e4a:	e04b      	b.n	8005ee4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d827      	bhi.n	8005ea2 <UART_SetConfig+0x1fa>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0x1b0>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	08005ea3 	.word	0x08005ea3
 8005e68:	08005e93 	.word	0x08005e93
 8005e6c:	08005ea3 	.word	0x08005ea3
 8005e70:	08005ea3 	.word	0x08005ea3
 8005e74:	08005ea3 	.word	0x08005ea3
 8005e78:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fd fe94 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8005e80:	61b8      	str	r0, [r7, #24]
        break;
 8005e82:	e013      	b.n	8005eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fd feb2 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8005e88:	61b8      	str	r0, [r7, #24]
        break;
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <UART_SetConfig+0x268>)
 8005e8e:	61bb      	str	r3, [r7, #24]
        break;
 8005e90:	e00c      	b.n	8005eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fd fe13 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8005e96:	61b8      	str	r0, [r7, #24]
        break;
 8005e98:	e008      	b.n	8005eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ea0:	e004      	b.n	8005eac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8005eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	085a      	lsrs	r2, r3, #1
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	441a      	add	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d908      	bls.n	8005ee0 <UART_SetConfig+0x238>
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d204      	bcs.n	8005ee0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	e001      	b.n	8005ee4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	efff69f3 	.word	0xefff69f3
 8005f00:	40013800 	.word	0x40013800
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40004400 	.word	0x40004400
 8005f0c:	40004800 	.word	0x40004800
 8005f10:	007a1200 	.word	0x007a1200

08005f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01a      	beq.n	800602a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006012:	d10a      	bne.n	800602a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	605a      	str	r2, [r3, #4]
  }
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006068:	f7fb f88e 	bl	8001188 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d10e      	bne.n	800609a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f82d 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e023      	b.n	80060e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d10e      	bne.n	80060c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f817 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e00d      	b.n	80060e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b09c      	sub	sp, #112	; 0x70
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fa:	e0a5      	b.n	8006248 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006102:	f000 80a1 	beq.w	8006248 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006106:	f7fb f83f 	bl	8001188 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <UART_WaitOnFlagUntilTimeout+0x32>
 8006116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006118:	2b00      	cmp	r3, #0
 800611a:	d13e      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800612a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006130:	667b      	str	r3, [r7, #100]	; 0x64
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800613c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e6      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3308      	adds	r3, #8
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	663b      	str	r3, [r7, #96]	; 0x60
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800616e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800617c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e067      	b.n	800626a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d04f      	beq.n	8006248 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b6:	d147      	bne.n	8006248 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
 80061e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	613b      	str	r3, [r7, #16]
   return(result);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	66bb      	str	r3, [r7, #104]	; 0x68
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006214:	623a      	str	r2, [r7, #32]
 8006216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	61bb      	str	r3, [r7, #24]
   return(result);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e010      	b.n	800626a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4013      	ands	r3, r2
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	429a      	cmp	r2, r3
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	429a      	cmp	r2, r3
 8006264:	f43f af4a 	beq.w	80060fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3770      	adds	r7, #112	; 0x70
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006272:	b480      	push	{r7}
 8006274:	b089      	sub	sp, #36	; 0x24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	60bb      	str	r3, [r7, #8]
   return(result);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6979      	ldr	r1, [r7, #20]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	613b      	str	r3, [r7, #16]
   return(result);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80062b2:	bf00      	nop
 80062b4:	3724      	adds	r7, #36	; 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062be:	b480      	push	{r7}
 80062c0:	b095      	sub	sp, #84	; 0x54
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e4:	643b      	str	r3, [r7, #64]	; 0x40
 80062e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e6      	bne.n	80062c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	61fb      	str	r3, [r7, #28]
   return(result);
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800631e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e5      	bne.n	80062f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	2b01      	cmp	r3, #1
 8006332:	d118      	bne.n	8006366 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	60bb      	str	r3, [r7, #8]
   return(result);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f023 0310 	bic.w	r3, r3, #16
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6979      	ldr	r1, [r7, #20]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	613b      	str	r3, [r7, #16]
   return(result);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e6      	bne.n	8006334 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006378:	bf00      	nop
 800637a:	3754      	adds	r7, #84	; 0x54
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b090      	sub	sp, #64	; 0x40
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b20      	cmp	r3, #32
 8006398:	d037      	beq.n	800640a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639c:	2200      	movs	r2, #0
 800639e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	623b      	str	r3, [r7, #32]
   return(result);
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c2:	633a      	str	r2, [r7, #48]	; 0x30
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e5      	bne.n	80063a2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69b9      	ldr	r1, [r7, #24]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	617b      	str	r3, [r7, #20]
   return(result);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006408:	e002      	b.n	8006410 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800640a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800640c:	f7fa fa54 	bl	80008b8 <HAL_UART_TxCpltCallback>
}
 8006410:	bf00      	nop
 8006412:	3740      	adds	r7, #64	; 0x40
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fc28 	bl	8005c7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800642c:	bf00      	nop
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006446:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800644c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006458:	2b80      	cmp	r3, #128	; 0x80
 800645a:	d109      	bne.n	8006470 <UART_DMAError+0x3c>
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b21      	cmp	r3, #33	; 0x21
 8006460:	d106      	bne.n	8006470 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff ff01 	bl	8006272 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d109      	bne.n	8006492 <UART_DMAError+0x5e>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b22      	cmp	r3, #34	; 0x22
 8006482:	d106      	bne.n	8006492 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800648c:	6978      	ldr	r0, [r7, #20]
 800648e:	f7ff ff16 	bl	80062be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006498:	f043 0210 	orr.w	r2, r3, #16
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064a2:	6978      	ldr	r0, [r7, #20]
 80064a4:	f7fa fa12 	bl	80008cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a8:	bf00      	nop
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7fa f9fc 	bl	80008cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	613b      	str	r3, [r7, #16]
   return(result);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fa f9c8 	bl	80008b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006528:	bf00      	nop
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	; (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000024 	.word	0x20000024

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4d0d      	ldr	r5, [pc, #52]	; (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	; (800658c <__libc_init_array+0x3c>)
 8006556:	1b64      	subs	r4, r4, r5
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2600      	movs	r6, #0
 800655c:	42a6      	cmp	r6, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4d0b      	ldr	r5, [pc, #44]	; (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	; (8006594 <__libc_init_array+0x44>)
 8006564:	f000 fdb4 	bl	80070d0 <_init>
 8006568:	1b64      	subs	r4, r4, r5
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2600      	movs	r6, #0
 800656e:	42a6      	cmp	r6, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f855 3b04 	ldr.w	r3, [r5], #4
 8006578:	4798      	blx	r3
 800657a:	3601      	adds	r6, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006582:	4798      	blx	r3
 8006584:	3601      	adds	r6, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	08007190 	.word	0x08007190
 800658c:	08007190 	.word	0x08007190
 8006590:	08007190 	.word	0x08007190
 8006594:	08007194 	.word	0x08007194

08006598 <memset>:
 8006598:	4402      	add	r2, r0
 800659a:	4603      	mov	r3, r0
 800659c:	4293      	cmp	r3, r2
 800659e:	d100      	bne.n	80065a2 <memset+0xa>
 80065a0:	4770      	bx	lr
 80065a2:	f803 1b01 	strb.w	r1, [r3], #1
 80065a6:	e7f9      	b.n	800659c <memset+0x4>

080065a8 <_puts_r>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	460e      	mov	r6, r1
 80065ac:	4605      	mov	r5, r0
 80065ae:	b118      	cbz	r0, 80065b8 <_puts_r+0x10>
 80065b0:	6983      	ldr	r3, [r0, #24]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_puts_r+0x10>
 80065b4:	f000 fb0e 	bl	8006bd4 <__sinit>
 80065b8:	69ab      	ldr	r3, [r5, #24]
 80065ba:	68ac      	ldr	r4, [r5, #8]
 80065bc:	b913      	cbnz	r3, 80065c4 <_puts_r+0x1c>
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 fb08 	bl	8006bd4 <__sinit>
 80065c4:	4b2c      	ldr	r3, [pc, #176]	; (8006678 <_puts_r+0xd0>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d120      	bne.n	800660c <_puts_r+0x64>
 80065ca:	686c      	ldr	r4, [r5, #4]
 80065cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ce:	07db      	lsls	r3, r3, #31
 80065d0:	d405      	bmi.n	80065de <_puts_r+0x36>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	0598      	lsls	r0, r3, #22
 80065d6:	d402      	bmi.n	80065de <_puts_r+0x36>
 80065d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065da:	f000 fb99 	bl	8006d10 <__retarget_lock_acquire_recursive>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	0719      	lsls	r1, r3, #28
 80065e2:	d51d      	bpl.n	8006620 <_puts_r+0x78>
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	b1db      	cbz	r3, 8006620 <_puts_r+0x78>
 80065e8:	3e01      	subs	r6, #1
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065f0:	3b01      	subs	r3, #1
 80065f2:	60a3      	str	r3, [r4, #8]
 80065f4:	bb39      	cbnz	r1, 8006646 <_puts_r+0x9e>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da38      	bge.n	800666c <_puts_r+0xc4>
 80065fa:	4622      	mov	r2, r4
 80065fc:	210a      	movs	r1, #10
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 f90e 	bl	8006820 <__swbuf_r>
 8006604:	3001      	adds	r0, #1
 8006606:	d011      	beq.n	800662c <_puts_r+0x84>
 8006608:	250a      	movs	r5, #10
 800660a:	e011      	b.n	8006630 <_puts_r+0x88>
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <_puts_r+0xd4>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <_puts_r+0x6e>
 8006612:	68ac      	ldr	r4, [r5, #8]
 8006614:	e7da      	b.n	80065cc <_puts_r+0x24>
 8006616:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <_puts_r+0xd8>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68ec      	ldreq	r4, [r5, #12]
 800661e:	e7d5      	b.n	80065cc <_puts_r+0x24>
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f94e 	bl	80068c4 <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0dd      	beq.n	80065e8 <_puts_r+0x40>
 800662c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006632:	07da      	lsls	r2, r3, #31
 8006634:	d405      	bmi.n	8006642 <_puts_r+0x9a>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	059b      	lsls	r3, r3, #22
 800663a:	d402      	bmi.n	8006642 <_puts_r+0x9a>
 800663c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663e:	f000 fb68 	bl	8006d12 <__retarget_lock_release_recursive>
 8006642:	4628      	mov	r0, r5
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	2b00      	cmp	r3, #0
 8006648:	da04      	bge.n	8006654 <_puts_r+0xac>
 800664a:	69a2      	ldr	r2, [r4, #24]
 800664c:	429a      	cmp	r2, r3
 800664e:	dc06      	bgt.n	800665e <_puts_r+0xb6>
 8006650:	290a      	cmp	r1, #10
 8006652:	d004      	beq.n	800665e <_puts_r+0xb6>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	7019      	strb	r1, [r3, #0]
 800665c:	e7c5      	b.n	80065ea <_puts_r+0x42>
 800665e:	4622      	mov	r2, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f000 f8dd 	bl	8006820 <__swbuf_r>
 8006666:	3001      	adds	r0, #1
 8006668:	d1bf      	bne.n	80065ea <_puts_r+0x42>
 800666a:	e7df      	b.n	800662c <_puts_r+0x84>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	250a      	movs	r5, #10
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	701d      	strb	r5, [r3, #0]
 8006676:	e7db      	b.n	8006630 <_puts_r+0x88>
 8006678:	08007150 	.word	0x08007150
 800667c:	08007170 	.word	0x08007170
 8006680:	08007130 	.word	0x08007130

08006684 <puts>:
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <puts+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f7ff bf8d 	b.w	80065a8 <_puts_r>
 800668e:	bf00      	nop
 8006690:	20000024 	.word	0x20000024

08006694 <setvbuf>:
 8006694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006698:	461d      	mov	r5, r3
 800669a:	4b5d      	ldr	r3, [pc, #372]	; (8006810 <setvbuf+0x17c>)
 800669c:	681f      	ldr	r7, [r3, #0]
 800669e:	4604      	mov	r4, r0
 80066a0:	460e      	mov	r6, r1
 80066a2:	4690      	mov	r8, r2
 80066a4:	b127      	cbz	r7, 80066b0 <setvbuf+0x1c>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	b913      	cbnz	r3, 80066b0 <setvbuf+0x1c>
 80066aa:	4638      	mov	r0, r7
 80066ac:	f000 fa92 	bl	8006bd4 <__sinit>
 80066b0:	4b58      	ldr	r3, [pc, #352]	; (8006814 <setvbuf+0x180>)
 80066b2:	429c      	cmp	r4, r3
 80066b4:	d167      	bne.n	8006786 <setvbuf+0xf2>
 80066b6:	687c      	ldr	r4, [r7, #4]
 80066b8:	f1b8 0f02 	cmp.w	r8, #2
 80066bc:	d006      	beq.n	80066cc <setvbuf+0x38>
 80066be:	f1b8 0f01 	cmp.w	r8, #1
 80066c2:	f200 809f 	bhi.w	8006804 <setvbuf+0x170>
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	f2c0 809c 	blt.w	8006804 <setvbuf+0x170>
 80066cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ce:	07db      	lsls	r3, r3, #31
 80066d0:	d405      	bmi.n	80066de <setvbuf+0x4a>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	0598      	lsls	r0, r3, #22
 80066d6:	d402      	bmi.n	80066de <setvbuf+0x4a>
 80066d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066da:	f000 fb19 	bl	8006d10 <__retarget_lock_acquire_recursive>
 80066de:	4621      	mov	r1, r4
 80066e0:	4638      	mov	r0, r7
 80066e2:	f000 f9e3 	bl	8006aac <_fflush_r>
 80066e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e8:	b141      	cbz	r1, 80066fc <setvbuf+0x68>
 80066ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d002      	beq.n	80066f8 <setvbuf+0x64>
 80066f2:	4638      	mov	r0, r7
 80066f4:	f000 fb7a 	bl	8006dec <_free_r>
 80066f8:	2300      	movs	r3, #0
 80066fa:	6363      	str	r3, [r4, #52]	; 0x34
 80066fc:	2300      	movs	r3, #0
 80066fe:	61a3      	str	r3, [r4, #24]
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	0619      	lsls	r1, r3, #24
 8006706:	d503      	bpl.n	8006710 <setvbuf+0x7c>
 8006708:	6921      	ldr	r1, [r4, #16]
 800670a:	4638      	mov	r0, r7
 800670c:	f000 fb6e 	bl	8006dec <_free_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	f1b8 0f02 	cmp.w	r8, #2
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	d06c      	beq.n	80067fc <setvbuf+0x168>
 8006722:	ab01      	add	r3, sp, #4
 8006724:	466a      	mov	r2, sp
 8006726:	4621      	mov	r1, r4
 8006728:	4638      	mov	r0, r7
 800672a:	f000 faf3 	bl	8006d14 <__swhatbuf_r>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	4318      	orrs	r0, r3
 8006732:	81a0      	strh	r0, [r4, #12]
 8006734:	2d00      	cmp	r5, #0
 8006736:	d130      	bne.n	800679a <setvbuf+0x106>
 8006738:	9d00      	ldr	r5, [sp, #0]
 800673a:	4628      	mov	r0, r5
 800673c:	f000 fb4e 	bl	8006ddc <malloc>
 8006740:	4606      	mov	r6, r0
 8006742:	2800      	cmp	r0, #0
 8006744:	d155      	bne.n	80067f2 <setvbuf+0x15e>
 8006746:	f8dd 9000 	ldr.w	r9, [sp]
 800674a:	45a9      	cmp	r9, r5
 800674c:	d14a      	bne.n	80067e4 <setvbuf+0x150>
 800674e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006752:	2200      	movs	r2, #0
 8006754:	60a2      	str	r2, [r4, #8]
 8006756:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	6122      	str	r2, [r4, #16]
 800675e:	2201      	movs	r2, #1
 8006760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006764:	6162      	str	r2, [r4, #20]
 8006766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006768:	f043 0302 	orr.w	r3, r3, #2
 800676c:	07d2      	lsls	r2, r2, #31
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	d405      	bmi.n	800677e <setvbuf+0xea>
 8006772:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006776:	d102      	bne.n	800677e <setvbuf+0xea>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f000 faca 	bl	8006d12 <__retarget_lock_release_recursive>
 800677e:	4628      	mov	r0, r5
 8006780:	b003      	add	sp, #12
 8006782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006786:	4b24      	ldr	r3, [pc, #144]	; (8006818 <setvbuf+0x184>)
 8006788:	429c      	cmp	r4, r3
 800678a:	d101      	bne.n	8006790 <setvbuf+0xfc>
 800678c:	68bc      	ldr	r4, [r7, #8]
 800678e:	e793      	b.n	80066b8 <setvbuf+0x24>
 8006790:	4b22      	ldr	r3, [pc, #136]	; (800681c <setvbuf+0x188>)
 8006792:	429c      	cmp	r4, r3
 8006794:	bf08      	it	eq
 8006796:	68fc      	ldreq	r4, [r7, #12]
 8006798:	e78e      	b.n	80066b8 <setvbuf+0x24>
 800679a:	2e00      	cmp	r6, #0
 800679c:	d0cd      	beq.n	800673a <setvbuf+0xa6>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	b913      	cbnz	r3, 80067a8 <setvbuf+0x114>
 80067a2:	4638      	mov	r0, r7
 80067a4:	f000 fa16 	bl	8006bd4 <__sinit>
 80067a8:	f1b8 0f01 	cmp.w	r8, #1
 80067ac:	bf08      	it	eq
 80067ae:	89a3      	ldrheq	r3, [r4, #12]
 80067b0:	6026      	str	r6, [r4, #0]
 80067b2:	bf04      	itt	eq
 80067b4:	f043 0301 	orreq.w	r3, r3, #1
 80067b8:	81a3      	strheq	r3, [r4, #12]
 80067ba:	89a2      	ldrh	r2, [r4, #12]
 80067bc:	f012 0308 	ands.w	r3, r2, #8
 80067c0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80067c4:	d01c      	beq.n	8006800 <setvbuf+0x16c>
 80067c6:	07d3      	lsls	r3, r2, #31
 80067c8:	bf41      	itttt	mi
 80067ca:	2300      	movmi	r3, #0
 80067cc:	426d      	negmi	r5, r5
 80067ce:	60a3      	strmi	r3, [r4, #8]
 80067d0:	61a5      	strmi	r5, [r4, #24]
 80067d2:	bf58      	it	pl
 80067d4:	60a5      	strpl	r5, [r4, #8]
 80067d6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80067d8:	f015 0501 	ands.w	r5, r5, #1
 80067dc:	d115      	bne.n	800680a <setvbuf+0x176>
 80067de:	f412 7f00 	tst.w	r2, #512	; 0x200
 80067e2:	e7c8      	b.n	8006776 <setvbuf+0xe2>
 80067e4:	4648      	mov	r0, r9
 80067e6:	f000 faf9 	bl	8006ddc <malloc>
 80067ea:	4606      	mov	r6, r0
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d0ae      	beq.n	800674e <setvbuf+0xba>
 80067f0:	464d      	mov	r5, r9
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	e7d0      	b.n	800679e <setvbuf+0x10a>
 80067fc:	2500      	movs	r5, #0
 80067fe:	e7a8      	b.n	8006752 <setvbuf+0xbe>
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	e7e8      	b.n	80067d6 <setvbuf+0x142>
 8006804:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006808:	e7b9      	b.n	800677e <setvbuf+0xea>
 800680a:	2500      	movs	r5, #0
 800680c:	e7b7      	b.n	800677e <setvbuf+0xea>
 800680e:	bf00      	nop
 8006810:	20000024 	.word	0x20000024
 8006814:	08007150 	.word	0x08007150
 8006818:	08007170 	.word	0x08007170
 800681c:	08007130 	.word	0x08007130

08006820 <__swbuf_r>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	460e      	mov	r6, r1
 8006824:	4614      	mov	r4, r2
 8006826:	4605      	mov	r5, r0
 8006828:	b118      	cbz	r0, 8006832 <__swbuf_r+0x12>
 800682a:	6983      	ldr	r3, [r0, #24]
 800682c:	b90b      	cbnz	r3, 8006832 <__swbuf_r+0x12>
 800682e:	f000 f9d1 	bl	8006bd4 <__sinit>
 8006832:	4b21      	ldr	r3, [pc, #132]	; (80068b8 <__swbuf_r+0x98>)
 8006834:	429c      	cmp	r4, r3
 8006836:	d12b      	bne.n	8006890 <__swbuf_r+0x70>
 8006838:	686c      	ldr	r4, [r5, #4]
 800683a:	69a3      	ldr	r3, [r4, #24]
 800683c:	60a3      	str	r3, [r4, #8]
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	071a      	lsls	r2, r3, #28
 8006842:	d52f      	bpl.n	80068a4 <__swbuf_r+0x84>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	b36b      	cbz	r3, 80068a4 <__swbuf_r+0x84>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	6963      	ldr	r3, [r4, #20]
 8006850:	b2f6      	uxtb	r6, r6
 8006852:	4283      	cmp	r3, r0
 8006854:	4637      	mov	r7, r6
 8006856:	dc04      	bgt.n	8006862 <__swbuf_r+0x42>
 8006858:	4621      	mov	r1, r4
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f926 	bl	8006aac <_fflush_r>
 8006860:	bb30      	cbnz	r0, 80068b0 <__swbuf_r+0x90>
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	3b01      	subs	r3, #1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	701e      	strb	r6, [r3, #0]
 8006870:	6963      	ldr	r3, [r4, #20]
 8006872:	3001      	adds	r0, #1
 8006874:	4283      	cmp	r3, r0
 8006876:	d004      	beq.n	8006882 <__swbuf_r+0x62>
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	07db      	lsls	r3, r3, #31
 800687c:	d506      	bpl.n	800688c <__swbuf_r+0x6c>
 800687e:	2e0a      	cmp	r6, #10
 8006880:	d104      	bne.n	800688c <__swbuf_r+0x6c>
 8006882:	4621      	mov	r1, r4
 8006884:	4628      	mov	r0, r5
 8006886:	f000 f911 	bl	8006aac <_fflush_r>
 800688a:	b988      	cbnz	r0, 80068b0 <__swbuf_r+0x90>
 800688c:	4638      	mov	r0, r7
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <__swbuf_r+0x9c>)
 8006892:	429c      	cmp	r4, r3
 8006894:	d101      	bne.n	800689a <__swbuf_r+0x7a>
 8006896:	68ac      	ldr	r4, [r5, #8]
 8006898:	e7cf      	b.n	800683a <__swbuf_r+0x1a>
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <__swbuf_r+0xa0>)
 800689c:	429c      	cmp	r4, r3
 800689e:	bf08      	it	eq
 80068a0:	68ec      	ldreq	r4, [r5, #12]
 80068a2:	e7ca      	b.n	800683a <__swbuf_r+0x1a>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 f80c 	bl	80068c4 <__swsetup_r>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d0cb      	beq.n	8006848 <__swbuf_r+0x28>
 80068b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068b4:	e7ea      	b.n	800688c <__swbuf_r+0x6c>
 80068b6:	bf00      	nop
 80068b8:	08007150 	.word	0x08007150
 80068bc:	08007170 	.word	0x08007170
 80068c0:	08007130 	.word	0x08007130

080068c4 <__swsetup_r>:
 80068c4:	4b32      	ldr	r3, [pc, #200]	; (8006990 <__swsetup_r+0xcc>)
 80068c6:	b570      	push	{r4, r5, r6, lr}
 80068c8:	681d      	ldr	r5, [r3, #0]
 80068ca:	4606      	mov	r6, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	b125      	cbz	r5, 80068da <__swsetup_r+0x16>
 80068d0:	69ab      	ldr	r3, [r5, #24]
 80068d2:	b913      	cbnz	r3, 80068da <__swsetup_r+0x16>
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 f97d 	bl	8006bd4 <__sinit>
 80068da:	4b2e      	ldr	r3, [pc, #184]	; (8006994 <__swsetup_r+0xd0>)
 80068dc:	429c      	cmp	r4, r3
 80068de:	d10f      	bne.n	8006900 <__swsetup_r+0x3c>
 80068e0:	686c      	ldr	r4, [r5, #4]
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e8:	0719      	lsls	r1, r3, #28
 80068ea:	d42c      	bmi.n	8006946 <__swsetup_r+0x82>
 80068ec:	06dd      	lsls	r5, r3, #27
 80068ee:	d411      	bmi.n	8006914 <__swsetup_r+0x50>
 80068f0:	2309      	movs	r3, #9
 80068f2:	6033      	str	r3, [r6, #0]
 80068f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fe:	e03e      	b.n	800697e <__swsetup_r+0xba>
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <__swsetup_r+0xd4>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d101      	bne.n	800690a <__swsetup_r+0x46>
 8006906:	68ac      	ldr	r4, [r5, #8]
 8006908:	e7eb      	b.n	80068e2 <__swsetup_r+0x1e>
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <__swsetup_r+0xd8>)
 800690c:	429c      	cmp	r4, r3
 800690e:	bf08      	it	eq
 8006910:	68ec      	ldreq	r4, [r5, #12]
 8006912:	e7e6      	b.n	80068e2 <__swsetup_r+0x1e>
 8006914:	0758      	lsls	r0, r3, #29
 8006916:	d512      	bpl.n	800693e <__swsetup_r+0x7a>
 8006918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800691a:	b141      	cbz	r1, 800692e <__swsetup_r+0x6a>
 800691c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006920:	4299      	cmp	r1, r3
 8006922:	d002      	beq.n	800692a <__swsetup_r+0x66>
 8006924:	4630      	mov	r0, r6
 8006926:	f000 fa61 	bl	8006dec <_free_r>
 800692a:	2300      	movs	r3, #0
 800692c:	6363      	str	r3, [r4, #52]	; 0x34
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	2300      	movs	r3, #0
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	f043 0308 	orr.w	r3, r3, #8
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	b94b      	cbnz	r3, 800695e <__swsetup_r+0x9a>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006954:	d003      	beq.n	800695e <__swsetup_r+0x9a>
 8006956:	4621      	mov	r1, r4
 8006958:	4630      	mov	r0, r6
 800695a:	f000 f9ff 	bl	8006d5c <__smakebuf_r>
 800695e:	89a0      	ldrh	r0, [r4, #12]
 8006960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006964:	f010 0301 	ands.w	r3, r0, #1
 8006968:	d00a      	beq.n	8006980 <__swsetup_r+0xbc>
 800696a:	2300      	movs	r3, #0
 800696c:	60a3      	str	r3, [r4, #8]
 800696e:	6963      	ldr	r3, [r4, #20]
 8006970:	425b      	negs	r3, r3
 8006972:	61a3      	str	r3, [r4, #24]
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	b943      	cbnz	r3, 800698a <__swsetup_r+0xc6>
 8006978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800697c:	d1ba      	bne.n	80068f4 <__swsetup_r+0x30>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	0781      	lsls	r1, r0, #30
 8006982:	bf58      	it	pl
 8006984:	6963      	ldrpl	r3, [r4, #20]
 8006986:	60a3      	str	r3, [r4, #8]
 8006988:	e7f4      	b.n	8006974 <__swsetup_r+0xb0>
 800698a:	2000      	movs	r0, #0
 800698c:	e7f7      	b.n	800697e <__swsetup_r+0xba>
 800698e:	bf00      	nop
 8006990:	20000024 	.word	0x20000024
 8006994:	08007150 	.word	0x08007150
 8006998:	08007170 	.word	0x08007170
 800699c:	08007130 	.word	0x08007130

080069a0 <__sflush_r>:
 80069a0:	898a      	ldrh	r2, [r1, #12]
 80069a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	4605      	mov	r5, r0
 80069a8:	0710      	lsls	r0, r2, #28
 80069aa:	460c      	mov	r4, r1
 80069ac:	d458      	bmi.n	8006a60 <__sflush_r+0xc0>
 80069ae:	684b      	ldr	r3, [r1, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dc05      	bgt.n	80069c0 <__sflush_r+0x20>
 80069b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dc02      	bgt.n	80069c0 <__sflush_r+0x20>
 80069ba:	2000      	movs	r0, #0
 80069bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069c2:	2e00      	cmp	r6, #0
 80069c4:	d0f9      	beq.n	80069ba <__sflush_r+0x1a>
 80069c6:	2300      	movs	r3, #0
 80069c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069cc:	682f      	ldr	r7, [r5, #0]
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	d032      	beq.n	8006a38 <__sflush_r+0x98>
 80069d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	075a      	lsls	r2, r3, #29
 80069d8:	d505      	bpl.n	80069e6 <__sflush_r+0x46>
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	1ac0      	subs	r0, r0, r3
 80069de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069e0:	b10b      	cbz	r3, 80069e6 <__sflush_r+0x46>
 80069e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069e4:	1ac0      	subs	r0, r0, r3
 80069e6:	2300      	movs	r3, #0
 80069e8:	4602      	mov	r2, r0
 80069ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ec:	6a21      	ldr	r1, [r4, #32]
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b0      	blx	r6
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	d106      	bne.n	8006a06 <__sflush_r+0x66>
 80069f8:	6829      	ldr	r1, [r5, #0]
 80069fa:	291d      	cmp	r1, #29
 80069fc:	d82c      	bhi.n	8006a58 <__sflush_r+0xb8>
 80069fe:	4a2a      	ldr	r2, [pc, #168]	; (8006aa8 <__sflush_r+0x108>)
 8006a00:	40ca      	lsrs	r2, r1
 8006a02:	07d6      	lsls	r6, r2, #31
 8006a04:	d528      	bpl.n	8006a58 <__sflush_r+0xb8>
 8006a06:	2200      	movs	r2, #0
 8006a08:	6062      	str	r2, [r4, #4]
 8006a0a:	04d9      	lsls	r1, r3, #19
 8006a0c:	6922      	ldr	r2, [r4, #16]
 8006a0e:	6022      	str	r2, [r4, #0]
 8006a10:	d504      	bpl.n	8006a1c <__sflush_r+0x7c>
 8006a12:	1c42      	adds	r2, r0, #1
 8006a14:	d101      	bne.n	8006a1a <__sflush_r+0x7a>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	b903      	cbnz	r3, 8006a1c <__sflush_r+0x7c>
 8006a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a1e:	602f      	str	r7, [r5, #0]
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d0ca      	beq.n	80069ba <__sflush_r+0x1a>
 8006a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	d002      	beq.n	8006a32 <__sflush_r+0x92>
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 f9dd 	bl	8006dec <_free_r>
 8006a32:	2000      	movs	r0, #0
 8006a34:	6360      	str	r0, [r4, #52]	; 0x34
 8006a36:	e7c1      	b.n	80069bc <__sflush_r+0x1c>
 8006a38:	6a21      	ldr	r1, [r4, #32]
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b0      	blx	r6
 8006a40:	1c41      	adds	r1, r0, #1
 8006a42:	d1c7      	bne.n	80069d4 <__sflush_r+0x34>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0c4      	beq.n	80069d4 <__sflush_r+0x34>
 8006a4a:	2b1d      	cmp	r3, #29
 8006a4c:	d001      	beq.n	8006a52 <__sflush_r+0xb2>
 8006a4e:	2b16      	cmp	r3, #22
 8006a50:	d101      	bne.n	8006a56 <__sflush_r+0xb6>
 8006a52:	602f      	str	r7, [r5, #0]
 8006a54:	e7b1      	b.n	80069ba <__sflush_r+0x1a>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	e7ad      	b.n	80069bc <__sflush_r+0x1c>
 8006a60:	690f      	ldr	r7, [r1, #16]
 8006a62:	2f00      	cmp	r7, #0
 8006a64:	d0a9      	beq.n	80069ba <__sflush_r+0x1a>
 8006a66:	0793      	lsls	r3, r2, #30
 8006a68:	680e      	ldr	r6, [r1, #0]
 8006a6a:	bf08      	it	eq
 8006a6c:	694b      	ldreq	r3, [r1, #20]
 8006a6e:	600f      	str	r7, [r1, #0]
 8006a70:	bf18      	it	ne
 8006a72:	2300      	movne	r3, #0
 8006a74:	eba6 0807 	sub.w	r8, r6, r7
 8006a78:	608b      	str	r3, [r1, #8]
 8006a7a:	f1b8 0f00 	cmp.w	r8, #0
 8006a7e:	dd9c      	ble.n	80069ba <__sflush_r+0x1a>
 8006a80:	6a21      	ldr	r1, [r4, #32]
 8006a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a84:	4643      	mov	r3, r8
 8006a86:	463a      	mov	r2, r7
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b0      	blx	r6
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	dc06      	bgt.n	8006a9e <__sflush_r+0xfe>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a9c:	e78e      	b.n	80069bc <__sflush_r+0x1c>
 8006a9e:	4407      	add	r7, r0
 8006aa0:	eba8 0800 	sub.w	r8, r8, r0
 8006aa4:	e7e9      	b.n	8006a7a <__sflush_r+0xda>
 8006aa6:	bf00      	nop
 8006aa8:	20400001 	.word	0x20400001

08006aac <_fflush_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	690b      	ldr	r3, [r1, #16]
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b913      	cbnz	r3, 8006abc <_fflush_r+0x10>
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	4628      	mov	r0, r5
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	b118      	cbz	r0, 8006ac6 <_fflush_r+0x1a>
 8006abe:	6983      	ldr	r3, [r0, #24]
 8006ac0:	b90b      	cbnz	r3, 8006ac6 <_fflush_r+0x1a>
 8006ac2:	f000 f887 	bl	8006bd4 <__sinit>
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <_fflush_r+0x6c>)
 8006ac8:	429c      	cmp	r4, r3
 8006aca:	d11b      	bne.n	8006b04 <_fflush_r+0x58>
 8006acc:	686c      	ldr	r4, [r5, #4]
 8006ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0ef      	beq.n	8006ab6 <_fflush_r+0xa>
 8006ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ad8:	07d0      	lsls	r0, r2, #31
 8006ada:	d404      	bmi.n	8006ae6 <_fflush_r+0x3a>
 8006adc:	0599      	lsls	r1, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_fflush_r+0x3a>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae2:	f000 f915 	bl	8006d10 <__retarget_lock_acquire_recursive>
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	4621      	mov	r1, r4
 8006aea:	f7ff ff59 	bl	80069a0 <__sflush_r>
 8006aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af0:	07da      	lsls	r2, r3, #31
 8006af2:	4605      	mov	r5, r0
 8006af4:	d4e0      	bmi.n	8006ab8 <_fflush_r+0xc>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	059b      	lsls	r3, r3, #22
 8006afa:	d4dd      	bmi.n	8006ab8 <_fflush_r+0xc>
 8006afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006afe:	f000 f908 	bl	8006d12 <__retarget_lock_release_recursive>
 8006b02:	e7d9      	b.n	8006ab8 <_fflush_r+0xc>
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <_fflush_r+0x70>)
 8006b06:	429c      	cmp	r4, r3
 8006b08:	d101      	bne.n	8006b0e <_fflush_r+0x62>
 8006b0a:	68ac      	ldr	r4, [r5, #8]
 8006b0c:	e7df      	b.n	8006ace <_fflush_r+0x22>
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <_fflush_r+0x74>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	bf08      	it	eq
 8006b14:	68ec      	ldreq	r4, [r5, #12]
 8006b16:	e7da      	b.n	8006ace <_fflush_r+0x22>
 8006b18:	08007150 	.word	0x08007150
 8006b1c:	08007170 	.word	0x08007170
 8006b20:	08007130 	.word	0x08007130

08006b24 <std>:
 8006b24:	2300      	movs	r3, #0
 8006b26:	b510      	push	{r4, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b32:	6083      	str	r3, [r0, #8]
 8006b34:	8181      	strh	r1, [r0, #12]
 8006b36:	6643      	str	r3, [r0, #100]	; 0x64
 8006b38:	81c2      	strh	r2, [r0, #14]
 8006b3a:	6183      	str	r3, [r0, #24]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	2208      	movs	r2, #8
 8006b40:	305c      	adds	r0, #92	; 0x5c
 8006b42:	f7ff fd29 	bl	8006598 <memset>
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <std+0x38>)
 8006b48:	6263      	str	r3, [r4, #36]	; 0x24
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <std+0x3c>)
 8006b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <std+0x40>)
 8006b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <std+0x44>)
 8006b54:	6224      	str	r4, [r4, #32]
 8006b56:	6323      	str	r3, [r4, #48]	; 0x30
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08006f61 	.word	0x08006f61
 8006b60:	08006f83 	.word	0x08006f83
 8006b64:	08006fbb 	.word	0x08006fbb
 8006b68:	08006fdf 	.word	0x08006fdf

08006b6c <_cleanup_r>:
 8006b6c:	4901      	ldr	r1, [pc, #4]	; (8006b74 <_cleanup_r+0x8>)
 8006b6e:	f000 b8af 	b.w	8006cd0 <_fwalk_reent>
 8006b72:	bf00      	nop
 8006b74:	08006aad 	.word	0x08006aad

08006b78 <__sfmoreglue>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	1e4a      	subs	r2, r1, #1
 8006b7c:	2568      	movs	r5, #104	; 0x68
 8006b7e:	4355      	muls	r5, r2
 8006b80:	460e      	mov	r6, r1
 8006b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b86:	f000 f981 	bl	8006e8c <_malloc_r>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	b140      	cbz	r0, 8006ba0 <__sfmoreglue+0x28>
 8006b8e:	2100      	movs	r1, #0
 8006b90:	e9c0 1600 	strd	r1, r6, [r0]
 8006b94:	300c      	adds	r0, #12
 8006b96:	60a0      	str	r0, [r4, #8]
 8006b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b9c:	f7ff fcfc 	bl	8006598 <memset>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}

08006ba4 <__sfp_lock_acquire>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__sfp_lock_acquire+0x8>)
 8006ba6:	f000 b8b3 	b.w	8006d10 <__retarget_lock_acquire_recursive>
 8006baa:	bf00      	nop
 8006bac:	20000324 	.word	0x20000324

08006bb0 <__sfp_lock_release>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__sfp_lock_release+0x8>)
 8006bb2:	f000 b8ae 	b.w	8006d12 <__retarget_lock_release_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	20000324 	.word	0x20000324

08006bbc <__sinit_lock_acquire>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__sinit_lock_acquire+0x8>)
 8006bbe:	f000 b8a7 	b.w	8006d10 <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	2000031f 	.word	0x2000031f

08006bc8 <__sinit_lock_release>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__sinit_lock_release+0x8>)
 8006bca:	f000 b8a2 	b.w	8006d12 <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	2000031f 	.word	0x2000031f

08006bd4 <__sinit>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	f7ff fff0 	bl	8006bbc <__sinit_lock_acquire>
 8006bdc:	69a3      	ldr	r3, [r4, #24]
 8006bde:	b11b      	cbz	r3, 8006be8 <__sinit+0x14>
 8006be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be4:	f7ff bff0 	b.w	8006bc8 <__sinit_lock_release>
 8006be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bec:	6523      	str	r3, [r4, #80]	; 0x50
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <__sinit+0x68>)
 8006bf0:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <__sinit+0x6c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	bf04      	itt	eq
 8006bfa:	2301      	moveq	r3, #1
 8006bfc:	61a3      	streq	r3, [r4, #24]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 f820 	bl	8006c44 <__sfp>
 8006c04:	6060      	str	r0, [r4, #4]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f81c 	bl	8006c44 <__sfp>
 8006c0c:	60a0      	str	r0, [r4, #8]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 f818 	bl	8006c44 <__sfp>
 8006c14:	2200      	movs	r2, #0
 8006c16:	60e0      	str	r0, [r4, #12]
 8006c18:	2104      	movs	r1, #4
 8006c1a:	6860      	ldr	r0, [r4, #4]
 8006c1c:	f7ff ff82 	bl	8006b24 <std>
 8006c20:	68a0      	ldr	r0, [r4, #8]
 8006c22:	2201      	movs	r2, #1
 8006c24:	2109      	movs	r1, #9
 8006c26:	f7ff ff7d 	bl	8006b24 <std>
 8006c2a:	68e0      	ldr	r0, [r4, #12]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	2112      	movs	r1, #18
 8006c30:	f7ff ff78 	bl	8006b24 <std>
 8006c34:	2301      	movs	r3, #1
 8006c36:	61a3      	str	r3, [r4, #24]
 8006c38:	e7d2      	b.n	8006be0 <__sinit+0xc>
 8006c3a:	bf00      	nop
 8006c3c:	0800712c 	.word	0x0800712c
 8006c40:	08006b6d 	.word	0x08006b6d

08006c44 <__sfp>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	4607      	mov	r7, r0
 8006c48:	f7ff ffac 	bl	8006ba4 <__sfp_lock_acquire>
 8006c4c:	4b1e      	ldr	r3, [pc, #120]	; (8006cc8 <__sfp+0x84>)
 8006c4e:	681e      	ldr	r6, [r3, #0]
 8006c50:	69b3      	ldr	r3, [r6, #24]
 8006c52:	b913      	cbnz	r3, 8006c5a <__sfp+0x16>
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7ff ffbd 	bl	8006bd4 <__sinit>
 8006c5a:	3648      	adds	r6, #72	; 0x48
 8006c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	d503      	bpl.n	8006c6c <__sfp+0x28>
 8006c64:	6833      	ldr	r3, [r6, #0]
 8006c66:	b30b      	cbz	r3, 8006cac <__sfp+0x68>
 8006c68:	6836      	ldr	r6, [r6, #0]
 8006c6a:	e7f7      	b.n	8006c5c <__sfp+0x18>
 8006c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c70:	b9d5      	cbnz	r5, 8006ca8 <__sfp+0x64>
 8006c72:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <__sfp+0x88>)
 8006c74:	60e3      	str	r3, [r4, #12]
 8006c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c7a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c7c:	f000 f847 	bl	8006d0e <__retarget_lock_init_recursive>
 8006c80:	f7ff ff96 	bl	8006bb0 <__sfp_lock_release>
 8006c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c8c:	6025      	str	r5, [r4, #0]
 8006c8e:	61a5      	str	r5, [r4, #24]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4629      	mov	r1, r5
 8006c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c98:	f7ff fc7e 	bl	8006598 <memset>
 8006c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca8:	3468      	adds	r4, #104	; 0x68
 8006caa:	e7d9      	b.n	8006c60 <__sfp+0x1c>
 8006cac:	2104      	movs	r1, #4
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ff62 	bl	8006b78 <__sfmoreglue>
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	6030      	str	r0, [r6, #0]
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1d5      	bne.n	8006c68 <__sfp+0x24>
 8006cbc:	f7ff ff78 	bl	8006bb0 <__sfp_lock_release>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	e7ee      	b.n	8006ca4 <__sfp+0x60>
 8006cc6:	bf00      	nop
 8006cc8:	0800712c 	.word	0x0800712c
 8006ccc:	ffff0001 	.word	0xffff0001

08006cd0 <_fwalk_reent>:
 8006cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	4688      	mov	r8, r1
 8006cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cdc:	2700      	movs	r7, #0
 8006cde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ce2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ce6:	d505      	bpl.n	8006cf4 <_fwalk_reent+0x24>
 8006ce8:	6824      	ldr	r4, [r4, #0]
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	d1f7      	bne.n	8006cde <_fwalk_reent+0xe>
 8006cee:	4638      	mov	r0, r7
 8006cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf4:	89ab      	ldrh	r3, [r5, #12]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d907      	bls.n	8006d0a <_fwalk_reent+0x3a>
 8006cfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	d003      	beq.n	8006d0a <_fwalk_reent+0x3a>
 8006d02:	4629      	mov	r1, r5
 8006d04:	4630      	mov	r0, r6
 8006d06:	47c0      	blx	r8
 8006d08:	4307      	orrs	r7, r0
 8006d0a:	3568      	adds	r5, #104	; 0x68
 8006d0c:	e7e9      	b.n	8006ce2 <_fwalk_reent+0x12>

08006d0e <__retarget_lock_init_recursive>:
 8006d0e:	4770      	bx	lr

08006d10 <__retarget_lock_acquire_recursive>:
 8006d10:	4770      	bx	lr

08006d12 <__retarget_lock_release_recursive>:
 8006d12:	4770      	bx	lr

08006d14 <__swhatbuf_r>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	460e      	mov	r6, r1
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	b096      	sub	sp, #88	; 0x58
 8006d20:	4614      	mov	r4, r2
 8006d22:	461d      	mov	r5, r3
 8006d24:	da07      	bge.n	8006d36 <__swhatbuf_r+0x22>
 8006d26:	2300      	movs	r3, #0
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	89b3      	ldrh	r3, [r6, #12]
 8006d2c:	061a      	lsls	r2, r3, #24
 8006d2e:	d410      	bmi.n	8006d52 <__swhatbuf_r+0x3e>
 8006d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d34:	e00e      	b.n	8006d54 <__swhatbuf_r+0x40>
 8006d36:	466a      	mov	r2, sp
 8006d38:	f000 f978 	bl	800702c <_fstat_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	dbf2      	blt.n	8006d26 <__swhatbuf_r+0x12>
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d4a:	425a      	negs	r2, r3
 8006d4c:	415a      	adcs	r2, r3
 8006d4e:	602a      	str	r2, [r5, #0]
 8006d50:	e7ee      	b.n	8006d30 <__swhatbuf_r+0x1c>
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	2000      	movs	r0, #0
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	b016      	add	sp, #88	; 0x58
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}

08006d5c <__smakebuf_r>:
 8006d5c:	898b      	ldrh	r3, [r1, #12]
 8006d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d60:	079d      	lsls	r5, r3, #30
 8006d62:	4606      	mov	r6, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	d507      	bpl.n	8006d78 <__smakebuf_r+0x1c>
 8006d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	2301      	movs	r3, #1
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	b002      	add	sp, #8
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	ab01      	add	r3, sp, #4
 8006d7a:	466a      	mov	r2, sp
 8006d7c:	f7ff ffca 	bl	8006d14 <__swhatbuf_r>
 8006d80:	9900      	ldr	r1, [sp, #0]
 8006d82:	4605      	mov	r5, r0
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f881 	bl	8006e8c <_malloc_r>
 8006d8a:	b948      	cbnz	r0, 8006da0 <__smakebuf_r+0x44>
 8006d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d90:	059a      	lsls	r2, r3, #22
 8006d92:	d4ef      	bmi.n	8006d74 <__smakebuf_r+0x18>
 8006d94:	f023 0303 	bic.w	r3, r3, #3
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	e7e3      	b.n	8006d68 <__smakebuf_r+0xc>
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <__smakebuf_r+0x7c>)
 8006da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	6020      	str	r0, [r4, #0]
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	9b00      	ldr	r3, [sp, #0]
 8006db0:	6163      	str	r3, [r4, #20]
 8006db2:	9b01      	ldr	r3, [sp, #4]
 8006db4:	6120      	str	r0, [r4, #16]
 8006db6:	b15b      	cbz	r3, 8006dd0 <__smakebuf_r+0x74>
 8006db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f000 f947 	bl	8007050 <_isatty_r>
 8006dc2:	b128      	cbz	r0, 8006dd0 <__smakebuf_r+0x74>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	89a0      	ldrh	r0, [r4, #12]
 8006dd2:	4305      	orrs	r5, r0
 8006dd4:	81a5      	strh	r5, [r4, #12]
 8006dd6:	e7cd      	b.n	8006d74 <__smakebuf_r+0x18>
 8006dd8:	08006b6d 	.word	0x08006b6d

08006ddc <malloc>:
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <malloc+0xc>)
 8006dde:	4601      	mov	r1, r0
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f000 b853 	b.w	8006e8c <_malloc_r>
 8006de6:	bf00      	nop
 8006de8:	20000024 	.word	0x20000024

08006dec <_free_r>:
 8006dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dee:	2900      	cmp	r1, #0
 8006df0:	d048      	beq.n	8006e84 <_free_r+0x98>
 8006df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df6:	9001      	str	r0, [sp, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006dfe:	bfb8      	it	lt
 8006e00:	18e4      	addlt	r4, r4, r3
 8006e02:	f000 f947 	bl	8007094 <__malloc_lock>
 8006e06:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <_free_r+0x9c>)
 8006e08:	9801      	ldr	r0, [sp, #4]
 8006e0a:	6813      	ldr	r3, [r2, #0]
 8006e0c:	4615      	mov	r5, r2
 8006e0e:	b933      	cbnz	r3, 8006e1e <_free_r+0x32>
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	6014      	str	r4, [r2, #0]
 8006e14:	b003      	add	sp, #12
 8006e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e1a:	f000 b941 	b.w	80070a0 <__malloc_unlock>
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	d90b      	bls.n	8006e3a <_free_r+0x4e>
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	1862      	adds	r2, r4, r1
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bf04      	itt	eq
 8006e2a:	681a      	ldreq	r2, [r3, #0]
 8006e2c:	685b      	ldreq	r3, [r3, #4]
 8006e2e:	6063      	str	r3, [r4, #4]
 8006e30:	bf04      	itt	eq
 8006e32:	1852      	addeq	r2, r2, r1
 8006e34:	6022      	streq	r2, [r4, #0]
 8006e36:	602c      	str	r4, [r5, #0]
 8006e38:	e7ec      	b.n	8006e14 <_free_r+0x28>
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b10b      	cbz	r3, 8006e44 <_free_r+0x58>
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d9fa      	bls.n	8006e3a <_free_r+0x4e>
 8006e44:	6811      	ldr	r1, [r2, #0]
 8006e46:	1855      	adds	r5, r2, r1
 8006e48:	42a5      	cmp	r5, r4
 8006e4a:	d10b      	bne.n	8006e64 <_free_r+0x78>
 8006e4c:	6824      	ldr	r4, [r4, #0]
 8006e4e:	4421      	add	r1, r4
 8006e50:	1854      	adds	r4, r2, r1
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	d1dd      	bne.n	8006e14 <_free_r+0x28>
 8006e58:	681c      	ldr	r4, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	6053      	str	r3, [r2, #4]
 8006e5e:	4421      	add	r1, r4
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	e7d7      	b.n	8006e14 <_free_r+0x28>
 8006e64:	d902      	bls.n	8006e6c <_free_r+0x80>
 8006e66:	230c      	movs	r3, #12
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	e7d3      	b.n	8006e14 <_free_r+0x28>
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	1961      	adds	r1, r4, r5
 8006e70:	428b      	cmp	r3, r1
 8006e72:	bf04      	itt	eq
 8006e74:	6819      	ldreq	r1, [r3, #0]
 8006e76:	685b      	ldreq	r3, [r3, #4]
 8006e78:	6063      	str	r3, [r4, #4]
 8006e7a:	bf04      	itt	eq
 8006e7c:	1949      	addeq	r1, r1, r5
 8006e7e:	6021      	streq	r1, [r4, #0]
 8006e80:	6054      	str	r4, [r2, #4]
 8006e82:	e7c7      	b.n	8006e14 <_free_r+0x28>
 8006e84:	b003      	add	sp, #12
 8006e86:	bd30      	pop	{r4, r5, pc}
 8006e88:	200000ac 	.word	0x200000ac

08006e8c <_malloc_r>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	1ccd      	adds	r5, r1, #3
 8006e90:	f025 0503 	bic.w	r5, r5, #3
 8006e94:	3508      	adds	r5, #8
 8006e96:	2d0c      	cmp	r5, #12
 8006e98:	bf38      	it	cc
 8006e9a:	250c      	movcc	r5, #12
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	db01      	blt.n	8006ea6 <_malloc_r+0x1a>
 8006ea2:	42a9      	cmp	r1, r5
 8006ea4:	d903      	bls.n	8006eae <_malloc_r+0x22>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	6033      	str	r3, [r6, #0]
 8006eaa:	2000      	movs	r0, #0
 8006eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eae:	f000 f8f1 	bl	8007094 <__malloc_lock>
 8006eb2:	4921      	ldr	r1, [pc, #132]	; (8006f38 <_malloc_r+0xac>)
 8006eb4:	680a      	ldr	r2, [r1, #0]
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	b99c      	cbnz	r4, 8006ee2 <_malloc_r+0x56>
 8006eba:	4f20      	ldr	r7, [pc, #128]	; (8006f3c <_malloc_r+0xb0>)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	b923      	cbnz	r3, 8006eca <_malloc_r+0x3e>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 f83c 	bl	8006f40 <_sbrk_r>
 8006ec8:	6038      	str	r0, [r7, #0]
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f000 f837 	bl	8006f40 <_sbrk_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d123      	bne.n	8006f1e <_malloc_r+0x92>
 8006ed6:	230c      	movs	r3, #12
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 f8e0 	bl	80070a0 <__malloc_unlock>
 8006ee0:	e7e3      	b.n	8006eaa <_malloc_r+0x1e>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	1b5b      	subs	r3, r3, r5
 8006ee6:	d417      	bmi.n	8006f18 <_malloc_r+0x8c>
 8006ee8:	2b0b      	cmp	r3, #11
 8006eea:	d903      	bls.n	8006ef4 <_malloc_r+0x68>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	441c      	add	r4, r3
 8006ef0:	6025      	str	r5, [r4, #0]
 8006ef2:	e004      	b.n	8006efe <_malloc_r+0x72>
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	42a2      	cmp	r2, r4
 8006ef8:	bf0c      	ite	eq
 8006efa:	600b      	streq	r3, [r1, #0]
 8006efc:	6053      	strne	r3, [r2, #4]
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 f8ce 	bl	80070a0 <__malloc_unlock>
 8006f04:	f104 000b 	add.w	r0, r4, #11
 8006f08:	1d23      	adds	r3, r4, #4
 8006f0a:	f020 0007 	bic.w	r0, r0, #7
 8006f0e:	1ac2      	subs	r2, r0, r3
 8006f10:	d0cc      	beq.n	8006eac <_malloc_r+0x20>
 8006f12:	1a1b      	subs	r3, r3, r0
 8006f14:	50a3      	str	r3, [r4, r2]
 8006f16:	e7c9      	b.n	8006eac <_malloc_r+0x20>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	6864      	ldr	r4, [r4, #4]
 8006f1c:	e7cc      	b.n	8006eb8 <_malloc_r+0x2c>
 8006f1e:	1cc4      	adds	r4, r0, #3
 8006f20:	f024 0403 	bic.w	r4, r4, #3
 8006f24:	42a0      	cmp	r0, r4
 8006f26:	d0e3      	beq.n	8006ef0 <_malloc_r+0x64>
 8006f28:	1a21      	subs	r1, r4, r0
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 f808 	bl	8006f40 <_sbrk_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d1dd      	bne.n	8006ef0 <_malloc_r+0x64>
 8006f34:	e7cf      	b.n	8006ed6 <_malloc_r+0x4a>
 8006f36:	bf00      	nop
 8006f38:	200000ac 	.word	0x200000ac
 8006f3c:	200000b0 	.word	0x200000b0

08006f40 <_sbrk_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	; (8006f5c <_sbrk_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7f9 ffb4 	bl	8000eb8 <_sbrk>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_sbrk_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_sbrk_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	20000328 	.word	0x20000328

08006f60 <__sread>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	460c      	mov	r4, r1
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	f000 f8a0 	bl	80070ac <_read_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	bfab      	itete	ge
 8006f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f72:	89a3      	ldrhlt	r3, [r4, #12]
 8006f74:	181b      	addge	r3, r3, r0
 8006f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f7a:	bfac      	ite	ge
 8006f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f7e:	81a3      	strhlt	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__swrite>:
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	461f      	mov	r7, r3
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	05db      	lsls	r3, r3, #23
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4616      	mov	r6, r2
 8006f92:	d505      	bpl.n	8006fa0 <__swrite+0x1e>
 8006f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f98:	2302      	movs	r3, #2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f000 f868 	bl	8007070 <_lseek_r>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	f000 b817 	b.w	8006fe8 <_write_r>

08006fba <__sseek>:
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 f855 	bl	8007070 <_lseek_r>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	bf15      	itete	ne
 8006fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fd6:	81a3      	strheq	r3, [r4, #12]
 8006fd8:	bf18      	it	ne
 8006fda:	81a3      	strhne	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__sclose>:
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 b813 	b.w	800700c <_close_r>
	...

08006fe8 <_write_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_write_r+0x20>)
 8006fec:	4604      	mov	r4, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7f9 fca6 	bl	8000948 <_write>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_write_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_write_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000328 	.word	0x20000328

0800700c <_close_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_close_r+0x1c>)
 8007010:	2300      	movs	r3, #0
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	f7f9 fcc2 	bl	80009a0 <_close>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_close_r+0x1a>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_close_r+0x1a>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000328 	.word	0x20000328

0800702c <_fstat_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_fstat_r+0x20>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	4611      	mov	r1, r2
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	f7f9 fd01 	bl	8000a40 <_fstat>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	d102      	bne.n	8007048 <_fstat_r+0x1c>
 8007042:	682b      	ldr	r3, [r5, #0]
 8007044:	b103      	cbz	r3, 8007048 <_fstat_r+0x1c>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	bf00      	nop
 800704c:	20000328 	.word	0x20000328

08007050 <_isatty_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d06      	ldr	r5, [pc, #24]	; (800706c <_isatty_r+0x1c>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7f9 fc5e 	bl	800091c <_isatty>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_isatty_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_isatty_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000328 	.word	0x20000328

08007070 <_lseek_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d07      	ldr	r5, [pc, #28]	; (8007090 <_lseek_r+0x20>)
 8007074:	4604      	mov	r4, r0
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7f9 fca5 	bl	80009ce <_lseek>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_lseek_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_lseek_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000328 	.word	0x20000328

08007094 <__malloc_lock>:
 8007094:	4801      	ldr	r0, [pc, #4]	; (800709c <__malloc_lock+0x8>)
 8007096:	f7ff be3b 	b.w	8006d10 <__retarget_lock_acquire_recursive>
 800709a:	bf00      	nop
 800709c:	20000320 	.word	0x20000320

080070a0 <__malloc_unlock>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__malloc_unlock+0x8>)
 80070a2:	f7ff be36 	b.w	8006d12 <__retarget_lock_release_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000320 	.word	0x20000320

080070ac <_read_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d07      	ldr	r5, [pc, #28]	; (80070cc <_read_r+0x20>)
 80070b0:	4604      	mov	r4, r0
 80070b2:	4608      	mov	r0, r1
 80070b4:	4611      	mov	r1, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f7f9 fc98 	bl	80009f0 <_read>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_read_r+0x1e>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_read_r+0x1e>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	20000328 	.word	0x20000328

080070d0 <_init>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr

080070dc <_fini>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr
