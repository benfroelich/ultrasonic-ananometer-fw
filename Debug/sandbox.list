
sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007700  08007700  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007700  08007700  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007700  08007700  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007700  08007700  00017700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  20000070  08007778  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08007778  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001520e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e8  00000000  00000000  000352ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00037a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001deda  00000000  00000000  000398d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013da1  00000000  00000000  000577aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae638  00000000  00000000  0006b54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004974  00000000  00000000  00119bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007610 	.word	0x08007610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007610 	.word	0x08007610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  for(int i = 0; i < ADC_BUFF_SZ; i++) adc_buffer[i] = 69;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	e007      	b.n	800028c <main+0x1c>
 800027c:	4a4b      	ldr	r2, [pc, #300]	; (80003ac <main+0x13c>)
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	2145      	movs	r1, #69	; 0x45
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	3301      	adds	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000292:	dbf3      	blt.n	800027c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fefe 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f894 	bl	80003c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 fae2 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a0:	f000 fab2 	bl	8000808 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002a4:	f000 fa80 	bl	80007a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002a8:	f000 f8ea 	bl	8000480 <MX_ADC1_Init>
  MX_TIM1_Init();
 80002ac:	f000 f926 	bl	80004fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80002b0:	f000 f9e4 	bl	800067c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2); // point stdio at uart2
 80002b4:	483e      	ldr	r0, [pc, #248]	; (80003b0 <main+0x140>)
 80002b6:	f000 fbc1 	bl	8000a3c <RetargetInit>
  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) Error_Handler();
 80002ba:	2100      	movs	r1, #0
 80002bc:	483d      	ldr	r0, [pc, #244]	; (80003b4 <main+0x144>)
 80002be:	f001 fac0 	bl	8001842 <HAL_ADCEx_Calibration_Start>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <main+0x5c>
 80002c8:	f000 fbb2 	bl	8000a30 <Error_Handler>
  while(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY));
 80002cc:	bf00      	nop
 80002ce:	4839      	ldr	r0, [pc, #228]	; (80003b4 <main+0x144>)
 80002d0:	f000 ff50 	bl	8001174 <HAL_ADC_GetState>
 80002d4:	4603      	mov	r3, r0
 80002d6:	f003 0302 	and.w	r3, r3, #2
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d0f7      	beq.n	80002ce <main+0x5e>

  //if(HAL_ADC_Start(&hadc1) != HAL_OK) Error_Handler();
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80002de:	2100      	movs	r1, #0
 80002e0:	4835      	ldr	r0, [pc, #212]	; (80003b8 <main+0x148>)
 80002e2:	f003 fe21 	bl	8003f28 <HAL_TIM_PWM_Start_IT>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <main+0x80>
 80002ec:	f000 fba0 	bl	8000a30 <Error_Handler>
  //if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK) Error_Handler();
  //if(HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
  if(HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 80002f0:	2108      	movs	r1, #8
 80002f2:	4831      	ldr	r0, [pc, #196]	; (80003b8 <main+0x148>)
 80002f4:	f003 fc84 	bl	8003c00 <HAL_TIM_OC_Start_IT>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <main+0x92>
 80002fe:	f000 fb97 	bl	8000a30 <Error_Handler>
  while(1)
  {
	  // since two 12-bit samples are packed into each 32-bit word, we can
	  // sample 2x the buffer size (in 32-bit words)
	  if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFF_SZ * SAMP_PER_WORD) != HAL_OK)
 8000302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000306:	4929      	ldr	r1, [pc, #164]	; (80003ac <main+0x13c>)
 8000308:	482a      	ldr	r0, [pc, #168]	; (80003b4 <main+0x144>)
 800030a:	f001 f9f1 	bl	80016f0 <HAL_ADC_Start_DMA>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <main+0xa8>
		  Error_Handler();
 8000314:	f000 fb8c 	bl	8000a30 <Error_Handler>
	  while(HAL_DMA_GetState(&hdma_adc1) != HAL_DMA_STATE_READY);
 8000318:	bf00      	nop
 800031a:	4828      	ldr	r0, [pc, #160]	; (80003bc <main+0x14c>)
 800031c:	f001 ff03 	bl	8002126 <HAL_DMA_GetState>
 8000320:	4603      	mov	r3, r0
 8000322:	2b01      	cmp	r3, #1
 8000324:	d1f9      	bne.n	800031a <main+0xaa>
		  Error_Handler();
*/

	  // take a single sample with polling
      __IO uint32_t adc_result1;
  	  while(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY));
 8000326:	bf00      	nop
 8000328:	4822      	ldr	r0, [pc, #136]	; (80003b4 <main+0x144>)
 800032a:	f000 ff23 	bl	8001174 <HAL_ADC_GetState>
 800032e:	4603      	mov	r3, r0
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b02      	cmp	r3, #2
 8000336:	d0f7      	beq.n	8000328 <main+0xb8>
      // read from ADC
   	  if(HAL_ADC_Start(&hadc1) != HAL_OK) {Error_Handler();}
 8000338:	481e      	ldr	r0, [pc, #120]	; (80003b4 <main+0x144>)
 800033a:	f001 f8ad 	bl	8001498 <HAL_ADC_Start>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <main+0xd8>
 8000344:	f000 fb74 	bl	8000a30 <Error_Handler>
   	  if(HAL_ADC_PollForConversion(&hadc1, 0xefff) != HAL_OK) {Error_Handler();}
 8000348:	f64e 71ff 	movw	r1, #61439	; 0xefff
 800034c:	4819      	ldr	r0, [pc, #100]	; (80003b4 <main+0x144>)
 800034e:	f001 f911 	bl	8001574 <HAL_ADC_PollForConversion>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <main+0xec>
 8000358:	f000 fb6a 	bl	8000a30 <Error_Handler>
   	  adc_result1 = HAL_ADC_GetValue(&hadc1);
 800035c:	4815      	ldr	r0, [pc, #84]	; (80003b4 <main+0x144>)
 800035e:	f001 fa63 	bl	8001828 <HAL_ADC_GetValue>
 8000362:	4603      	mov	r3, r0
 8000364:	603b      	str	r3, [r7, #0]

	  for(int i = 0; i < ADC_BUFF_SZ; i ++)
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	e012      	b.n	8000392 <main+0x122>
	  {
		  int word = adc_buffer[i];
 800036c:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <main+0x13c>)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000374:	607b      	str	r3, [r7, #4]
		  printf("%i\r%i\r", (word & SAMP1_MASK), (word & SAMP2_MASK) >> (32 / 2));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	141b      	asrs	r3, r3, #16
 8000380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000384:	461a      	mov	r2, r3
 8000386:	480e      	ldr	r0, [pc, #56]	; (80003c0 <main+0x150>)
 8000388:	f006 f91e 	bl	80065c8 <iprintf>
	  for(int i = 0; i < ADC_BUFF_SZ; i ++)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000398:	dbe8      	blt.n	800036c <main+0xfc>
	  }
	  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {}
 800039a:	bf00      	nop
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <main+0x140>)
 800039e:	f005 fd3b 	bl	8005e18 <HAL_UART_GetState>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b20      	cmp	r3, #32
 80003a6:	d1f9      	bne.n	800039c <main+0x12c>
  {
 80003a8:	e7ab      	b.n	8000302 <main+0x92>
 80003aa:	bf00      	nop
 80003ac:	200001b4 	.word	0x200001b4
 80003b0:	20000a28 	.word	0x20000a28
 80003b4:	200000dc 	.word	0x200000dc
 80003b8:	20000984 	.word	0x20000984
 80003bc:	20000170 	.word	0x20000170
 80003c0:	08007628 	.word	0x08007628

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b09c      	sub	sp, #112	; 0x70
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f006 f8f0 	bl	80065b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	463b      	mov	r3, r7
 80003ea:	2234      	movs	r2, #52	; 0x34
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f006 f8e2 	bl	80065b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f4:	2301      	movs	r3, #1
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80003fe:	2301      	movs	r3, #1
 8000400:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000402:	2301      	movs	r3, #1
 8000404:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000410:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000414:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800041a:	4618      	mov	r0, r3
 800041c:	f002 f868 	bl	80024f0 <HAL_RCC_OscConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000426:	f000 fb03 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	230f      	movs	r3, #15
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042e:	2302      	movs	r3, #2
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000444:	2102      	movs	r1, #2
 8000446:	4618      	mov	r0, r3
 8000448:	f002 ff5a 	bl	8003300 <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000452:	f000 faed 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 8000456:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800045a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000464:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	463b      	mov	r3, r7
 8000468:	4618      	mov	r0, r3
 800046a:	f003 f97f 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000474:	f000 fadc 	bl	8000a30 <Error_Handler>
  }
}
 8000478:	bf00      	nop
 800047a:	3770      	adds	r7, #112	; 0x70
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <MX_ADC1_Init+0x78>)
 8000486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800048a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048c:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_ADC1_Init+0x78>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <MX_ADC1_Init+0x78>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_ADC1_Init+0x78>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80004ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004d8:	2200      	movs	r2, #0
 80004da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004de:	2200      	movs	r2, #0
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_ADC1_Init+0x78>)
 80004e4:	f000 fe52 	bl	800118c <HAL_ADC_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80004ee:	f000 fa9f 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000dc 	.word	0x200000dc

080004fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b09e      	sub	sp, #120	; 0x78
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000510:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000520:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]
 800053e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	222c      	movs	r2, #44	; 0x2c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f006 f836 	bl	80065b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800054c:	4b49      	ldr	r3, [pc, #292]	; (8000674 <MX_TIM1_Init+0x178>)
 800054e:	4a4a      	ldr	r2, [pc, #296]	; (8000678 <MX_TIM1_Init+0x17c>)
 8000550:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000552:	4b48      	ldr	r3, [pc, #288]	; (8000674 <MX_TIM1_Init+0x178>)
 8000554:	2200      	movs	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <MX_TIM1_Init+0x178>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23;
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <MX_TIM1_Init+0x178>)
 8000560:	2217      	movs	r2, #23
 8000562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_TIM1_Init+0x178>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 8000;
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <MX_TIM1_Init+0x178>)
 800056c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000572:	4b40      	ldr	r3, [pc, #256]	; (8000674 <MX_TIM1_Init+0x178>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000578:	483e      	ldr	r0, [pc, #248]	; (8000674 <MX_TIM1_Init+0x178>)
 800057a:	f003 fa89 	bl	8003a90 <HAL_TIM_Base_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000584:	f000 fa54 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800058e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000592:	4619      	mov	r1, r3
 8000594:	4837      	ldr	r0, [pc, #220]	; (8000674 <MX_TIM1_Init+0x178>)
 8000596:	f004 f901 	bl	800479c <HAL_TIM_ConfigClockSource>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80005a0:	f000 fa46 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005a4:	4833      	ldr	r0, [pc, #204]	; (8000674 <MX_TIM1_Init+0x178>)
 80005a6:	f003 fc5d 	bl	8003e64 <HAL_TIM_PWM_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80005b0:	f000 fa3e 	bl	8000a30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c0:	4619      	mov	r1, r3
 80005c2:	482c      	ldr	r0, [pc, #176]	; (8000674 <MX_TIM1_Init+0x178>)
 80005c4:	f004 f9b3 	bl	800492e <HAL_TIM_SlaveConfigSynchro>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80005ce:	f000 fa2f 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005d2:	2320      	movs	r3, #32
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005d6:	2300      	movs	r3, #0
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005e2:	4619      	mov	r1, r3
 80005e4:	4823      	ldr	r0, [pc, #140]	; (8000674 <MX_TIM1_Init+0x178>)
 80005e6:	f004 fe7d 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80005f0:	f000 fa1e 	bl	8000a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	4816      	ldr	r0, [pc, #88]	; (8000674 <MX_TIM1_Init+0x178>)
 800061a:	f003 ffab 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000624:	f000 fa04 	bl	8000a30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800063c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800064a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_TIM1_Init+0x178>)
 800065e:	f004 fea7 	bl	80053b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000668:	f000 f9e2 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3778      	adds	r7, #120	; 0x78
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000984 	.word	0x20000984
 8000678:	40012c00 	.word	0x40012c00

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006be:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e6:	482f      	ldr	r0, [pc, #188]	; (80007a4 <MX_TIM2_Init+0x128>)
 80006e8:	f003 f9d2 	bl	8003a90 <HAL_TIM_Base_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80006f2:	f000 f99d 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000700:	4619      	mov	r1, r3
 8000702:	4828      	ldr	r0, [pc, #160]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000704:	f004 f84a 	bl	800479c <HAL_TIM_ConfigClockSource>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800070e:	f000 f98f 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000712:	4824      	ldr	r0, [pc, #144]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000714:	f003 fa13 	bl	8003b3e <HAL_TIM_OC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 800071e:	f000 f987 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000722:	2108      	movs	r1, #8
 8000724:	481f      	ldr	r0, [pc, #124]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000726:	f003 fd31 	bl	800418c <HAL_TIM_OnePulse_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000730:	f000 f97e 	bl	8000a30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000734:	2306      	movs	r3, #6
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800073c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000740:	4619      	mov	r1, r3
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000744:	f004 f8f3 	bl	800492e <HAL_TIM_SlaveConfigSynchro>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800074e:	f000 f96f 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4619      	mov	r1, r3
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000762:	f004 fdbf 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800076c:	f000 f960 	bl	8000a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000770:	2330      	movs	r3, #48	; 0x30
 8000772:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000788:	f003 fe7a 	bl	8004480 <HAL_TIM_OC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000792:	f000 f94d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM2_Init+0x128>)
 8000798:	f000 fadc 	bl	8000d54 <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200009dc 	.word	0x200009dc

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_USART2_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ec:	f004 fe76 	bl	80054dc <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f91b 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000a28 	.word	0x20000a28
 8000804:	40004400 	.word	0x40004400

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_DMA_Init+0x58>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_DMA_Init+0x58>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_DMA_Init+0x58>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	200b      	movs	r0, #11
 800082c:	f001 fa85 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000830:	200b      	movs	r0, #11
 8000832:	f001 fa9e 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2010      	movs	r0, #16
 800083c:	f001 fa7d 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000840:	2010      	movs	r0, #16
 8000842:	f001 fa96 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2011      	movs	r0, #17
 800084c:	f001 fa75 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000850:	2011      	movs	r0, #17
 8000852:	f001 fa8e 	bl	8001d72 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <MX_GPIO_Init+0x170>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <MX_GPIO_Init+0x170>)
 8000880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	4b53      	ldr	r3, [pc, #332]	; (80009d4 <MX_GPIO_Init+0x170>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b50      	ldr	r3, [pc, #320]	; (80009d4 <MX_GPIO_Init+0x170>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a4f      	ldr	r2, [pc, #316]	; (80009d4 <MX_GPIO_Init+0x170>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a49      	ldr	r2, [pc, #292]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	6153      	str	r3, [r2, #20]
 80008b6:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008cc:	6153      	str	r3, [r2, #20]
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <MX_GPIO_Init+0x170>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|tx_north_n_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2183      	movs	r1, #131	; 0x83
 80008de:	483e      	ldr	r0, [pc, #248]	; (80009d8 <MX_GPIO_Init+0x174>)
 80008e0:	f001 fdee 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f240 7102 	movw	r1, #1794	; 0x702
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f001 fde7 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_NORTH_P_Pin|LD2_Pin|GPIO_PIN_3|GPIO_PIN_4
 80008f2:	2200      	movs	r2, #0
 80008f4:	f242 4138 	movw	r1, #9272	; 0x2438
 80008f8:	4838      	ldr	r0, [pc, #224]	; (80009dc <MX_GPIO_Init+0x178>)
 80008fa:	f001 fde1 	bl	80024c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000904:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4830      	ldr	r0, [pc, #192]	; (80009d8 <MX_GPIO_Init+0x174>)
 8000916:	f001 fc61 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 tx_north_n_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|tx_north_n_Pin;
 800091a:	2381      	movs	r3, #129	; 0x81
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4829      	ldr	r0, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x174>)
 8000932:	f001 fc53 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000936:	2302      	movs	r3, #2
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4822      	ldr	r0, [pc, #136]	; (80009d8 <MX_GPIO_Init+0x174>)
 800094e:	f001 fc45 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 fc36 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_P_Pin PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = TX_NORTH_P_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000970:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_GPIO_Init+0x178>)
 800098a:	f001 fc27 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_GPIO_Init+0x178>)
 80009a8:	f001 fc18 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_N_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10;
 80009ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 fc08 	bl	80021dc <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    Error_Handler();
 80009fc:	f000 f818 	bl	8000a30 <Error_Handler>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <RetargetInit+0x28>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <RetargetInit+0x2c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6898      	ldr	r0, [r3, #8]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2202      	movs	r2, #2
 8000a54:	2100      	movs	r1, #0
 8000a56:	f005 fdcf 	bl	80065f8 <setvbuf>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000aac 	.word	0x20000aac
 8000a68:	2000000c 	.word	0x2000000c

08000a6c <_isatty>:

int _isatty(int fd) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db04      	blt.n	8000a84 <_isatty+0x18>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	dc01      	bgt.n	8000a84 <_isatty+0x18>
    return 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e005      	b.n	8000a90 <_isatty+0x24>

  errno = EBADF;
 8000a84:	f005 fd6e 	bl	8006564 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2209      	movs	r2, #9
 8000a8c:	601a      	str	r2, [r3, #0]
  return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_write>:

int _write(int fd, char* ptr, int len) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d002      	beq.n	8000ab0 <_write+0x18>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d111      	bne.n	8000ad4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <_write+0x54>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	f004 fd5b 	bl	8005578 <HAL_UART_Transmit>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d101      	bne.n	8000ad0 <_write+0x38>
      return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	e008      	b.n	8000ae2 <_write+0x4a>
    else
      return EIO;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	e006      	b.n	8000ae2 <_write+0x4a>
  }
  errno = EBADF;
 8000ad4:	f005 fd46 	bl	8006564 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2209      	movs	r2, #9
 8000adc:	601a      	str	r2, [r3, #0]
  return -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000aac 	.word	0x20000aac

08000af0 <_close>:

int _close(int fd) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db04      	blt.n	8000b08 <_close+0x18>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	dc01      	bgt.n	8000b08 <_close+0x18>
    return 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e006      	b.n	8000b16 <_close+0x26>

  errno = EBADF;
 8000b08:	f005 fd2c 	bl	8006564 <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2209      	movs	r2, #9
 8000b10:	601a      	str	r2, [r3, #0]
  return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b2a:	f005 fd1b 	bl	8006564 <__errno>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2209      	movs	r2, #9
 8000b32:	601a      	str	r2, [r3, #0]
  return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d110      	bne.n	8000b74 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <_read+0x4c>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	f004 fd9f 	bl	80056a0 <HAL_UART_Receive>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <_read+0x30>
      return 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e008      	b.n	8000b82 <_read+0x42>
    else
      return EIO;
 8000b70:	2305      	movs	r3, #5
 8000b72:	e006      	b.n	8000b82 <_read+0x42>
  }
  errno = EBADF;
 8000b74:	f005 fcf6 	bl	8006564 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2209      	movs	r2, #9
 8000b7c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000aac 	.word	0x20000aac

08000b90 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db08      	blt.n	8000bb2 <_fstat+0x22>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	dc05      	bgt.n	8000bb2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bac:	605a      	str	r2, [r3, #4]
    return 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e005      	b.n	8000bbe <_fstat+0x2e>
  }

  errno = EBADF;
 8000bb2:	f005 fcd7 	bl	8006564 <__errno>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2209      	movs	r2, #9
 8000bba:	601a      	str	r2, [r3, #0]
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x44>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x44>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x44>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x44>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f001 f890 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c30:	d14d      	bne.n	8000cce <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_ADC_MspInit+0xc8>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <HAL_ADC_MspInit+0xc8>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_ADC_MspInit+0xc8>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_ADC_MspInit+0xc8>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_ADC_MspInit+0xc8>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_ADC_MspInit+0xc8>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f001 fab0 	bl	80021dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <HAL_ADC_MspInit+0xd0>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000cac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000cb4:	f001 f877 	bl	8001da6 <HAL_DMA_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000cbe:	f7ff feb7 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_ADC_MspInit+0xcc>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	20000170 	.word	0x20000170
 8000ce0:	40020008 	.word	0x40020008

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_TIM_Base_MspInit+0x68>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10c      	bne.n	8000d10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d0e:	e018      	b.n	8000d42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d113      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	201c      	movs	r0, #28
 8000d38:	f000 ffff 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d3c:	201c      	movs	r0, #28
 8000d3e:	f001 f818 	bl	8001d72 <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d11c      	bne.n	8000db0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f001 fa16 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a41      	ldr	r2, [pc, #260]	; (8000ee0 <HAL_UART_MspInit+0x124>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d17c      	bne.n	8000ed8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <HAL_UART_MspInit+0x128>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a40      	ldr	r2, [pc, #256]	; (8000ee4 <HAL_UART_MspInit+0x128>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <HAL_UART_MspInit+0x128>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_UART_MspInit+0x128>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <HAL_UART_MspInit+0x128>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	6153      	str	r3, [r2, #20]
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_UART_MspInit+0x128>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1e:	2307      	movs	r3, #7
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f001 f9d6 	bl	80021dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e32:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <HAL_UART_MspInit+0x130>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e60:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e62:	f000 ffa0 	bl	8001da6 <HAL_DMA_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000e6c:	f7ff fde0 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e74:	671a      	str	r2, [r3, #112]	; 0x70
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_UART_MspInit+0x12c>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_UART_MspInit+0x138>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000e84:	2210      	movs	r2, #16
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000eac:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000eae:	f000 ff7a 	bl	8001da6 <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000eb8:	f7ff fdba 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000ec0:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_UART_MspInit+0x134>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2026      	movs	r0, #38	; 0x26
 8000ece:	f000 ff34 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed2:	2026      	movs	r0, #38	; 0x26
 8000ed4:	f000 ff4d 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	20000098 	.word	0x20000098
 8000eec:	4002006c 	.word	0x4002006c
 8000ef0:	2000012c 	.word	0x2000012c
 8000ef4:	40020080 	.word	0x40020080

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f8ec 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA1_Channel1_IRQHandler+0x10>)
 8000f52:	f001 f845 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000170 	.word	0x20000170

08000f60 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Channel6_IRQHandler+0x10>)
 8000f66:	f001 f83b 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000098 	.word	0x20000098

08000f74 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <DMA1_Channel7_IRQHandler+0x10>)
 8000f7a:	f001 f831 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000012c 	.word	0x2000012c

08000f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM2_IRQHandler+0x10>)
 8000f8e:	f003 f957 	bl	8004240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200009dc 	.word	0x200009dc

08000f9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <USART2_IRQHandler+0x10>)
 8000fa2:	f004 fc4f 	bl	8005844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000a28 	.word	0x20000a28

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f005 fac0 	bl	8006564 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20004000 	.word	0x20004000
 8001010:	00000400 	.word	0x00000400
 8001014:	2000008c 	.word	0x2000008c
 8001018:	20000ac8 	.word	0x20000ac8

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106a:	f7ff ffd7 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f005 fa7f 	bl	8006570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001072:	f7ff f8fd 	bl	8000270 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001078:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001084:	08007708 	.word	0x08007708
  ldr r2, =_sbss
 8001088:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800108c:	20000ac4 	.word	0x20000ac4

08001090 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_IRQHandler>
	...

08001094 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x28>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x28>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 fe3d 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd8a 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fe55 	bl	8001d8e <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fc:	f000 fe1d 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20000ab0 	.word	0x20000ab0

08001148 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;  
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000ab0 	.word	0x20000ab0

08001160 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09a      	sub	sp, #104	; 0x68
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e169      	b.n	8001480 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d176      	bne.n	80012ac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d152      	bne.n	800126c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fd15 	bl	8000c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d13b      	bne.n	800126c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fc5f 	bl	8001ab8 <ADC_Disable>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d12f      	bne.n	800126c <HAL_ADC_Init+0xe0>
 800120c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001210:	2b00      	cmp	r3, #0
 8001212:	d12b      	bne.n	800126c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	f043 0202 	orr.w	r2, r3, #2
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001236:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001246:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001248:	4b8f      	ldr	r3, [pc, #572]	; (8001488 <HAL_ADC_Init+0x2fc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a8f      	ldr	r2, [pc, #572]	; (800148c <HAL_ADC_Init+0x300>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9a      	lsrs	r2, r3, #18
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800125e:	e002      	b.n	8001266 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	3b01      	subs	r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f9      	bne.n	8001260 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001288:	d110      	bne.n	80012ac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0312 	bic.w	r3, r3, #18
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 80d6 	bne.w	8001466 <HAL_ADC_Init+0x2da>
 80012ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 80d1 	bne.w	8001466 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 80c9 	bne.w	8001466 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012dc:	f043 0202 	orr.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e4:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <HAL_ADC_Init+0x304>)
 80012e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d108      	bne.n	800130c <HAL_ADC_Init+0x180>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_ADC_Init+0x180>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_ADC_Init+0x182>
 800130c:	2300      	movs	r3, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11c      	bne.n	800134c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001312:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d107      	bne.n	8001334 <HAL_ADC_Init+0x1a8>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_Init+0x1a8>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_ADC_Init+0x1aa>
 8001334:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800133a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	431a      	orrs	r2, r3
 8001348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7e5b      	ldrb	r3, [r3, #25]
 8001350:	035b      	lsls	r3, r3, #13
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001356:	2a01      	cmp	r2, #1
 8001358:	d002      	beq.n	8001360 <HAL_ADC_Init+0x1d4>
 800135a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800135e:	e000      	b.n	8001362 <HAL_ADC_Init+0x1d6>
 8001360:	2200      	movs	r2, #0
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4313      	orrs	r3, r2
 8001370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001372:	4313      	orrs	r3, r2
 8001374:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d11b      	bne.n	80013b8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e5b      	ldrb	r3, [r3, #25]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	3b01      	subs	r3, #1
 800138e:	045a      	lsls	r2, r3, #17
 8001390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001392:	4313      	orrs	r3, r2
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	663b      	str	r3, [r7, #96]	; 0x60
 800139a:	e00d      	b.n	80013b8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d007      	beq.n	80013d0 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	4313      	orrs	r3, r2
 80013ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013cc:	4313      	orrs	r3, r2
 80013ce:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d114      	bne.n	8001408 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013ec:	f023 0302 	bic.w	r3, r3, #2
 80013f0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7e1b      	ldrb	r3, [r3, #24]
 80013f6:	039a      	lsls	r2, r3, #14
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4313      	orrs	r3, r2
 8001402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001404:	4313      	orrs	r3, r2
 8001406:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_ADC_Init+0x308>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001418:	430b      	orrs	r3, r1
 800141a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d10c      	bne.n	800143e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f023 010f 	bic.w	r1, r3, #15
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
 800143c:	e007      	b.n	800144e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 020f 	bic.w	r2, r2, #15
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f023 0303 	bic.w	r3, r3, #3
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
 8001464:	e00a      	b.n	800147c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f023 0312 	bic.w	r3, r3, #18
 800146e:	f043 0210 	orr.w	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001476:	2301      	movs	r3, #1
 8001478:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800147c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001480:	4618      	mov	r0, r3
 8001482:	3768      	adds	r7, #104	; 0x68
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83
 8001490:	50000300 	.word	0x50000300
 8001494:	fff0c007 	.word	0xfff0c007

08001498 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d158      	bne.n	8001564 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_Start+0x28>
 80014bc:	2302      	movs	r3, #2
 80014be:	e054      	b.n	800156a <HAL_ADC_Start+0xd2>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fa91 	bl	80019f0 <ADC_Enable>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d140      	bne.n	800155a <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001522:	d106      	bne.n	8001532 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f023 0206 	bic.w	r2, r3, #6
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
 8001530:	e002      	b.n	8001538 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	221c      	movs	r2, #28
 8001546:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0204 	orr.w	r2, r2, #4
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e006      	b.n	8001568 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001562:	e001      	b.n	8001568 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001564:	2302      	movs	r3, #2
 8001566:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d102      	bne.n	8001590 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800158a:	2308      	movs	r3, #8
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e02e      	b.n	80015ee <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_ADC_PollForConversion+0x178>)
 8001592:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2b00      	cmp	r3, #0
 800159e:	d112      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d11d      	bne.n	80015ea <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f043 0220 	orr.w	r2, r3, #32
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e08d      	b.n	80016e2 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f043 0220 	orr.w	r2, r3, #32
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07b      	b.n	80016e2 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015ea:	230c      	movs	r3, #12
 80015ec:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80015f6:	f7ff fda7 	bl	8001148 <HAL_GetTick>
 80015fa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015fc:	e021      	b.n	8001642 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001604:	d01d      	beq.n	8001642 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d007      	beq.n	800161c <HAL_ADC_PollForConversion+0xa8>
 800160c:	f7ff fd9c 	bl	8001148 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d212      	bcs.n	8001642 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04f      	b.n	80016e2 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0d6      	beq.n	80015fe <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001666:	2b00      	cmp	r3, #0
 8001668:	d131      	bne.n	80016ce <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001670:	2b00      	cmp	r3, #0
 8001672:	d12c      	bne.n	80016ce <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b08      	cmp	r3, #8
 8001680:	d125      	bne.n	80016ce <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d112      	bne.n	80016b6 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d112      	bne.n	80016ce <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
 80016b4:	e00b      	b.n	80016ce <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	50000300 	.word	0x50000300

080016f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d17e      	bne.n	800180c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ADC_Start_DMA+0x2c>
 8001718:	2302      	movs	r3, #2
 800171a:	e07a      	b.n	8001812 <HAL_ADC_Start_DMA+0x122>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f963 	bl	80019f0 <ADC_Enable>
 800172a:	4603      	mov	r3, r0
 800172c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d166      	bne.n	8001802 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800176a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177e:	d106      	bne.n	800178e <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f023 0206 	bic.w	r2, r3, #6
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	645a      	str	r2, [r3, #68]	; 0x44
 800178c:	e002      	b.n	8001794 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_ADC_Start_DMA+0x12c>)
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_ADC_Start_DMA+0x130>)
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_ADC_Start_DMA+0x134>)
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	221c      	movs	r2, #28
 80017ba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0210 	orr.w	r2, r2, #16
 80017ca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3340      	adds	r3, #64	; 0x40
 80017e6:	4619      	mov	r1, r3
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f000 fb22 	bl	8001e34 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0204 	orr.w	r2, r2, #4
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e006      	b.n	8001810 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800180a:	e001      	b.n	8001810 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	08001927 	.word	0x08001927
 8001820:	080019a1 	.word	0x080019a1
 8001824:	080019bd 	.word	0x080019bd

08001828 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADCEx_Calibration_Start+0x1c>
 800185a:	2302      	movs	r3, #2
 800185c:	e05f      	b.n	800191e <HAL_ADCEx_Calibration_Start+0xdc>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f926 	bl	8001ab8 <ADC_Disable>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d14e      	bne.n	8001914 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800188a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018a0:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018b0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018b2:	f7ff fc49 	bl	8001148 <HAL_GetTick>
 80018b6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018b8:	e01c      	b.n	80018f4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018ba:	f7ff fc45 	bl	8001148 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d915      	bls.n	80018f4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018d6:	d10d      	bne.n	80018f4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f023 0312 	bic.w	r3, r3, #18
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e014      	b.n	800191e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001902:	d0da      	beq.n	80018ba <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f023 0303 	bic.w	r3, r3, #3
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800193c:	2b00      	cmp	r3, #0
 800193e:	d126      	bne.n	800198e <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001956:	2b00      	cmp	r3, #0
 8001958:	d115      	bne.n	8001986 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800195e:	2b00      	cmp	r3, #0
 8001960:	d111      	bne.n	8001986 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff f82a 	bl	80009e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800198c:	e004      	b.n	8001998 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7ff fbd6 	bl	8001160 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f043 0204 	orr.w	r2, r3, #4
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff f806 	bl	80009f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <ADC_Enable+0x2c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <ADC_Enable+0x2c>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <ADC_Enable+0x2e>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d143      	bne.n	8001aaa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <ADC_Enable+0xc4>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00d      	beq.n	8001a4c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e02f      	b.n	8001aac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a5c:	f7ff fb74 	bl	8001148 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a62:	e01b      	b.n	8001a9c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a64:	f7ff fb70 	bl	8001148 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d914      	bls.n	8001a9c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d00d      	beq.n	8001a9c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e007      	b.n	8001aac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d1dc      	bne.n	8001a64 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	8000003f 	.word	0x8000003f

08001ab8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <ADC_Disable+0x2c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <ADC_Disable+0x2c>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <ADC_Disable+0x2e>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d047      	beq.n	8001b7a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030d 	and.w	r3, r3, #13
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d10f      	bne.n	8001b18 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0202 	orr.w	r2, r2, #2
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b10:	f7ff fb1a 	bl	8001148 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b16:	e029      	b.n	8001b6c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e023      	b.n	8001b7c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b34:	f7ff fb08 	bl	8001148 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d914      	bls.n	8001b6c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10d      	bne.n	8001b6c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f043 0210 	orr.w	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e007      	b.n	8001b7c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d0dc      	beq.n	8001b34 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e037      	b.n	8001e2c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f9c4 	bl	800219c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}  
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_DMA_Start_IT+0x20>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e04a      	b.n	8001eea <HAL_DMA_Start_IT+0xb6>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d13a      	bne.n	8001edc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f958 	bl	8002140 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 020e 	orr.w	r2, r2, #14
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e00f      	b.n	8001eca <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 020a 	orr.w	r2, r2, #10
 8001eb8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e005      	b.n	8001ee8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2204      	movs	r2, #4
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e020      	b.n	8001f58 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 020e 	bic.w	r2, r2, #14
 8001f24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d005      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e027      	b.n	8001fd6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020e 	bic.w	r2, r2, #14
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
    } 
  }
  return status;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d024      	beq.n	8002052 <HAL_DMA_IRQHandler+0x72>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01f      	beq.n	8002052 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	2104      	movs	r1, #4
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d06a      	beq.n	800211e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002050:	e065      	b.n	800211e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2202      	movs	r2, #2
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02c      	beq.n	80020bc <HAL_DMA_IRQHandler+0xdc>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d027      	beq.n	80020bc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10b      	bne.n	8002092 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 020a 	bic.w	r2, r2, #10
 8002088:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	2102      	movs	r1, #2
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d035      	beq.n	800211e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80020ba:	e030      	b.n	800211e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2208      	movs	r2, #8
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d028      	beq.n	800211e <HAL_DMA_IRQHandler+0x13e>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 020e 	bic.w	r2, r2, #14
 80020e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
    }
  }
}  
 800211c:	e7ff      	b.n	800211e <HAL_DMA_IRQHandler+0x13e>
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d108      	bne.n	8002180 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800217e:	e007      	b.n	8002190 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <DMA_CalcBaseAndBitshift+0x34>)
 80021ac:	4413      	add	r3, r2
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <DMA_CalcBaseAndBitshift+0x38>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	009a      	lsls	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <DMA_CalcBaseAndBitshift+0x3c>)
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	bffdfff8 	.word	0xbffdfff8
 80021d4:	cccccccd 	.word	0xcccccccd
 80021d8:	40020000 	.word	0x40020000

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e14e      	b.n	800248a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8140 	beq.w	8002484 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d005      	beq.n	800221c <HAL_GPIO_Init+0x40>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d130      	bne.n	800227e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002252:	2201      	movs	r2, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 0201 	and.w	r2, r3, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b03      	cmp	r3, #3
 8002288:	d017      	beq.n	80022ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d123      	bne.n	800230e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	6939      	ldr	r1, [r7, #16]
 800230a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0203 	and.w	r2, r3, #3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 809a 	beq.w	8002484 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002350:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002392:	d013      	beq.n	80023bc <HAL_GPIO_Init+0x1e0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x2d4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_GPIO_Init+0x1dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_GPIO_Init+0x2d8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_Init+0x1d4>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b0:	2305      	movs	r3, #5
 80023b2:	e004      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023bc:	2300      	movs	r3, #0
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	f002 0203 	and.w	r2, r2, #3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4093      	lsls	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ce:	4937      	ldr	r1, [pc, #220]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023dc:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800242a:	4a24      	ldr	r2, [pc, #144]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f aea9 	bne.w	80021ec <HAL_GPIO_Init+0x10>
  }
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	48000400 	.word	0x48000400
 80024b4:	48000800 	.word	0x48000800
 80024b8:	48000c00 	.word	0x48000c00
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f000 bef4 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 816a 	beq.w	80027ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800251a:	4bb3      	ldr	r3, [pc, #716]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00c      	beq.n	8002540 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002526:	4bb0      	ldr	r3, [pc, #704]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d159      	bne.n	80025e6 <HAL_RCC_OscConfig+0xf6>
 8002532:	4bad      	ldr	r3, [pc, #692]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d152      	bne.n	80025e6 <HAL_RCC_OscConfig+0xf6>
 8002540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002544:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002554:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0x82>
 800256c:	4b9e      	ldr	r3, [pc, #632]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0xae>
 8002572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002576:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800258e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025b2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 810c 	beq.w	80027ec <HAL_RCC_OscConfig+0x2fc>
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 8106 	bne.w	80027ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f000 be86 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x110>
 80025f2:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e030      	b.n	8002662 <HAL_RCC_OscConfig+0x172>
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x134>
 800260a:	4b77      	ldr	r3, [pc, #476]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a76      	ldr	r2, [pc, #472]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800261c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e01e      	b.n	8002662 <HAL_RCC_OscConfig+0x172>
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x15a>
 8002630:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6c      	ldr	r2, [pc, #432]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x172>
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a66      	ldr	r2, [pc, #408]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002662:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	f023 020f 	bic.w	r2, r3, #15
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	495d      	ldr	r1, [pc, #372]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d059      	beq.n	8002734 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fd62 	bl	8001148 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268a:	f7fe fd5d 	bl	8001148 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d902      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	f000 be29 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>
 80026a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d102      	bne.n	80026d2 <HAL_RCC_OscConfig+0x1e2>
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x20e>
 80026d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002702:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002706:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800270a:	fa92 f2a2 	rbit	r2, r2
 800270e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002712:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002716:	fab2 f282 	clz	r2, r2
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f042 0220 	orr.w	r2, r2, #32
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f002 021f 	and.w	r2, r2, #31
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ab      	beq.n	800268a <HAL_RCC_OscConfig+0x19a>
 8002732:	e05c      	b.n	80027ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fd08 	bl	8001148 <HAL_GetTick>
 8002738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273e:	f7fe fd03 	bl	8001148 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d902      	bls.n	8002754 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	f000 bdcf 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002758:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002768:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x296>
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x2c2>
 8002786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800279a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_RCC_OscConfig+0x2f8>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027be:	fa92 f2a2 	rbit	r2, r2
 80027c2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80027c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f042 0220 	orr.w	r2, r2, #32
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f002 021f 	and.w	r2, r2, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ab      	bne.n	800273e <HAL_RCC_OscConfig+0x24e>
 80027e6:	e002      	b.n	80027ee <HAL_RCC_OscConfig+0x2fe>
 80027e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 816f 	beq.w	8002adc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027fe:	4bd0      	ldr	r3, [pc, #832]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800280a:	4bcd      	ldr	r3, [pc, #820]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d16c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x400>
 8002816:	4bca      	ldr	r3, [pc, #808]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d166      	bne.n	80028f0 <HAL_RCC_OscConfig+0x400>
 8002822:	2302      	movs	r3, #2
 8002824:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002834:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d102      	bne.n	8002852 <HAL_RCC_OscConfig+0x362>
 800284c:	4bbc      	ldr	r3, [pc, #752]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	e013      	b.n	800287a <HAL_RCC_OscConfig+0x38a>
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800286a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002876:	4bb2      	ldr	r3, [pc, #712]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2202      	movs	r2, #2
 800287c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002880:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002884:	fa92 f2a2 	rbit	r2, r2
 8002888:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800288c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_RCC_OscConfig+0x3cc>
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f000 bd1b 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4ba0      	ldr	r3, [pc, #640]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	21f8      	movs	r1, #248	; 0xf8
 80028cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80028d4:	fa91 f1a1 	rbit	r1, r1
 80028d8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80028dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80028e0:	fab1 f181 	clz	r1, r1
 80028e4:	b2c9      	uxtb	r1, r1
 80028e6:	408b      	lsls	r3, r1
 80028e8:	4995      	ldr	r1, [pc, #596]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	e0f5      	b.n	8002adc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8085 	beq.w	8002a06 <HAL_RCC_OscConfig+0x516>
 80028fc:	2301      	movs	r3, #1
 80028fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800290e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800291c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	461a      	mov	r2, r3
 8002924:	2301      	movs	r3, #1
 8002926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe fc0e 	bl	8001148 <HAL_GetTick>
 800292c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fc09 	bl	8001148 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	f000 bcd5 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800295a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_RCC_OscConfig+0x488>
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	e013      	b.n	80029a0 <HAL_RCC_OscConfig+0x4b0>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002990:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2202      	movs	r2, #2
 80029a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029aa:	fa92 f2a2 	rbit	r2, r2
 80029ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80029b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f042 0220 	orr.w	r2, r2, #32
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f002 021f 	and.w	r2, r2, #31
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0af      	beq.n	8002932 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	21f8      	movs	r1, #248	; 0xf8
 80029e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029ea:	fa91 f1a1 	rbit	r1, r1
 80029ee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80029f2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80029f6:	fab1 f181 	clz	r1, r1
 80029fa:	b2c9      	uxtb	r1, r1
 80029fc:	408b      	lsls	r3, r1
 80029fe:	4950      	ldr	r1, [pc, #320]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e06a      	b.n	8002adc <HAL_RCC_OscConfig+0x5ec>
 8002a06:	2301      	movs	r3, #1
 8002a08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe fb89 	bl	8001148 <HAL_GetTick>
 8002a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fb84 	bl	8001148 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d902      	bls.n	8002a52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	f000 bc50 	b.w	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002a52:	2302      	movs	r3, #2
 8002a54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_OscConfig+0x592>
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	e013      	b.n	8002aaa <HAL_RCC_OscConfig+0x5ba>
 8002a82:	2302      	movs	r3, #2
 8002a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a94:	2302      	movs	r3, #2
 8002a96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_RCC_OscConfig+0x650>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ab0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002abc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f042 0220 	orr.w	r2, r2, #32
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f002 021f 	and.w	r2, r2, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1af      	bne.n	8002a3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80da 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d069      	beq.n	8002bca <HAL_RCC_OscConfig+0x6da>
 8002af6:	2301      	movs	r3, #1
 8002af8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x654>)
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b20:	f7fe fb12 	bl	8001148 <HAL_GetTick>
 8002b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b28:	e00e      	b.n	8002b48 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7fe fb0d 	bl	8001148 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d906      	bls.n	8002b48 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e3d9      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	10908120 	.word	0x10908120
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b5e:	2202      	movs	r2, #2
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4ba5      	ldr	r3, [pc, #660]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b92:	2102      	movs	r1, #2
 8002b94:	6019      	str	r1, [r3, #0]
 8002b96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f1a3 	rbit	r1, r3
 8002ba0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ba4:	6019      	str	r1, [r3, #0]
  return result;
 8002ba6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0b0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x63a>
 8002bc8:	e06a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7b0>
 8002bca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002be0:	601a      	str	r2, [r3, #0]
  return result;
 8002be2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002be6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <HAL_RCC_OscConfig+0x934>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7fe faa4 	bl	8001148 <HAL_GetTick>
 8002c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	e009      	b.n	8002c1a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c06:	f7fe fa9f 	bl	8001148 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e36b      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002c1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c1e:	2202      	movs	r2, #2
 8002c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c36:	2202      	movs	r2, #2
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f2a3 	rbit	r2, r3
 8002c44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	6019      	str	r1, [r3, #0]
 8002c6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f1a3 	rbit	r1, r3
 8002c78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c7c:	6019      	str	r1, [r3, #0]
  return result;
 8002c7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1b2      	bne.n	8002c06 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8158 	beq.w	8002f60 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]
 8002cce:	4b54      	ldr	r3, [pc, #336]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f107 0308 	add.w	r3, r7, #8
 8002ce0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <HAL_RCC_OscConfig+0x938>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11a      	bne.n	8002d2a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCC_OscConfig+0x938>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <HAL_RCC_OscConfig+0x938>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d00:	f7fe fa22 	bl	8001148 <HAL_GetTick>
 8002d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e009      	b.n	8002d1e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe fa1d 	bl	8001148 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e2e9      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <HAL_RCC_OscConfig+0x938>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ef      	beq.n	8002d0a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x852>
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e02f      	b.n	8002da2 <HAL_RCC_OscConfig+0x8b2>
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x876>
 8002d4c:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a33      	ldr	r2, [pc, #204]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	e01d      	b.n	8002da2 <HAL_RCC_OscConfig+0x8b2>
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x89a>
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x8b2>
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d06b      	beq.n	8002e84 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fe f9cc 	bl	8001148 <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe f9c7 	bl	8001148 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e291      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002dce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f2a3 	rbit	r2, r3
 8002de0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002dfc:	601a      	str	r2, [r3, #0]
  return result;
 8002dfe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d109      	bne.n	8002e2c <HAL_RCC_OscConfig+0x93c>
 8002e18:	4b01      	ldr	r3, [pc, #4]	; (8002e20 <HAL_RCC_OscConfig+0x930>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	e014      	b.n	8002e48 <HAL_RCC_OscConfig+0x958>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	10908120 	.word	0x10908120
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e30:	2202      	movs	r2, #2
 8002e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	fa93 f2a3 	rbit	r2, r3
 8002e3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4bbb      	ldr	r3, [pc, #748]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	6011      	str	r1, [r2, #0]
 8002e50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	fa92 f1a2 	rbit	r1, r2
 8002e5a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e5e:	6011      	str	r1, [r2, #0]
  return result;
 8002e60:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	fab2 f282 	clz	r2, r2
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f002 021f 	and.w	r2, r2, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d099      	beq.n	8002db6 <HAL_RCC_OscConfig+0x8c6>
 8002e82:	e063      	b.n	8002f4c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe f960 	bl	8001148 <HAL_GetTick>
 8002e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe f95b 	bl	8001148 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e225      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002ea6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eaa:	2202      	movs	r2, #2
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	fa93 f2a3 	rbit	r2, r3
 8002ed0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ed4:	601a      	str	r2, [r3, #0]
  return result;
 8002ed6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_OscConfig+0xa06>
 8002ef0:	4b90      	ldr	r3, [pc, #576]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	e00d      	b.n	8002f12 <HAL_RCC_OscConfig+0xa22>
 8002ef6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4b89      	ldr	r3, [pc, #548]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f16:	2102      	movs	r1, #2
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	fa92 f1a2 	rbit	r1, r2
 8002f24:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f28:	6011      	str	r1, [r2, #0]
  return result;
 8002f2a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	fab2 f282 	clz	r2, r2
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	f002 021f 	and.w	r2, r2, #31
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1a0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b77      	ldr	r3, [pc, #476]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4a76      	ldr	r2, [pc, #472]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 81c2 	beq.w	80032f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b71      	ldr	r3, [pc, #452]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	f000 819c 	beq.w	80032b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	f040 8114 	bne.w	80031ae <HAL_RCC_OscConfig+0xcbe>
 8002f86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f9e:	601a      	str	r2, [r3, #0]
  return result;
 8002fa0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fa4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f8c4 	bl	8001148 <HAL_GetTick>
 8002fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	e009      	b.n	8002fda <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe f8bf 	bl	8001148 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e18b      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 8002fda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fa93 f2a3 	rbit	r2, r3
 8002fee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ff2:	601a      	str	r2, [r3, #0]
  return result;
 8002ff4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ff8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_RCC_OscConfig+0xb24>
 800300e:	4b49      	ldr	r3, [pc, #292]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0xb5c>
 8003014:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003050:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003054:	6011      	str	r1, [r2, #0]
 8003056:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	fa92 f1a2 	rbit	r1, r2
 8003060:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003064:	6011      	str	r1, [r2, #0]
  return result;
 8003066:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	fab2 f282 	clz	r2, r2
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f002 021f 	and.w	r2, r2, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d19e      	bne.n	8002fc6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	430b      	orrs	r3, r1
 800309e:	4925      	ldr	r1, [pc, #148]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030bc:	601a      	str	r2, [r3, #0]
  return result;
 80030be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	461a      	mov	r2, r3
 80030d6:	2301      	movs	r3, #1
 80030d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe f835 	bl	8001148 <HAL_GetTick>
 80030de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e2:	e009      	b.n	80030f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe f830 	bl	8001148 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0fc      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 80030f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	fa93 f2a3 	rbit	r2, r3
 800310c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003110:	601a      	str	r2, [r3, #0]
  return result;
 8003112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003116:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0xc48>
 800312c:	4b01      	ldr	r3, [pc, #4]	; (8003134 <HAL_RCC_OscConfig+0xc44>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	e01e      	b.n	8003170 <HAL_RCC_OscConfig+0xc80>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800313c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_OscConfig+0xe0c>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003178:	6011      	str	r1, [r2, #0]
 800317a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	fa92 f1a2 	rbit	r1, r2
 8003184:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003188:	6011      	str	r1, [r2, #0]
  return result;
 800318a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f002 021f 	and.w	r2, r2, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d09b      	beq.n	80030e4 <HAL_RCC_OscConfig+0xbf4>
 80031ac:	e0a0      	b.n	80032f0 <HAL_RCC_OscConfig+0xe00>
 80031ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c6:	601a      	str	r2, [r3, #0]
  return result;
 80031c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	461a      	mov	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fd ffb0 	bl	8001148 <HAL_GetTick>
 80031e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	e009      	b.n	8003202 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fd ffab 	bl	8001148 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e077      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
 8003202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800320a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f2a3 	rbit	r2, r3
 8003216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321a:	601a      	str	r2, [r3, #0]
  return result;
 800321c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003220:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d102      	bne.n	800323c <HAL_RCC_OscConfig+0xd4c>
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0xe0c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e01b      	b.n	8003274 <HAL_RCC_OscConfig+0xd84>
 800323c:	f107 0320 	add.w	r3, r7, #32
 8003240:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f107 0318 	add.w	r3, r7, #24
 800325a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f107 0318 	add.w	r3, r7, #24
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_OscConfig+0xe0c>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f107 0210 	add.w	r2, r7, #16
 8003278:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800327c:	6011      	str	r1, [r2, #0]
 800327e:	f107 0210 	add.w	r2, r7, #16
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	fa92 f1a2 	rbit	r1, r2
 8003288:	f107 020c 	add.w	r2, r7, #12
 800328c:	6011      	str	r1, [r2, #0]
  return result;
 800328e:	f107 020c 	add.w	r2, r7, #12
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d19e      	bne.n	80031ee <HAL_RCC_OscConfig+0xcfe>
 80032b0:	e01e      	b.n	80032f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e018      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_RCC_OscConfig+0xe0c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000

08003300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b09e      	sub	sp, #120	; 0x78
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e162      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b90      	ldr	r3, [pc, #576]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	498b      	ldr	r1, [pc, #556]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b89      	ldr	r3, [pc, #548]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e14a      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b82      	ldr	r3, [pc, #520]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	497f      	ldr	r1, [pc, #508]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80dc 	beq.w	800352c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d13c      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xf6>
 800337c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xa6>
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	e00f      	b.n	80033c6 <HAL_RCC_ClockConfig+0xc6>
 80033a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	667b      	str	r3, [r7, #100]	; 0x64
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60
 80033ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80033cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033d6:	fab2 f282 	clz	r2, r2
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f042 0220 	orr.w	r2, r2, #32
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f002 021f 	and.w	r2, r2, #31
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d17b      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0f3      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d13c      	bne.n	8003478 <HAL_RCC_ClockConfig+0x178>
 80033fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <HAL_RCC_ClockConfig+0x128>
 8003422:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	e00f      	b.n	8003448 <HAL_RCC_ClockConfig+0x148>
 8003428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344c:	63ba      	str	r2, [r7, #56]	; 0x38
 800344e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f042 0220 	orr.w	r2, r2, #32
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f002 021f 	and.w	r2, r2, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d13a      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0b2      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
 8003478:	2302      	movs	r3, #2
 800347a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x1a0>
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e00d      	b.n	80034bc <HAL_RCC_ClockConfig+0x1bc>
 80034a0:	2302      	movs	r3, #2
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	2302      	movs	r3, #2
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2202      	movs	r2, #2
 80034be:	61ba      	str	r2, [r7, #24]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	617a      	str	r2, [r7, #20]
  return result;
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f002 021f 	and.w	r2, r2, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e079      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	491a      	ldr	r1, [pc, #104]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fd fe24 	bl	8001148 <HAL_GetTick>
 8003500:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fd fe20 	bl	8001148 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e061      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d214      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4906      	ldr	r1, [pc, #24]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e040      	b.n	80035de <HAL_RCC_ClockConfig+0x2de>
 800355c:	40022000 	.word	0x40022000
 8003560:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	491a      	ldr	r1, [pc, #104]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4912      	ldr	r1, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035a2:	f000 f829 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4601      	mov	r1, r0
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_RCC_ClockConfig+0x2e8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b0:	22f0      	movs	r2, #240	; 0xf0
 80035b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	60fa      	str	r2, [r7, #12]
  return result;
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	40d3      	lsrs	r3, r2
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x2ec>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	fa21 f303 	lsr.w	r3, r1, r3
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_RCC_ClockConfig+0x2f0>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_RCC_ClockConfig+0x2f4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fd72 	bl	80010c0 <HAL_InitTick>
  
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3778      	adds	r7, #120	; 0x78
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08007630 	.word	0x08007630
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b08b      	sub	sp, #44	; 0x2c
 80035fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x30>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x36>
 8003626:	e03c      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	e03c      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003634:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003638:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	fa92 f2a2 	rbit	r2, r2
 8003640:	607a      	str	r2, [r7, #4]
  return result;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	fab2 f282 	clz	r2, r2
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	40d3      	lsrs	r3, r2
 800364c:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	220f      	movs	r2, #15
 800365c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	fa92 f2a2 	rbit	r2, r2
 8003664:	60fa      	str	r2, [r7, #12]
  return result;
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	40d3      	lsrs	r3, r2
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003672:	5cd3      	ldrb	r3, [r2, r3]
 8003674:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003680:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e004      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	623b      	str	r3, [r7, #32]
      break;
 80036a0:	e002      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80036a4:	623b      	str	r3, [r7, #32]
      break;
 80036a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	372c      	adds	r7, #44	; 0x2c
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	007a1200 	.word	0x007a1200
 80036c0:	08007648 	.word	0x08007648
 80036c4:	08007658 	.word	0x08007658
 80036c8:	003d0900 	.word	0x003d0900

080036cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036ea:	f7ff ffef 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 80036ee:	4601      	mov	r1, r0
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	fa92 f2a2 	rbit	r2, r2
 8003704:	603a      	str	r2, [r7, #0]
  return result;
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	fab2 f282 	clz	r2, r2
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	40d3      	lsrs	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	08007640 	.word	0x08007640

08003728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800372e:	f7ff ffcd 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8003732:	4601      	mov	r1, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800373c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003740:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	603a      	str	r2, [r7, #0]
  return result;
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	40d3      	lsrs	r3, r2
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	08007640 	.word	0x08007640

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b092      	sub	sp, #72	; 0x48
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80d4 	beq.w	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003790:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10e      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a4a      	ldr	r2, [pc, #296]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	61d3      	str	r3, [r2, #28]
 80037a8:	4b48      	ldr	r3, [pc, #288]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d118      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c6:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7fd fcb9 	bl	8001148 <HAL_GetTick>
 80037d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	e008      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7fd fcb5 	bl	8001148 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b64      	cmp	r3, #100	; 0x64
 80037e6:	d901      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e14b      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8084 	beq.w	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003814:	429a      	cmp	r2, r3
 8003816:	d07c      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003826:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	461a      	mov	r2, r3
 8003842:	2301      	movs	r3, #1
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	461a      	mov	r2, r3
 8003866:	2300      	movs	r3, #0
 8003868:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800386a:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d04b      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fc65 	bl	8001148 <HAL_GetTick>
 800387e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fd fc61 	bl	8001148 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e0f5      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003898:	2302      	movs	r3, #2
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	61fb      	str	r3, [r7, #28]
  return result;
 80038b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d108      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038c6:	4b01      	ldr	r3, [pc, #4]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	e00d      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	10908100 	.word	0x10908100
 80038d8:	2302      	movs	r3, #2
 80038da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	4b69      	ldr	r3, [pc, #420]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2202      	movs	r2, #2
 80038ea:	613a      	str	r2, [r7, #16]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	fa92 f2a2 	rbit	r2, r2
 80038f2:	60fa      	str	r2, [r7, #12]
  return result;
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0b7      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003912:	4b5e      	ldr	r3, [pc, #376]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	495b      	ldr	r1, [pc, #364]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003920:	4313      	orrs	r3, r2
 8003922:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003924:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003928:	2b01      	cmp	r3, #1
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392c:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4a56      	ldr	r2, [pc, #344]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003936:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003944:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	494e      	ldr	r1, [pc, #312]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003952:	4313      	orrs	r3, r2
 8003954:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003962:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f023 0210 	bic.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	4947      	ldr	r1, [pc, #284]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003970:	4313      	orrs	r3, r2
 8003972:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	493f      	ldr	r1, [pc, #252]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800399e:	4b3b      	ldr	r3, [pc, #236]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f023 0220 	bic.w	r2, r3, #32
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4938      	ldr	r1, [pc, #224]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039bc:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	4930      	ldr	r1, [pc, #192]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4929      	ldr	r1, [pc, #164]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	4921      	ldr	r1, [pc, #132]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	491a      	ldr	r1, [pc, #104]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	4912      	ldr	r1, [pc, #72]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	490b      	ldr	r1, [pc, #44]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3748      	adds	r7, #72	; 0x48
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e049      	b.n	8003b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f914 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 ffa2 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e049      	b.n	8003be4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f841 	bl	8003bec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 ff4b 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_OC_Start_IT+0x28>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e03c      	b.n	8003ca2 <HAL_TIM_OC_Start_IT+0xa2>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d109      	bne.n	8003c42 <HAL_TIM_OC_Start_IT+0x42>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e02f      	b.n	8003ca2 <HAL_TIM_OC_Start_IT+0xa2>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d109      	bne.n	8003c5c <HAL_TIM_OC_Start_IT+0x5c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e022      	b.n	8003ca2 <HAL_TIM_OC_Start_IT+0xa2>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d109      	bne.n	8003c76 <HAL_TIM_OC_Start_IT+0x76>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e015      	b.n	8003ca2 <HAL_TIM_OC_Start_IT+0xa2>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_OC_Start_IT+0x90>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e008      	b.n	8003ca2 <HAL_TIM_OC_Start_IT+0xa2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0ce      	b.n	8003e48 <HAL_TIM_OC_Start_IT+0x248>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_OC_Start_IT+0xba>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb8:	e023      	b.n	8003d02 <HAL_TIM_OC_Start_IT+0x102>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_OC_Start_IT+0xca>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc8:	e01b      	b.n	8003d02 <HAL_TIM_OC_Start_IT+0x102>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_OC_Start_IT+0xda>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	e013      	b.n	8003d02 <HAL_TIM_OC_Start_IT+0x102>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_OC_Start_IT+0xea>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIM_OC_Start_IT+0x102>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_OC_Start_IT+0xfa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf8:	e003      	b.n	8003d02 <HAL_TIM_OC_Start_IT+0x102>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d841      	bhi.n	8003d8c <HAL_TIM_OC_Start_IT+0x18c>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_TIM_OC_Start_IT+0x110>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08003d8d 	.word	0x08003d8d
 8003d18:	08003d8d 	.word	0x08003d8d
 8003d1c:	08003d8d 	.word	0x08003d8d
 8003d20:	08003d57 	.word	0x08003d57
 8003d24:	08003d8d 	.word	0x08003d8d
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003d8d 	.word	0x08003d8d
 8003d30:	08003d69 	.word	0x08003d69
 8003d34:	08003d8d 	.word	0x08003d8d
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003d8d 	.word	0x08003d8d
 8003d40:	08003d7b 	.word	0x08003d7b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0202 	orr.w	r2, r2, #2
 8003d52:	60da      	str	r2, [r3, #12]
      break;
 8003d54:	e01d      	b.n	8003d92 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0204 	orr.w	r2, r2, #4
 8003d64:	60da      	str	r2, [r3, #12]
      break;
 8003d66:	e014      	b.n	8003d92 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0208 	orr.w	r2, r2, #8
 8003d76:	60da      	str	r2, [r3, #12]
      break;
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0210 	orr.w	r2, r2, #16
 8003d88:	60da      	str	r2, [r3, #12]
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d156      	bne.n	8003e46 <HAL_TIM_OC_Start_IT+0x246>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	6839      	ldr	r1, [r7, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fa7a 	bl	800529a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <HAL_TIM_OC_Start_IT+0x250>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIM_OC_Start_IT+0x1ce>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_TIM_OC_Start_IT+0x254>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_TIM_OC_Start_IT+0x1ce>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <HAL_TIM_OC_Start_IT+0x258>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIM_OC_Start_IT+0x1ce>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <HAL_TIM_OC_Start_IT+0x25c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_OC_Start_IT+0x1d2>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_TIM_OC_Start_IT+0x1d4>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_TIM_OC_Start_IT+0x250>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_TIM_OC_Start_IT+0x206>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIM_OC_Start_IT+0x206>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <HAL_TIM_OC_Start_IT+0x254>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d115      	bne.n	8003e32 <HAL_TIM_OC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_TIM_OC_Start_IT+0x260>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d015      	beq.n	8003e44 <HAL_TIM_OC_Start_IT+0x244>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d011      	beq.n	8003e44 <HAL_TIM_OC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	e008      	b.n	8003e44 <HAL_TIM_OC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e000      	b.n	8003e46 <HAL_TIM_OC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800
 8003e60:	00010007 	.word	0x00010007

08003e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e049      	b.n	8003f0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f841 	bl	8003f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fdb8 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_TIM_PWM_Start_IT+0x28>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e03c      	b.n	8003fca <HAL_TIM_PWM_Start_IT+0xa2>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d109      	bne.n	8003f6a <HAL_TIM_PWM_Start_IT+0x42>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e02f      	b.n	8003fca <HAL_TIM_PWM_Start_IT+0xa2>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d109      	bne.n	8003f84 <HAL_TIM_PWM_Start_IT+0x5c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e022      	b.n	8003fca <HAL_TIM_PWM_Start_IT+0xa2>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d109      	bne.n	8003f9e <HAL_TIM_PWM_Start_IT+0x76>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e015      	b.n	8003fca <HAL_TIM_PWM_Start_IT+0xa2>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d109      	bne.n	8003fb8 <HAL_TIM_PWM_Start_IT+0x90>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e008      	b.n	8003fca <HAL_TIM_PWM_Start_IT+0xa2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0ce      	b.n	8004170 <HAL_TIM_PWM_Start_IT+0x248>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start_IT+0xba>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe0:	e023      	b.n	800402a <HAL_TIM_PWM_Start_IT+0x102>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start_IT+0xca>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	e01b      	b.n	800402a <HAL_TIM_PWM_Start_IT+0x102>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_PWM_Start_IT+0xda>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004000:	e013      	b.n	800402a <HAL_TIM_PWM_Start_IT+0x102>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Start_IT+0xea>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004010:	e00b      	b.n	800402a <HAL_TIM_PWM_Start_IT+0x102>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d104      	bne.n	8004022 <HAL_TIM_PWM_Start_IT+0xfa>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	e003      	b.n	800402a <HAL_TIM_PWM_Start_IT+0x102>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d841      	bhi.n	80040b4 <HAL_TIM_PWM_Start_IT+0x18c>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_TIM_PWM_Start_IT+0x110>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800406d 	.word	0x0800406d
 800403c:	080040b5 	.word	0x080040b5
 8004040:	080040b5 	.word	0x080040b5
 8004044:	080040b5 	.word	0x080040b5
 8004048:	0800407f 	.word	0x0800407f
 800404c:	080040b5 	.word	0x080040b5
 8004050:	080040b5 	.word	0x080040b5
 8004054:	080040b5 	.word	0x080040b5
 8004058:	08004091 	.word	0x08004091
 800405c:	080040b5 	.word	0x080040b5
 8004060:	080040b5 	.word	0x080040b5
 8004064:	080040b5 	.word	0x080040b5
 8004068:	080040a3 	.word	0x080040a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0202 	orr.w	r2, r2, #2
 800407a:	60da      	str	r2, [r3, #12]
      break;
 800407c:	e01d      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0204 	orr.w	r2, r2, #4
 800408c:	60da      	str	r2, [r3, #12]
      break;
 800408e:	e014      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0208 	orr.w	r2, r2, #8
 800409e:	60da      	str	r2, [r3, #12]
      break;
 80040a0:	e00b      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0210 	orr.w	r2, r2, #16
 80040b0:	60da      	str	r2, [r3, #12]
      break;
 80040b2:	e002      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      break;
 80040b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d156      	bne.n	800416e <HAL_TIM_PWM_Start_IT+0x246>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 f8e6 	bl	800529a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_TIM_PWM_Start_IT+0x250>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_TIM_PWM_Start_IT+0x1ce>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <HAL_TIM_PWM_Start_IT+0x254>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_TIM_PWM_Start_IT+0x1ce>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_TIM_PWM_Start_IT+0x258>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_TIM_PWM_Start_IT+0x1ce>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a24      	ldr	r2, [pc, #144]	; (8004184 <HAL_TIM_PWM_Start_IT+0x25c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_Start_IT+0x1d2>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_TIM_PWM_Start_IT+0x1d4>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800410e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_TIM_PWM_Start_IT+0x250>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_TIM_PWM_Start_IT+0x206>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d004      	beq.n	800412e <HAL_TIM_PWM_Start_IT+0x206>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a14      	ldr	r2, [pc, #80]	; (800417c <HAL_TIM_PWM_Start_IT+0x254>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d115      	bne.n	800415a <HAL_TIM_PWM_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_TIM_PWM_Start_IT+0x260>)
 8004136:	4013      	ands	r3, r2
 8004138:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b06      	cmp	r3, #6
 800413e:	d015      	beq.n	800416c <HAL_TIM_PWM_Start_IT+0x244>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d011      	beq.n	800416c <HAL_TIM_PWM_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004158:	e008      	b.n	800416c <HAL_TIM_PWM_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e000      	b.n	800416e <HAL_TIM_PWM_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	00010007 	.word	0x00010007

0800418c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e041      	b.n	8004224 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f839 	bl	800422c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f000 fc23 	bl	8004a18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0208 	bic.w	r2, r2, #8
 80041e0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d122      	bne.n	800429c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b02      	cmp	r3, #2
 8004262:	d11b      	bne.n	800429c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0202 	mvn.w	r2, #2
 800426c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fba9 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004288:	e005      	b.n	8004296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb9b 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fbac 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d122      	bne.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d11b      	bne.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0204 	mvn.w	r2, #4
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb7f 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb71 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb82 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b08      	cmp	r3, #8
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0208 	mvn.w	r2, #8
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2204      	movs	r2, #4
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fb55 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fb47 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb58 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b10      	cmp	r3, #16
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b10      	cmp	r3, #16
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2208      	movs	r2, #8
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fb2b 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fb1d 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb2e 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10e      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0201 	mvn.w	r2, #1
 80043bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 faf7 	bl	80049b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d10e      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b80      	cmp	r3, #128	; 0x80
 80043de:	d107      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 f862 	bl	80054b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fe:	d10e      	bne.n	800441e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d107      	bne.n	800441e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f855 	bl	80054c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d10e      	bne.n	800444a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d107      	bne.n	800444a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fadc 	bl	8004a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b20      	cmp	r3, #32
 8004456:	d10e      	bne.n	8004476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b20      	cmp	r3, #32
 8004464:	d107      	bne.n	8004476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0220 	mvn.w	r2, #32
 800446e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f001 f815 	bl	80054a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_TIM_OC_ConfigChannel+0x1e>
 800449a:	2302      	movs	r3, #2
 800449c:	e066      	b.n	800456c <HAL_TIM_OC_ConfigChannel+0xec>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b14      	cmp	r3, #20
 80044aa:	d857      	bhi.n	800455c <HAL_TIM_OC_ConfigChannel+0xdc>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	08004509 	.word	0x08004509
 80044b8:	0800455d 	.word	0x0800455d
 80044bc:	0800455d 	.word	0x0800455d
 80044c0:	0800455d 	.word	0x0800455d
 80044c4:	08004517 	.word	0x08004517
 80044c8:	0800455d 	.word	0x0800455d
 80044cc:	0800455d 	.word	0x0800455d
 80044d0:	0800455d 	.word	0x0800455d
 80044d4:	08004525 	.word	0x08004525
 80044d8:	0800455d 	.word	0x0800455d
 80044dc:	0800455d 	.word	0x0800455d
 80044e0:	0800455d 	.word	0x0800455d
 80044e4:	08004533 	.word	0x08004533
 80044e8:	0800455d 	.word	0x0800455d
 80044ec:	0800455d 	.word	0x0800455d
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	08004541 	.word	0x08004541
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	0800455d 	.word	0x0800455d
 8004500:	0800455d 	.word	0x0800455d
 8004504:	0800454f 	.word	0x0800454f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 faf0 	bl	8004af4 <TIM_OC1_SetConfig>
      break;
 8004514:	e025      	b.n	8004562 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fb6f 	bl	8004c00 <TIM_OC2_SetConfig>
      break;
 8004522:	e01e      	b.n	8004562 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fbe8 	bl	8004d00 <TIM_OC3_SetConfig>
      break;
 8004530:	e017      	b.n	8004562 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fc5f 	bl	8004dfc <TIM_OC4_SetConfig>
      break;
 800453e:	e010      	b.n	8004562 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fcbc 	bl	8004ec4 <TIM_OC5_SetConfig>
      break;
 800454c:	e009      	b.n	8004562 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fd13 	bl	8004f80 <TIM_OC6_SetConfig>
      break;
 800455a:	e002      	b.n	8004562 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458e:	2302      	movs	r3, #2
 8004590:	e0ff      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b14      	cmp	r3, #20
 800459e:	f200 80f0 	bhi.w	8004782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004783 	.word	0x08004783
 80045b0:	08004783 	.word	0x08004783
 80045b4:	08004783 	.word	0x08004783
 80045b8:	0800463d 	.word	0x0800463d
 80045bc:	08004783 	.word	0x08004783
 80045c0:	08004783 	.word	0x08004783
 80045c4:	08004783 	.word	0x08004783
 80045c8:	0800467f 	.word	0x0800467f
 80045cc:	08004783 	.word	0x08004783
 80045d0:	08004783 	.word	0x08004783
 80045d4:	08004783 	.word	0x08004783
 80045d8:	080046bf 	.word	0x080046bf
 80045dc:	08004783 	.word	0x08004783
 80045e0:	08004783 	.word	0x08004783
 80045e4:	08004783 	.word	0x08004783
 80045e8:	08004701 	.word	0x08004701
 80045ec:	08004783 	.word	0x08004783
 80045f0:	08004783 	.word	0x08004783
 80045f4:	08004783 	.word	0x08004783
 80045f8:	08004741 	.word	0x08004741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa76 	bl	8004af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0208 	orr.w	r2, r2, #8
 8004616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	619a      	str	r2, [r3, #24]
      break;
 800463a:	e0a5      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fadc 	bl	8004c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	619a      	str	r2, [r3, #24]
      break;
 800467c:	e084      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fb3b 	bl	8004d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0208 	orr.w	r2, r2, #8
 8004698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0204 	bic.w	r2, r2, #4
 80046a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	61da      	str	r2, [r3, #28]
      break;
 80046bc:	e064      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fb99 	bl	8004dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69d9      	ldr	r1, [r3, #28]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	021a      	lsls	r2, r3, #8
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	61da      	str	r2, [r3, #28]
      break;
 80046fe:	e043      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fbdc 	bl	8004ec4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0208 	orr.w	r2, r2, #8
 800471a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800473e:	e023      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fc1a 	bl	8004f80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004780:	e002      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
      break;
 8004786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop

0800479c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_ConfigClockSource+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0b6      	b.n	8004926 <HAL_TIM_ConfigClockSource+0x18a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f4:	d03e      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0xd8>
 80047f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fa:	f200 8087 	bhi.w	800490c <HAL_TIM_ConfigClockSource+0x170>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	f000 8086 	beq.w	8004912 <HAL_TIM_ConfigClockSource+0x176>
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480a:	d87f      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 800480c:	2b70      	cmp	r3, #112	; 0x70
 800480e:	d01a      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0xaa>
 8004810:	2b70      	cmp	r3, #112	; 0x70
 8004812:	d87b      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 8004814:	2b60      	cmp	r3, #96	; 0x60
 8004816:	d050      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x11e>
 8004818:	2b60      	cmp	r3, #96	; 0x60
 800481a:	d877      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 800481c:	2b50      	cmp	r3, #80	; 0x50
 800481e:	d03c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0xfe>
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d873      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d058      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x13e>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d86f      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d064      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x15e>
 8004830:	2b30      	cmp	r3, #48	; 0x30
 8004832:	d86b      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 8004834:	2b20      	cmp	r3, #32
 8004836:	d060      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x15e>
 8004838:	2b20      	cmp	r3, #32
 800483a:	d867      	bhi.n	800490c <HAL_TIM_ConfigClockSource+0x170>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05c      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x15e>
 8004840:	2b10      	cmp	r3, #16
 8004842:	d05a      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x15e>
 8004844:	e062      	b.n	800490c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6899      	ldr	r1, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f000 fd00 	bl	800525a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	609a      	str	r2, [r3, #8]
      break;
 8004872:	e04f      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6899      	ldr	r1, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f000 fce9 	bl	800525a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004896:	609a      	str	r2, [r3, #8]
      break;
 8004898:	e03c      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f000 fc5d 	bl	8005166 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2150      	movs	r1, #80	; 0x50
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fcb6 	bl	8005224 <TIM_ITRx_SetConfig>
      break;
 80048b8:	e02c      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 fc7c 	bl	80051c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2160      	movs	r1, #96	; 0x60
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fca6 	bl	8005224 <TIM_ITRx_SetConfig>
      break;
 80048d8:	e01c      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 fc3d 	bl	8005166 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fc96 	bl	8005224 <TIM_ITRx_SetConfig>
      break;
 80048f8:	e00c      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f000 fc8d 	bl	8005224 <TIM_ITRx_SetConfig>
      break;
 800490a:	e003      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e000      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004924:	7bfb      	ldrb	r3, [r7, #15]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004942:	2302      	movs	r3, #2
 8004944:	e031      	b.n	80049aa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fb71 	bl	8005040 <TIM_SlaveTimer_SetConfig>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e018      	b.n	80049aa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004986:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004996:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ae4 <TIM_Base_SetConfig+0xcc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_Base_SetConfig+0x20>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d108      	bne.n	8004a4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <TIM_Base_SetConfig+0xcc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0x5a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x5a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <TIM_Base_SetConfig+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x5a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a21      	ldr	r2, [pc, #132]	; (8004aec <TIM_Base_SetConfig+0xd4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x5a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <TIM_Base_SetConfig+0xd8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <TIM_Base_SetConfig+0xcc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00b      	beq.n	8004ac8 <TIM_Base_SetConfig+0xb0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <TIM_Base_SetConfig+0xd0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_Base_SetConfig+0xb0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <TIM_Base_SetConfig+0xd4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_Base_SetConfig+0xb0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0b      	ldr	r2, [pc, #44]	; (8004af0 <TIM_Base_SetConfig+0xd8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400
 8004af0:	40014800 	.word	0x40014800

08004af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0201 	bic.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 0302 	bic.w	r3, r3, #2
 8004b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a28      	ldr	r2, [pc, #160]	; (8004bf0 <TIM_OC1_SetConfig+0xfc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_OC1_SetConfig+0x78>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <TIM_OC1_SetConfig+0x100>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_OC1_SetConfig+0x78>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <TIM_OC1_SetConfig+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_OC1_SetConfig+0x78>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <TIM_OC1_SetConfig+0x108>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10c      	bne.n	8004b86 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0308 	bic.w	r3, r3, #8
 8004b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <TIM_OC1_SetConfig+0xfc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_OC1_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <TIM_OC1_SetConfig+0x100>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_OC1_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <TIM_OC1_SetConfig+0x104>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_OC1_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <TIM_OC1_SetConfig+0x108>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d111      	bne.n	8004bca <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	621a      	str	r2, [r3, #32]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0210 	bic.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0320 	bic.w	r3, r3, #32
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <TIM_OC2_SetConfig+0xf0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10d      	bne.n	8004c80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <TIM_OC2_SetConfig+0xf0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xa0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <TIM_OC2_SetConfig+0xf4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xa0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <TIM_OC2_SetConfig+0xf8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xa0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <TIM_OC2_SetConfig+0xfc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d113      	bne.n	8004cc8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800

08004d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a23      	ldr	r2, [pc, #140]	; (8004dec <TIM_OC3_SetConfig+0xec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10d      	bne.n	8004d7e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <TIM_OC3_SetConfig+0xec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_OC3_SetConfig+0x9e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <TIM_OC3_SetConfig+0xf0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <TIM_OC3_SetConfig+0x9e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <TIM_OC3_SetConfig+0xf4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_OC3_SetConfig+0x9e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <TIM_OC3_SetConfig+0xf8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d113      	bne.n	8004dc6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	031b      	lsls	r3, r3, #12
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <TIM_OC4_SetConfig+0xb8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <TIM_OC4_SetConfig+0x7c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <TIM_OC4_SetConfig+0xbc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_OC4_SetConfig+0x7c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <TIM_OC4_SetConfig+0xc0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_OC4_SetConfig+0x7c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <TIM_OC4_SetConfig+0xc4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d109      	bne.n	8004e8c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	019b      	lsls	r3, r3, #6
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <TIM_OC5_SetConfig+0xac>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_OC5_SetConfig+0x72>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <TIM_OC5_SetConfig+0xb0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <TIM_OC5_SetConfig+0x72>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <TIM_OC5_SetConfig+0xb4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_OC5_SetConfig+0x72>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <TIM_OC5_SetConfig+0xb8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d109      	bne.n	8004f4a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	051b      	lsls	r3, r3, #20
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <TIM_OC6_SetConfig+0xb0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC6_SetConfig+0x74>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <TIM_OC6_SetConfig+0xb4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC6_SetConfig+0x74>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	; (8005038 <TIM_OC6_SetConfig+0xb8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC6_SetConfig+0x74>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a13      	ldr	r2, [pc, #76]	; (800503c <TIM_OC6_SetConfig+0xbc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d109      	bne.n	8005008 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b70      	cmp	r3, #112	; 0x70
 800508c:	d01a      	beq.n	80050c4 <TIM_SlaveTimer_SetConfig+0x84>
 800508e:	2b70      	cmp	r3, #112	; 0x70
 8005090:	d860      	bhi.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
 8005092:	2b60      	cmp	r3, #96	; 0x60
 8005094:	d054      	beq.n	8005140 <TIM_SlaveTimer_SetConfig+0x100>
 8005096:	2b60      	cmp	r3, #96	; 0x60
 8005098:	d85c      	bhi.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
 800509a:	2b50      	cmp	r3, #80	; 0x50
 800509c:	d046      	beq.n	800512c <TIM_SlaveTimer_SetConfig+0xec>
 800509e:	2b50      	cmp	r3, #80	; 0x50
 80050a0:	d858      	bhi.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d019      	beq.n	80050da <TIM_SlaveTimer_SetConfig+0x9a>
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d854      	bhi.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
 80050aa:	2b30      	cmp	r3, #48	; 0x30
 80050ac:	d055      	beq.n	800515a <TIM_SlaveTimer_SetConfig+0x11a>
 80050ae:	2b30      	cmp	r3, #48	; 0x30
 80050b0:	d850      	bhi.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d051      	beq.n	800515a <TIM_SlaveTimer_SetConfig+0x11a>
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d84c      	bhi.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d04d      	beq.n	800515a <TIM_SlaveTimer_SetConfig+0x11a>
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d04b      	beq.n	800515a <TIM_SlaveTimer_SetConfig+0x11a>
 80050c2:	e047      	b.n	8005154 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68d9      	ldr	r1, [r3, #12]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f000 f8c1 	bl	800525a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80050d8:	e040      	b.n	800515c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d101      	bne.n	80050e6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e03b      	b.n	800515e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0201 	bic.w	r2, r2, #1
 80050fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800510c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
      break;
 800512a:	e017      	b.n	800515c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6899      	ldr	r1, [r3, #8]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	461a      	mov	r2, r3
 800513a:	f000 f814 	bl	8005166 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800513e:	e00d      	b.n	800515c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	461a      	mov	r2, r3
 800514e:	f000 f839 	bl	80051c4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005152:	e003      	b.n	800515c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
      break;
 8005158:	e000      	b.n	800515c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800515a:	bf00      	nop
  }

  return status;
 800515c:	7dfb      	ldrb	r3, [r7, #23]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f023 0201 	bic.w	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 030a 	bic.w	r3, r3, #10
 80051a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f023 0210 	bic.w	r2, r3, #16
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	031b      	lsls	r3, r3, #12
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005200:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	f043 0307 	orr.w	r3, r3, #7
 8005246:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	609a      	str	r2, [r3, #8]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800525a:	b480      	push	{r7}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005274:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	021a      	lsls	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	431a      	orrs	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	609a      	str	r2, [r3, #8]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2201      	movs	r2, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	401a      	ands	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	fa01 f303 	lsl.w	r3, r1, r3
 80052d2:	431a      	orrs	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e04f      	b.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005364:	d004      	beq.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10c      	bne.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005376:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	4313      	orrs	r3, r2
 8005380:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40014000 	.word	0x40014000

080053b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e060      	b.n	800548e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a14      	ldr	r2, [pc, #80]	; (800549c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d115      	bne.n	800547c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	051b      	lsls	r3, r3, #20
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00

080054a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e040      	b.n	8005570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fb fc5c 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fc90 	bl	8005e40 <UART_SetConfig>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e022      	b.n	8005570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fdba 	bl	80060ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fe41 	bl	80061f0 <UART_CheckIdleState>
 800556e:	4603      	mov	r3, r0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558c:	2b20      	cmp	r3, #32
 800558e:	f040 8082 	bne.w	8005696 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_UART_Transmit+0x26>
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e07a      	b.n	8005698 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_UART_Transmit+0x38>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e073      	b.n	8005698 <HAL_UART_Transmit+0x120>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2221      	movs	r2, #33	; 0x21
 80055c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055c6:	f7fb fdbf 	bl	8001148 <HAL_GetTick>
 80055ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	88fa      	ldrh	r2, [r7, #6]
 80055d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e4:	d108      	bne.n	80055f8 <HAL_UART_Transmit+0x80>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	e003      	b.n	8005600 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005608:	e02d      	b.n	8005666 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	2180      	movs	r1, #128	; 0x80
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fe34 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e039      	b.n	8005698 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005636:	b292      	uxth	r2, r2
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	3302      	adds	r3, #2
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e008      	b.n	8005654 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	b292      	uxth	r2, r2
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3301      	adds	r3, #1
 8005652:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1cb      	bne.n	800560a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	2140      	movs	r1, #64	; 0x40
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fe00 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e005      	b.n	8005698 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	f040 80bf 	bne.w	8005838 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_Receive+0x26>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e0b7      	b.n	800583a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Receive+0x38>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e0b0      	b.n	800583a <HAL_UART_Receive+0x19a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2222      	movs	r2, #34	; 0x22
 80056ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f4:	f7fb fd28 	bl	8001148 <HAL_GetTick>
 80056f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	d10e      	bne.n	8005732 <HAL_UART_Receive+0x92>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_UART_Receive+0x88>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005726:	e02d      	b.n	8005784 <HAL_UART_Receive+0xe4>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	22ff      	movs	r2, #255	; 0xff
 800572c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005730:	e028      	b.n	8005784 <HAL_UART_Receive+0xe4>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10d      	bne.n	8005756 <HAL_UART_Receive+0xb6>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_UART_Receive+0xac>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800574a:	e01b      	b.n	8005784 <HAL_UART_Receive+0xe4>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	227f      	movs	r2, #127	; 0x7f
 8005750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005754:	e016      	b.n	8005784 <HAL_UART_Receive+0xe4>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800575e:	d10d      	bne.n	800577c <HAL_UART_Receive+0xdc>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <HAL_UART_Receive+0xd2>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	227f      	movs	r2, #127	; 0x7f
 800576c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005770:	e008      	b.n	8005784 <HAL_UART_Receive+0xe4>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	223f      	movs	r2, #63	; 0x3f
 8005776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800577a:	e003      	b.n	8005784 <HAL_UART_Receive+0xe4>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800578a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005794:	d108      	bne.n	80057a8 <HAL_UART_Receive+0x108>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d104      	bne.n	80057a8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e003      	b.n	80057b0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80057b8:	e033      	b.n	8005822 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2200      	movs	r2, #0
 80057c2:	2120      	movs	r1, #32
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fd5c 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e032      	b.n	800583a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	8a7b      	ldrh	r3, [r7, #18]
 80057e4:	4013      	ands	r3, r2
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3302      	adds	r3, #2
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e00d      	b.n	8005810 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	8a7b      	ldrh	r3, [r7, #18]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	4013      	ands	r3, r2
 8005804:	b2da      	uxtb	r2, r3
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3301      	adds	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1c5      	bne.n	80057ba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b0ba      	sub	sp, #232	; 0xe8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800586a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800586e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005872:	4013      	ands	r3, r2
 8005874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d115      	bne.n	80058ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 82a3 	beq.w	8005de8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
      }
      return;
 80058aa:	e29d      	b.n	8005de8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8117 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058c6:	4b85      	ldr	r3, [pc, #532]	; (8005adc <HAL_UART_IRQHandler+0x298>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 810a 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d011      	beq.n	8005900 <HAL_UART_IRQHandler+0xbc>
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2201      	movs	r2, #1
 80058ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d011      	beq.n	8005930 <HAL_UART_IRQHandler+0xec>
 800590c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2202      	movs	r2, #2
 800591e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005926:	f043 0204 	orr.w	r2, r3, #4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d011      	beq.n	8005960 <HAL_UART_IRQHandler+0x11c>
 800593c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2204      	movs	r2, #4
 800594e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005956:	f043 0202 	orr.w	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d017      	beq.n	800599c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d105      	bne.n	8005984 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2208      	movs	r2, #8
 800598a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005992:	f043 0208 	orr.w	r2, r3, #8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <HAL_UART_IRQHandler+0x18a>
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8209 	beq.w	8005dec <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00d      	beq.n	8005a02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d005      	beq.n	8005a26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d04f      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fcef 	bl	800640a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d141      	bne.n	8005abe <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1d9      	bne.n	8005a3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d013      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <HAL_UART_IRQHandler+0x29c>)
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc fa62 	bl	8001f64 <HAL_DMA_Abort_IT>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d017      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	e00f      	b.n	8005ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fa ffb0 	bl	8000a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	e00b      	b.n	8005ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fa ffac 	bl	8000a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	e007      	b.n	8005ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fa ffa8 	bl	8000a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005ad4:	e18a      	b.n	8005dec <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad6:	bf00      	nop
    return;
 8005ad8:	e188      	b.n	8005dec <HAL_UART_IRQHandler+0x5a8>
 8005ada:	bf00      	nop
 8005adc:	04000120 	.word	0x04000120
 8005ae0:	080064d1 	.word	0x080064d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f040 8143 	bne.w	8005d74 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 813c 	beq.w	8005d74 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8135 	beq.w	8005d74 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	f040 80b1 	bne.w	8005c84 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 815c 	beq.w	8005df0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f080 8154 	bcs.w	8005df0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	f000 8085 	beq.w	8005c68 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1da      	bne.n	8005b5e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e1      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e3      	bne.n	8005be4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c38:	f023 0310 	bic.w	r3, r3, #16
 8005c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e4      	bne.n	8005c28 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fc f945 	bl	8001ef2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f8bf 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c82:	e0b5      	b.n	8005df0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80a7 	beq.w	8005df4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005ca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80a2 	beq.w	8005df4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e4      	bne.n	8005cb0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e3      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 0310 	bic.w	r3, r3, #16
 8005d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e4      	bne.n	8005d30 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f847 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d72:	e03f      	b.n	8005df4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00e      	beq.n	8005d9e <HAL_UART_IRQHandler+0x55a>
 8005d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fbda 	bl	8006550 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d9c:	e02d      	b.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00e      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01c      	beq.n	8005df8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
    }
    return;
 8005dc6:	e017      	b.n	8005df8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d012      	beq.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb8b 	bl	80064fc <UART_EndTransmit_IT>
    return;
 8005de6:	e008      	b.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
      return;
 8005de8:	bf00      	nop
 8005dea:	e006      	b.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
    return;
 8005dec:	bf00      	nop
 8005dee:	e004      	b.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
      return;
 8005df0:	bf00      	nop
 8005df2:	e002      	b.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
      return;
 8005df4:	bf00      	nop
 8005df6:	e000      	b.n	8005dfa <HAL_UART_IRQHandler+0x5b6>
    return;
 8005df8:	bf00      	nop
  }

}
 8005dfa:	37e8      	adds	r7, #232	; 0xe8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e24:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4313      	orrs	r3, r2
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b8a      	ldr	r3, [pc, #552]	; (8006094 <UART_SetConfig+0x254>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	6979      	ldr	r1, [r7, #20]
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a78      	ldr	r2, [pc, #480]	; (8006098 <UART_SetConfig+0x258>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d120      	bne.n	8005efe <UART_SetConfig+0xbe>
 8005ebc:	4b77      	ldr	r3, [pc, #476]	; (800609c <UART_SetConfig+0x25c>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d817      	bhi.n	8005ef8 <UART_SetConfig+0xb8>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x90>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef3 	.word	0x08005ef3
 8005edc:	08005ee7 	.word	0x08005ee7
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e01d      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e01a      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005eec:	2304      	movs	r3, #4
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e017      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e014      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e011      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a67      	ldr	r2, [pc, #412]	; (80060a0 <UART_SetConfig+0x260>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d102      	bne.n	8005f0e <UART_SetConfig+0xce>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e009      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a64      	ldr	r2, [pc, #400]	; (80060a4 <UART_SetConfig+0x264>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d102      	bne.n	8005f1e <UART_SetConfig+0xde>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e001      	b.n	8005f22 <UART_SetConfig+0xe2>
 8005f1e:	2310      	movs	r3, #16
 8005f20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2a:	d15b      	bne.n	8005fe4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005f2c:	7ffb      	ldrb	r3, [r7, #31]
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d827      	bhi.n	8005f82 <UART_SetConfig+0x142>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0xf8>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	08005f83 	.word	0x08005f83
 8005f48:	08005f73 	.word	0x08005f73
 8005f4c:	08005f83 	.word	0x08005f83
 8005f50:	08005f83 	.word	0x08005f83
 8005f54:	08005f83 	.word	0x08005f83
 8005f58:	08005f7b 	.word	0x08005f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7fd fbc2 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8005f60:	61b8      	str	r0, [r7, #24]
        break;
 8005f62:	e013      	b.n	8005f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f64:	f7fd fbe0 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8005f68:	61b8      	str	r0, [r7, #24]
        break;
 8005f6a:	e00f      	b.n	8005f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f6c:	4b4e      	ldr	r3, [pc, #312]	; (80060a8 <UART_SetConfig+0x268>)
 8005f6e:	61bb      	str	r3, [r7, #24]
        break;
 8005f70:	e00c      	b.n	8005f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f72:	f7fd fb41 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8005f76:	61b8      	str	r0, [r7, #24]
        break;
 8005f78:	e008      	b.n	8005f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7e:	61bb      	str	r3, [r7, #24]
        break;
 8005f80:	e004      	b.n	8005f8c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	77bb      	strb	r3, [r7, #30]
        break;
 8005f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d074      	beq.n	800607c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	005a      	lsls	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	441a      	add	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b0f      	cmp	r3, #15
 8005fae:	d916      	bls.n	8005fde <UART_SetConfig+0x19e>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb6:	d212      	bcs.n	8005fde <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f023 030f 	bic.w	r3, r3, #15
 8005fc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	89fb      	ldrh	r3, [r7, #14]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	89fa      	ldrh	r2, [r7, #14]
 8005fda:	60da      	str	r2, [r3, #12]
 8005fdc:	e04e      	b.n	800607c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	77bb      	strb	r3, [r7, #30]
 8005fe2:	e04b      	b.n	800607c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fe4:	7ffb      	ldrb	r3, [r7, #31]
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d827      	bhi.n	800603a <UART_SetConfig+0x1fa>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x1b0>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	0800601d 	.word	0x0800601d
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	0800603b 	.word	0x0800603b
 8006000:	0800602b 	.word	0x0800602b
 8006004:	0800603b 	.word	0x0800603b
 8006008:	0800603b 	.word	0x0800603b
 800600c:	0800603b 	.word	0x0800603b
 8006010:	08006033 	.word	0x08006033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006014:	f7fd fb66 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8006018:	61b8      	str	r0, [r7, #24]
        break;
 800601a:	e013      	b.n	8006044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800601c:	f7fd fb84 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8006020:	61b8      	str	r0, [r7, #24]
        break;
 8006022:	e00f      	b.n	8006044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <UART_SetConfig+0x268>)
 8006026:	61bb      	str	r3, [r7, #24]
        break;
 8006028:	e00c      	b.n	8006044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602a:	f7fd fae5 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 800602e:	61b8      	str	r0, [r7, #24]
        break;
 8006030:	e008      	b.n	8006044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006036:	61bb      	str	r3, [r7, #24]
        break;
 8006038:	e004      	b.n	8006044 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	77bb      	strb	r3, [r7, #30]
        break;
 8006042:	bf00      	nop
    }

    if (pclk != 0U)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d018      	beq.n	800607c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	085a      	lsrs	r2, r3, #1
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	441a      	add	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b0f      	cmp	r3, #15
 8006064:	d908      	bls.n	8006078 <UART_SetConfig+0x238>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d204      	bcs.n	8006078 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e001      	b.n	800607c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006088:	7fbb      	ldrb	r3, [r7, #30]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	efff69f3 	.word	0xefff69f3
 8006098:	40013800 	.word	0x40013800
 800609c:	40021000 	.word	0x40021000
 80060a0:	40004400 	.word	0x40004400
 80060a4:	40004800 	.word	0x40004800
 80060a8:	007a1200 	.word	0x007a1200

080060ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061aa:	d10a      	bne.n	80061c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006200:	f7fa ffa2 	bl	8001148 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d10e      	bne.n	8006232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f82d 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e023      	b.n	800627a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d10e      	bne.n	800625e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f817 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e00d      	b.n	800627a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b09c      	sub	sp, #112	; 0x70
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	603b      	str	r3, [r7, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006292:	e0a5      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800629a:	f000 80a1 	beq.w	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629e:	f7fa ff53 	bl	8001148 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d302      	bcc.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80062ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d13e      	bne.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c8:	667b      	str	r3, [r7, #100]	; 0x64
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	663b      	str	r3, [r7, #96]	; 0x60
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006306:	64ba      	str	r2, [r7, #72]	; 0x48
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800630c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e5      	bne.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e067      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d04f      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634e:	d147      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006358:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800636e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
 800637a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800637e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e6      	bne.n	800635a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	613b      	str	r3, [r7, #16]
   return(result);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ac:	623a      	str	r2, [r7, #32]
 80063ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	69f9      	ldr	r1, [r7, #28]
 80063b2:	6a3a      	ldr	r2, [r7, #32]
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e010      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f43f af4a 	beq.w	8006294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3770      	adds	r7, #112	; 0x70
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800640a:	b480      	push	{r7}
 800640c:	b095      	sub	sp, #84	; 0x54
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006430:	643b      	str	r3, [r7, #64]	; 0x40
 8006432:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	61fb      	str	r3, [r7, #28]
   return(result);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647c:	2b01      	cmp	r3, #1
 800647e:	d118      	bne.n	80064b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	60bb      	str	r3, [r7, #8]
   return(result);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f023 0310 	bic.w	r3, r3, #16
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	613b      	str	r3, [r7, #16]
   return(result);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80064c4:	bf00      	nop
 80064c6:	3754      	adds	r7, #84	; 0x54
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7fa fa94 	bl	8000a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	60bb      	str	r3, [r7, #8]
   return(result);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	613b      	str	r3, [r7, #16]
   return(result);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e6      	bne.n	8006504 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fa fa60 	bl	8000a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006548:	bf00      	nop
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <__errno>:
 8006564:	4b01      	ldr	r3, [pc, #4]	; (800656c <__errno+0x8>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	2000000c 	.word	0x2000000c

08006570 <__libc_init_array>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4d0d      	ldr	r5, [pc, #52]	; (80065a8 <__libc_init_array+0x38>)
 8006574:	4c0d      	ldr	r4, [pc, #52]	; (80065ac <__libc_init_array+0x3c>)
 8006576:	1b64      	subs	r4, r4, r5
 8006578:	10a4      	asrs	r4, r4, #2
 800657a:	2600      	movs	r6, #0
 800657c:	42a6      	cmp	r6, r4
 800657e:	d109      	bne.n	8006594 <__libc_init_array+0x24>
 8006580:	4d0b      	ldr	r5, [pc, #44]	; (80065b0 <__libc_init_array+0x40>)
 8006582:	4c0c      	ldr	r4, [pc, #48]	; (80065b4 <__libc_init_array+0x44>)
 8006584:	f001 f844 	bl	8007610 <_init>
 8006588:	1b64      	subs	r4, r4, r5
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	2600      	movs	r6, #0
 800658e:	42a6      	cmp	r6, r4
 8006590:	d105      	bne.n	800659e <__libc_init_array+0x2e>
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	f855 3b04 	ldr.w	r3, [r5], #4
 8006598:	4798      	blx	r3
 800659a:	3601      	adds	r6, #1
 800659c:	e7ee      	b.n	800657c <__libc_init_array+0xc>
 800659e:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a2:	4798      	blx	r3
 80065a4:	3601      	adds	r6, #1
 80065a6:	e7f2      	b.n	800658e <__libc_init_array+0x1e>
 80065a8:	08007700 	.word	0x08007700
 80065ac:	08007700 	.word	0x08007700
 80065b0:	08007700 	.word	0x08007700
 80065b4:	08007704 	.word	0x08007704

080065b8 <memset>:
 80065b8:	4402      	add	r2, r0
 80065ba:	4603      	mov	r3, r0
 80065bc:	4293      	cmp	r3, r2
 80065be:	d100      	bne.n	80065c2 <memset+0xa>
 80065c0:	4770      	bx	lr
 80065c2:	f803 1b01 	strb.w	r1, [r3], #1
 80065c6:	e7f9      	b.n	80065bc <memset+0x4>

080065c8 <iprintf>:
 80065c8:	b40f      	push	{r0, r1, r2, r3}
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <iprintf+0x2c>)
 80065cc:	b513      	push	{r0, r1, r4, lr}
 80065ce:	681c      	ldr	r4, [r3, #0]
 80065d0:	b124      	cbz	r4, 80065dc <iprintf+0x14>
 80065d2:	69a3      	ldr	r3, [r4, #24]
 80065d4:	b913      	cbnz	r3, 80065dc <iprintf+0x14>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 faae 	bl	8006b38 <__sinit>
 80065dc:	ab05      	add	r3, sp, #20
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fc87 	bl	8006ef8 <_vfiprintf_r>
 80065ea:	b002      	add	sp, #8
 80065ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f0:	b004      	add	sp, #16
 80065f2:	4770      	bx	lr
 80065f4:	2000000c 	.word	0x2000000c

080065f8 <setvbuf>:
 80065f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	461d      	mov	r5, r3
 80065fe:	4b5d      	ldr	r3, [pc, #372]	; (8006774 <setvbuf+0x17c>)
 8006600:	681f      	ldr	r7, [r3, #0]
 8006602:	4604      	mov	r4, r0
 8006604:	460e      	mov	r6, r1
 8006606:	4690      	mov	r8, r2
 8006608:	b127      	cbz	r7, 8006614 <setvbuf+0x1c>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	b913      	cbnz	r3, 8006614 <setvbuf+0x1c>
 800660e:	4638      	mov	r0, r7
 8006610:	f000 fa92 	bl	8006b38 <__sinit>
 8006614:	4b58      	ldr	r3, [pc, #352]	; (8006778 <setvbuf+0x180>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d167      	bne.n	80066ea <setvbuf+0xf2>
 800661a:	687c      	ldr	r4, [r7, #4]
 800661c:	f1b8 0f02 	cmp.w	r8, #2
 8006620:	d006      	beq.n	8006630 <setvbuf+0x38>
 8006622:	f1b8 0f01 	cmp.w	r8, #1
 8006626:	f200 809f 	bhi.w	8006768 <setvbuf+0x170>
 800662a:	2d00      	cmp	r5, #0
 800662c:	f2c0 809c 	blt.w	8006768 <setvbuf+0x170>
 8006630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d405      	bmi.n	8006642 <setvbuf+0x4a>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	0598      	lsls	r0, r3, #22
 800663a:	d402      	bmi.n	8006642 <setvbuf+0x4a>
 800663c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663e:	f000 fb19 	bl	8006c74 <__retarget_lock_acquire_recursive>
 8006642:	4621      	mov	r1, r4
 8006644:	4638      	mov	r0, r7
 8006646:	f000 f9e3 	bl	8006a10 <_fflush_r>
 800664a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800664c:	b141      	cbz	r1, 8006660 <setvbuf+0x68>
 800664e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006652:	4299      	cmp	r1, r3
 8006654:	d002      	beq.n	800665c <setvbuf+0x64>
 8006656:	4638      	mov	r0, r7
 8006658:	f000 fb7a 	bl	8006d50 <_free_r>
 800665c:	2300      	movs	r3, #0
 800665e:	6363      	str	r3, [r4, #52]	; 0x34
 8006660:	2300      	movs	r3, #0
 8006662:	61a3      	str	r3, [r4, #24]
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	0619      	lsls	r1, r3, #24
 800666a:	d503      	bpl.n	8006674 <setvbuf+0x7c>
 800666c:	6921      	ldr	r1, [r4, #16]
 800666e:	4638      	mov	r0, r7
 8006670:	f000 fb6e 	bl	8006d50 <_free_r>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	f1b8 0f02 	cmp.w	r8, #2
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	d06c      	beq.n	8006760 <setvbuf+0x168>
 8006686:	ab01      	add	r3, sp, #4
 8006688:	466a      	mov	r2, sp
 800668a:	4621      	mov	r1, r4
 800668c:	4638      	mov	r0, r7
 800668e:	f000 faf3 	bl	8006c78 <__swhatbuf_r>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	4318      	orrs	r0, r3
 8006696:	81a0      	strh	r0, [r4, #12]
 8006698:	2d00      	cmp	r5, #0
 800669a:	d130      	bne.n	80066fe <setvbuf+0x106>
 800669c:	9d00      	ldr	r5, [sp, #0]
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fb4e 	bl	8006d40 <malloc>
 80066a4:	4606      	mov	r6, r0
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d155      	bne.n	8006756 <setvbuf+0x15e>
 80066aa:	f8dd 9000 	ldr.w	r9, [sp]
 80066ae:	45a9      	cmp	r9, r5
 80066b0:	d14a      	bne.n	8006748 <setvbuf+0x150>
 80066b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80066b6:	2200      	movs	r2, #0
 80066b8:	60a2      	str	r2, [r4, #8]
 80066ba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80066be:	6022      	str	r2, [r4, #0]
 80066c0:	6122      	str	r2, [r4, #16]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c8:	6162      	str	r2, [r4, #20]
 80066ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066cc:	f043 0302 	orr.w	r3, r3, #2
 80066d0:	07d2      	lsls	r2, r2, #31
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	d405      	bmi.n	80066e2 <setvbuf+0xea>
 80066d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80066da:	d102      	bne.n	80066e2 <setvbuf+0xea>
 80066dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066de:	f000 faca 	bl	8006c76 <__retarget_lock_release_recursive>
 80066e2:	4628      	mov	r0, r5
 80066e4:	b003      	add	sp, #12
 80066e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <setvbuf+0x184>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d101      	bne.n	80066f4 <setvbuf+0xfc>
 80066f0:	68bc      	ldr	r4, [r7, #8]
 80066f2:	e793      	b.n	800661c <setvbuf+0x24>
 80066f4:	4b22      	ldr	r3, [pc, #136]	; (8006780 <setvbuf+0x188>)
 80066f6:	429c      	cmp	r4, r3
 80066f8:	bf08      	it	eq
 80066fa:	68fc      	ldreq	r4, [r7, #12]
 80066fc:	e78e      	b.n	800661c <setvbuf+0x24>
 80066fe:	2e00      	cmp	r6, #0
 8006700:	d0cd      	beq.n	800669e <setvbuf+0xa6>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	b913      	cbnz	r3, 800670c <setvbuf+0x114>
 8006706:	4638      	mov	r0, r7
 8006708:	f000 fa16 	bl	8006b38 <__sinit>
 800670c:	f1b8 0f01 	cmp.w	r8, #1
 8006710:	bf08      	it	eq
 8006712:	89a3      	ldrheq	r3, [r4, #12]
 8006714:	6026      	str	r6, [r4, #0]
 8006716:	bf04      	itt	eq
 8006718:	f043 0301 	orreq.w	r3, r3, #1
 800671c:	81a3      	strheq	r3, [r4, #12]
 800671e:	89a2      	ldrh	r2, [r4, #12]
 8006720:	f012 0308 	ands.w	r3, r2, #8
 8006724:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006728:	d01c      	beq.n	8006764 <setvbuf+0x16c>
 800672a:	07d3      	lsls	r3, r2, #31
 800672c:	bf41      	itttt	mi
 800672e:	2300      	movmi	r3, #0
 8006730:	426d      	negmi	r5, r5
 8006732:	60a3      	strmi	r3, [r4, #8]
 8006734:	61a5      	strmi	r5, [r4, #24]
 8006736:	bf58      	it	pl
 8006738:	60a5      	strpl	r5, [r4, #8]
 800673a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800673c:	f015 0501 	ands.w	r5, r5, #1
 8006740:	d115      	bne.n	800676e <setvbuf+0x176>
 8006742:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006746:	e7c8      	b.n	80066da <setvbuf+0xe2>
 8006748:	4648      	mov	r0, r9
 800674a:	f000 faf9 	bl	8006d40 <malloc>
 800674e:	4606      	mov	r6, r0
 8006750:	2800      	cmp	r0, #0
 8006752:	d0ae      	beq.n	80066b2 <setvbuf+0xba>
 8006754:	464d      	mov	r5, r9
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	e7d0      	b.n	8006702 <setvbuf+0x10a>
 8006760:	2500      	movs	r5, #0
 8006762:	e7a8      	b.n	80066b6 <setvbuf+0xbe>
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	e7e8      	b.n	800673a <setvbuf+0x142>
 8006768:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800676c:	e7b9      	b.n	80066e2 <setvbuf+0xea>
 800676e:	2500      	movs	r5, #0
 8006770:	e7b7      	b.n	80066e2 <setvbuf+0xea>
 8006772:	bf00      	nop
 8006774:	2000000c 	.word	0x2000000c
 8006778:	0800768c 	.word	0x0800768c
 800677c:	080076ac 	.word	0x080076ac
 8006780:	0800766c 	.word	0x0800766c

08006784 <__swbuf_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	460e      	mov	r6, r1
 8006788:	4614      	mov	r4, r2
 800678a:	4605      	mov	r5, r0
 800678c:	b118      	cbz	r0, 8006796 <__swbuf_r+0x12>
 800678e:	6983      	ldr	r3, [r0, #24]
 8006790:	b90b      	cbnz	r3, 8006796 <__swbuf_r+0x12>
 8006792:	f000 f9d1 	bl	8006b38 <__sinit>
 8006796:	4b21      	ldr	r3, [pc, #132]	; (800681c <__swbuf_r+0x98>)
 8006798:	429c      	cmp	r4, r3
 800679a:	d12b      	bne.n	80067f4 <__swbuf_r+0x70>
 800679c:	686c      	ldr	r4, [r5, #4]
 800679e:	69a3      	ldr	r3, [r4, #24]
 80067a0:	60a3      	str	r3, [r4, #8]
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	071a      	lsls	r2, r3, #28
 80067a6:	d52f      	bpl.n	8006808 <__swbuf_r+0x84>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	b36b      	cbz	r3, 8006808 <__swbuf_r+0x84>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	6820      	ldr	r0, [r4, #0]
 80067b0:	1ac0      	subs	r0, r0, r3
 80067b2:	6963      	ldr	r3, [r4, #20]
 80067b4:	b2f6      	uxtb	r6, r6
 80067b6:	4283      	cmp	r3, r0
 80067b8:	4637      	mov	r7, r6
 80067ba:	dc04      	bgt.n	80067c6 <__swbuf_r+0x42>
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 f926 	bl	8006a10 <_fflush_r>
 80067c4:	bb30      	cbnz	r0, 8006814 <__swbuf_r+0x90>
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	701e      	strb	r6, [r3, #0]
 80067d4:	6963      	ldr	r3, [r4, #20]
 80067d6:	3001      	adds	r0, #1
 80067d8:	4283      	cmp	r3, r0
 80067da:	d004      	beq.n	80067e6 <__swbuf_r+0x62>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	07db      	lsls	r3, r3, #31
 80067e0:	d506      	bpl.n	80067f0 <__swbuf_r+0x6c>
 80067e2:	2e0a      	cmp	r6, #10
 80067e4:	d104      	bne.n	80067f0 <__swbuf_r+0x6c>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f911 	bl	8006a10 <_fflush_r>
 80067ee:	b988      	cbnz	r0, 8006814 <__swbuf_r+0x90>
 80067f0:	4638      	mov	r0, r7
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <__swbuf_r+0x9c>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d101      	bne.n	80067fe <__swbuf_r+0x7a>
 80067fa:	68ac      	ldr	r4, [r5, #8]
 80067fc:	e7cf      	b.n	800679e <__swbuf_r+0x1a>
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <__swbuf_r+0xa0>)
 8006800:	429c      	cmp	r4, r3
 8006802:	bf08      	it	eq
 8006804:	68ec      	ldreq	r4, [r5, #12]
 8006806:	e7ca      	b.n	800679e <__swbuf_r+0x1a>
 8006808:	4621      	mov	r1, r4
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f80c 	bl	8006828 <__swsetup_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	d0cb      	beq.n	80067ac <__swbuf_r+0x28>
 8006814:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006818:	e7ea      	b.n	80067f0 <__swbuf_r+0x6c>
 800681a:	bf00      	nop
 800681c:	0800768c 	.word	0x0800768c
 8006820:	080076ac 	.word	0x080076ac
 8006824:	0800766c 	.word	0x0800766c

08006828 <__swsetup_r>:
 8006828:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <__swsetup_r+0xcc>)
 800682a:	b570      	push	{r4, r5, r6, lr}
 800682c:	681d      	ldr	r5, [r3, #0]
 800682e:	4606      	mov	r6, r0
 8006830:	460c      	mov	r4, r1
 8006832:	b125      	cbz	r5, 800683e <__swsetup_r+0x16>
 8006834:	69ab      	ldr	r3, [r5, #24]
 8006836:	b913      	cbnz	r3, 800683e <__swsetup_r+0x16>
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f97d 	bl	8006b38 <__sinit>
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <__swsetup_r+0xd0>)
 8006840:	429c      	cmp	r4, r3
 8006842:	d10f      	bne.n	8006864 <__swsetup_r+0x3c>
 8006844:	686c      	ldr	r4, [r5, #4]
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800684c:	0719      	lsls	r1, r3, #28
 800684e:	d42c      	bmi.n	80068aa <__swsetup_r+0x82>
 8006850:	06dd      	lsls	r5, r3, #27
 8006852:	d411      	bmi.n	8006878 <__swsetup_r+0x50>
 8006854:	2309      	movs	r3, #9
 8006856:	6033      	str	r3, [r6, #0]
 8006858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006862:	e03e      	b.n	80068e2 <__swsetup_r+0xba>
 8006864:	4b25      	ldr	r3, [pc, #148]	; (80068fc <__swsetup_r+0xd4>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d101      	bne.n	800686e <__swsetup_r+0x46>
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	e7eb      	b.n	8006846 <__swsetup_r+0x1e>
 800686e:	4b24      	ldr	r3, [pc, #144]	; (8006900 <__swsetup_r+0xd8>)
 8006870:	429c      	cmp	r4, r3
 8006872:	bf08      	it	eq
 8006874:	68ec      	ldreq	r4, [r5, #12]
 8006876:	e7e6      	b.n	8006846 <__swsetup_r+0x1e>
 8006878:	0758      	lsls	r0, r3, #29
 800687a:	d512      	bpl.n	80068a2 <__swsetup_r+0x7a>
 800687c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687e:	b141      	cbz	r1, 8006892 <__swsetup_r+0x6a>
 8006880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006884:	4299      	cmp	r1, r3
 8006886:	d002      	beq.n	800688e <__swsetup_r+0x66>
 8006888:	4630      	mov	r0, r6
 800688a:	f000 fa61 	bl	8006d50 <_free_r>
 800688e:	2300      	movs	r3, #0
 8006890:	6363      	str	r3, [r4, #52]	; 0x34
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	2300      	movs	r3, #0
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f043 0308 	orr.w	r3, r3, #8
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	b94b      	cbnz	r3, 80068c2 <__swsetup_r+0x9a>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b8:	d003      	beq.n	80068c2 <__swsetup_r+0x9a>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f9ff 	bl	8006cc0 <__smakebuf_r>
 80068c2:	89a0      	ldrh	r0, [r4, #12]
 80068c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c8:	f010 0301 	ands.w	r3, r0, #1
 80068cc:	d00a      	beq.n	80068e4 <__swsetup_r+0xbc>
 80068ce:	2300      	movs	r3, #0
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	425b      	negs	r3, r3
 80068d6:	61a3      	str	r3, [r4, #24]
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	b943      	cbnz	r3, 80068ee <__swsetup_r+0xc6>
 80068dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068e0:	d1ba      	bne.n	8006858 <__swsetup_r+0x30>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	0781      	lsls	r1, r0, #30
 80068e6:	bf58      	it	pl
 80068e8:	6963      	ldrpl	r3, [r4, #20]
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	e7f4      	b.n	80068d8 <__swsetup_r+0xb0>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e7f7      	b.n	80068e2 <__swsetup_r+0xba>
 80068f2:	bf00      	nop
 80068f4:	2000000c 	.word	0x2000000c
 80068f8:	0800768c 	.word	0x0800768c
 80068fc:	080076ac 	.word	0x080076ac
 8006900:	0800766c 	.word	0x0800766c

08006904 <__sflush_r>:
 8006904:	898a      	ldrh	r2, [r1, #12]
 8006906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	4605      	mov	r5, r0
 800690c:	0710      	lsls	r0, r2, #28
 800690e:	460c      	mov	r4, r1
 8006910:	d458      	bmi.n	80069c4 <__sflush_r+0xc0>
 8006912:	684b      	ldr	r3, [r1, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc05      	bgt.n	8006924 <__sflush_r+0x20>
 8006918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	dc02      	bgt.n	8006924 <__sflush_r+0x20>
 800691e:	2000      	movs	r0, #0
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006926:	2e00      	cmp	r6, #0
 8006928:	d0f9      	beq.n	800691e <__sflush_r+0x1a>
 800692a:	2300      	movs	r3, #0
 800692c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006930:	682f      	ldr	r7, [r5, #0]
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	d032      	beq.n	800699c <__sflush_r+0x98>
 8006936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	075a      	lsls	r2, r3, #29
 800693c:	d505      	bpl.n	800694a <__sflush_r+0x46>
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	1ac0      	subs	r0, r0, r3
 8006942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006944:	b10b      	cbz	r3, 800694a <__sflush_r+0x46>
 8006946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	2300      	movs	r3, #0
 800694c:	4602      	mov	r2, r0
 800694e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006950:	6a21      	ldr	r1, [r4, #32]
 8006952:	4628      	mov	r0, r5
 8006954:	47b0      	blx	r6
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	d106      	bne.n	800696a <__sflush_r+0x66>
 800695c:	6829      	ldr	r1, [r5, #0]
 800695e:	291d      	cmp	r1, #29
 8006960:	d82c      	bhi.n	80069bc <__sflush_r+0xb8>
 8006962:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <__sflush_r+0x108>)
 8006964:	40ca      	lsrs	r2, r1
 8006966:	07d6      	lsls	r6, r2, #31
 8006968:	d528      	bpl.n	80069bc <__sflush_r+0xb8>
 800696a:	2200      	movs	r2, #0
 800696c:	6062      	str	r2, [r4, #4]
 800696e:	04d9      	lsls	r1, r3, #19
 8006970:	6922      	ldr	r2, [r4, #16]
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	d504      	bpl.n	8006980 <__sflush_r+0x7c>
 8006976:	1c42      	adds	r2, r0, #1
 8006978:	d101      	bne.n	800697e <__sflush_r+0x7a>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b903      	cbnz	r3, 8006980 <__sflush_r+0x7c>
 800697e:	6560      	str	r0, [r4, #84]	; 0x54
 8006980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006982:	602f      	str	r7, [r5, #0]
 8006984:	2900      	cmp	r1, #0
 8006986:	d0ca      	beq.n	800691e <__sflush_r+0x1a>
 8006988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__sflush_r+0x92>
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f9dd 	bl	8006d50 <_free_r>
 8006996:	2000      	movs	r0, #0
 8006998:	6360      	str	r0, [r4, #52]	; 0x34
 800699a:	e7c1      	b.n	8006920 <__sflush_r+0x1c>
 800699c:	6a21      	ldr	r1, [r4, #32]
 800699e:	2301      	movs	r3, #1
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b0      	blx	r6
 80069a4:	1c41      	adds	r1, r0, #1
 80069a6:	d1c7      	bne.n	8006938 <__sflush_r+0x34>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0c4      	beq.n	8006938 <__sflush_r+0x34>
 80069ae:	2b1d      	cmp	r3, #29
 80069b0:	d001      	beq.n	80069b6 <__sflush_r+0xb2>
 80069b2:	2b16      	cmp	r3, #22
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0xb6>
 80069b6:	602f      	str	r7, [r5, #0]
 80069b8:	e7b1      	b.n	800691e <__sflush_r+0x1a>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	e7ad      	b.n	8006920 <__sflush_r+0x1c>
 80069c4:	690f      	ldr	r7, [r1, #16]
 80069c6:	2f00      	cmp	r7, #0
 80069c8:	d0a9      	beq.n	800691e <__sflush_r+0x1a>
 80069ca:	0793      	lsls	r3, r2, #30
 80069cc:	680e      	ldr	r6, [r1, #0]
 80069ce:	bf08      	it	eq
 80069d0:	694b      	ldreq	r3, [r1, #20]
 80069d2:	600f      	str	r7, [r1, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2300      	movne	r3, #0
 80069d8:	eba6 0807 	sub.w	r8, r6, r7
 80069dc:	608b      	str	r3, [r1, #8]
 80069de:	f1b8 0f00 	cmp.w	r8, #0
 80069e2:	dd9c      	ble.n	800691e <__sflush_r+0x1a>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069e8:	4643      	mov	r3, r8
 80069ea:	463a      	mov	r2, r7
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b0      	blx	r6
 80069f0:	2800      	cmp	r0, #0
 80069f2:	dc06      	bgt.n	8006a02 <__sflush_r+0xfe>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a00:	e78e      	b.n	8006920 <__sflush_r+0x1c>
 8006a02:	4407      	add	r7, r0
 8006a04:	eba8 0800 	sub.w	r8, r8, r0
 8006a08:	e7e9      	b.n	80069de <__sflush_r+0xda>
 8006a0a:	bf00      	nop
 8006a0c:	20400001 	.word	0x20400001

08006a10 <_fflush_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b913      	cbnz	r3, 8006a20 <_fflush_r+0x10>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	b118      	cbz	r0, 8006a2a <_fflush_r+0x1a>
 8006a22:	6983      	ldr	r3, [r0, #24]
 8006a24:	b90b      	cbnz	r3, 8006a2a <_fflush_r+0x1a>
 8006a26:	f000 f887 	bl	8006b38 <__sinit>
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <_fflush_r+0x6c>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d11b      	bne.n	8006a68 <_fflush_r+0x58>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ef      	beq.n	8006a1a <_fflush_r+0xa>
 8006a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a3c:	07d0      	lsls	r0, r2, #31
 8006a3e:	d404      	bmi.n	8006a4a <_fflush_r+0x3a>
 8006a40:	0599      	lsls	r1, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_fflush_r+0x3a>
 8006a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a46:	f000 f915 	bl	8006c74 <__retarget_lock_acquire_recursive>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	f7ff ff59 	bl	8006904 <__sflush_r>
 8006a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a54:	07da      	lsls	r2, r3, #31
 8006a56:	4605      	mov	r5, r0
 8006a58:	d4e0      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	059b      	lsls	r3, r3, #22
 8006a5e:	d4dd      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 f908 	bl	8006c76 <__retarget_lock_release_recursive>
 8006a66:	e7d9      	b.n	8006a1c <_fflush_r+0xc>
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <_fflush_r+0x70>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d101      	bne.n	8006a72 <_fflush_r+0x62>
 8006a6e:	68ac      	ldr	r4, [r5, #8]
 8006a70:	e7df      	b.n	8006a32 <_fflush_r+0x22>
 8006a72:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <_fflush_r+0x74>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	bf08      	it	eq
 8006a78:	68ec      	ldreq	r4, [r5, #12]
 8006a7a:	e7da      	b.n	8006a32 <_fflush_r+0x22>
 8006a7c:	0800768c 	.word	0x0800768c
 8006a80:	080076ac 	.word	0x080076ac
 8006a84:	0800766c 	.word	0x0800766c

08006a88 <std>:
 8006a88:	2300      	movs	r3, #0
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a96:	6083      	str	r3, [r0, #8]
 8006a98:	8181      	strh	r1, [r0, #12]
 8006a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a9c:	81c2      	strh	r2, [r0, #14]
 8006a9e:	6183      	str	r3, [r0, #24]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	305c      	adds	r0, #92	; 0x5c
 8006aa6:	f7ff fd87 	bl	80065b8 <memset>
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <std+0x38>)
 8006aac:	6263      	str	r3, [r4, #36]	; 0x24
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <std+0x3c>)
 8006ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x40>)
 8006ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x44>)
 8006ab8:	6224      	str	r4, [r4, #32]
 8006aba:	6323      	str	r3, [r4, #48]	; 0x30
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	080074a1 	.word	0x080074a1
 8006ac4:	080074c3 	.word	0x080074c3
 8006ac8:	080074fb 	.word	0x080074fb
 8006acc:	0800751f 	.word	0x0800751f

08006ad0 <_cleanup_r>:
 8006ad0:	4901      	ldr	r1, [pc, #4]	; (8006ad8 <_cleanup_r+0x8>)
 8006ad2:	f000 b8af 	b.w	8006c34 <_fwalk_reent>
 8006ad6:	bf00      	nop
 8006ad8:	08006a11 	.word	0x08006a11

08006adc <__sfmoreglue>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	1e4a      	subs	r2, r1, #1
 8006ae0:	2568      	movs	r5, #104	; 0x68
 8006ae2:	4355      	muls	r5, r2
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aea:	f000 f981 	bl	8006df0 <_malloc_r>
 8006aee:	4604      	mov	r4, r0
 8006af0:	b140      	cbz	r0, 8006b04 <__sfmoreglue+0x28>
 8006af2:	2100      	movs	r1, #0
 8006af4:	e9c0 1600 	strd	r1, r6, [r0]
 8006af8:	300c      	adds	r0, #12
 8006afa:	60a0      	str	r0, [r4, #8]
 8006afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b00:	f7ff fd5a 	bl	80065b8 <memset>
 8006b04:	4620      	mov	r0, r4
 8006b06:	bd70      	pop	{r4, r5, r6, pc}

08006b08 <__sfp_lock_acquire>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sfp_lock_acquire+0x8>)
 8006b0a:	f000 b8b3 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20000abc 	.word	0x20000abc

08006b14 <__sfp_lock_release>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_release+0x8>)
 8006b16:	f000 b8ae 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20000abc 	.word	0x20000abc

08006b20 <__sinit_lock_acquire>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sinit_lock_acquire+0x8>)
 8006b22:	f000 b8a7 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20000ab7 	.word	0x20000ab7

08006b2c <__sinit_lock_release>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__sinit_lock_release+0x8>)
 8006b2e:	f000 b8a2 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000ab7 	.word	0x20000ab7

08006b38 <__sinit>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	f7ff fff0 	bl	8006b20 <__sinit_lock_acquire>
 8006b40:	69a3      	ldr	r3, [r4, #24]
 8006b42:	b11b      	cbz	r3, 8006b4c <__sinit+0x14>
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	f7ff bff0 	b.w	8006b2c <__sinit_lock_release>
 8006b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b50:	6523      	str	r3, [r4, #80]	; 0x50
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <__sinit+0x68>)
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <__sinit+0x6c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	bf04      	itt	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	61a3      	streq	r3, [r4, #24]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f820 	bl	8006ba8 <__sfp>
 8006b68:	6060      	str	r0, [r4, #4]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f81c 	bl	8006ba8 <__sfp>
 8006b70:	60a0      	str	r0, [r4, #8]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f818 	bl	8006ba8 <__sfp>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	60e0      	str	r0, [r4, #12]
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	6860      	ldr	r0, [r4, #4]
 8006b80:	f7ff ff82 	bl	8006a88 <std>
 8006b84:	68a0      	ldr	r0, [r4, #8]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2109      	movs	r1, #9
 8006b8a:	f7ff ff7d 	bl	8006a88 <std>
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	2112      	movs	r1, #18
 8006b94:	f7ff ff78 	bl	8006a88 <std>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	e7d2      	b.n	8006b44 <__sinit+0xc>
 8006b9e:	bf00      	nop
 8006ba0:	08007668 	.word	0x08007668
 8006ba4:	08006ad1 	.word	0x08006ad1

08006ba8 <__sfp>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	f7ff ffac 	bl	8006b08 <__sfp_lock_acquire>
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <__sfp+0x84>)
 8006bb2:	681e      	ldr	r6, [r3, #0]
 8006bb4:	69b3      	ldr	r3, [r6, #24]
 8006bb6:	b913      	cbnz	r3, 8006bbe <__sfp+0x16>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbd 	bl	8006b38 <__sinit>
 8006bbe:	3648      	adds	r6, #72	; 0x48
 8006bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	d503      	bpl.n	8006bd0 <__sfp+0x28>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	b30b      	cbz	r3, 8006c10 <__sfp+0x68>
 8006bcc:	6836      	ldr	r6, [r6, #0]
 8006bce:	e7f7      	b.n	8006bc0 <__sfp+0x18>
 8006bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bd4:	b9d5      	cbnz	r5, 8006c0c <__sfp+0x64>
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <__sfp+0x88>)
 8006bd8:	60e3      	str	r3, [r4, #12]
 8006bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bde:	6665      	str	r5, [r4, #100]	; 0x64
 8006be0:	f000 f847 	bl	8006c72 <__retarget_lock_init_recursive>
 8006be4:	f7ff ff96 	bl	8006b14 <__sfp_lock_release>
 8006be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf0:	6025      	str	r5, [r4, #0]
 8006bf2:	61a5      	str	r5, [r4, #24]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bfc:	f7ff fcdc 	bl	80065b8 <memset>
 8006c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c08:	4620      	mov	r0, r4
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	3468      	adds	r4, #104	; 0x68
 8006c0e:	e7d9      	b.n	8006bc4 <__sfp+0x1c>
 8006c10:	2104      	movs	r1, #4
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7ff ff62 	bl	8006adc <__sfmoreglue>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	6030      	str	r0, [r6, #0]
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1d5      	bne.n	8006bcc <__sfp+0x24>
 8006c20:	f7ff ff78 	bl	8006b14 <__sfp_lock_release>
 8006c24:	230c      	movs	r3, #12
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	e7ee      	b.n	8006c08 <__sfp+0x60>
 8006c2a:	bf00      	nop
 8006c2c:	08007668 	.word	0x08007668
 8006c30:	ffff0001 	.word	0xffff0001

08006c34 <_fwalk_reent>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	4606      	mov	r6, r0
 8006c3a:	4688      	mov	r8, r1
 8006c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c40:	2700      	movs	r7, #0
 8006c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c46:	f1b9 0901 	subs.w	r9, r9, #1
 8006c4a:	d505      	bpl.n	8006c58 <_fwalk_reent+0x24>
 8006c4c:	6824      	ldr	r4, [r4, #0]
 8006c4e:	2c00      	cmp	r4, #0
 8006c50:	d1f7      	bne.n	8006c42 <_fwalk_reent+0xe>
 8006c52:	4638      	mov	r0, r7
 8006c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c58:	89ab      	ldrh	r3, [r5, #12]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d907      	bls.n	8006c6e <_fwalk_reent+0x3a>
 8006c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c62:	3301      	adds	r3, #1
 8006c64:	d003      	beq.n	8006c6e <_fwalk_reent+0x3a>
 8006c66:	4629      	mov	r1, r5
 8006c68:	4630      	mov	r0, r6
 8006c6a:	47c0      	blx	r8
 8006c6c:	4307      	orrs	r7, r0
 8006c6e:	3568      	adds	r5, #104	; 0x68
 8006c70:	e7e9      	b.n	8006c46 <_fwalk_reent+0x12>

08006c72 <__retarget_lock_init_recursive>:
 8006c72:	4770      	bx	lr

08006c74 <__retarget_lock_acquire_recursive>:
 8006c74:	4770      	bx	lr

08006c76 <__retarget_lock_release_recursive>:
 8006c76:	4770      	bx	lr

08006c78 <__swhatbuf_r>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	460e      	mov	r6, r1
 8006c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c80:	2900      	cmp	r1, #0
 8006c82:	b096      	sub	sp, #88	; 0x58
 8006c84:	4614      	mov	r4, r2
 8006c86:	461d      	mov	r5, r3
 8006c88:	da07      	bge.n	8006c9a <__swhatbuf_r+0x22>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	89b3      	ldrh	r3, [r6, #12]
 8006c90:	061a      	lsls	r2, r3, #24
 8006c92:	d410      	bmi.n	8006cb6 <__swhatbuf_r+0x3e>
 8006c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c98:	e00e      	b.n	8006cb8 <__swhatbuf_r+0x40>
 8006c9a:	466a      	mov	r2, sp
 8006c9c:	f000 fc66 	bl	800756c <_fstat_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	dbf2      	blt.n	8006c8a <__swhatbuf_r+0x12>
 8006ca4:	9a01      	ldr	r2, [sp, #4]
 8006ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cae:	425a      	negs	r2, r3
 8006cb0:	415a      	adcs	r2, r3
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	e7ee      	b.n	8006c94 <__swhatbuf_r+0x1c>
 8006cb6:	2340      	movs	r3, #64	; 0x40
 8006cb8:	2000      	movs	r0, #0
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	b016      	add	sp, #88	; 0x58
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}

08006cc0 <__smakebuf_r>:
 8006cc0:	898b      	ldrh	r3, [r1, #12]
 8006cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cc4:	079d      	lsls	r5, r3, #30
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	d507      	bpl.n	8006cdc <__smakebuf_r+0x1c>
 8006ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	6163      	str	r3, [r4, #20]
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	ab01      	add	r3, sp, #4
 8006cde:	466a      	mov	r2, sp
 8006ce0:	f7ff ffca 	bl	8006c78 <__swhatbuf_r>
 8006ce4:	9900      	ldr	r1, [sp, #0]
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f881 	bl	8006df0 <_malloc_r>
 8006cee:	b948      	cbnz	r0, 8006d04 <__smakebuf_r+0x44>
 8006cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf4:	059a      	lsls	r2, r3, #22
 8006cf6:	d4ef      	bmi.n	8006cd8 <__smakebuf_r+0x18>
 8006cf8:	f023 0303 	bic.w	r3, r3, #3
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	e7e3      	b.n	8006ccc <__smakebuf_r+0xc>
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <__smakebuf_r+0x7c>)
 8006d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	9b00      	ldr	r3, [sp, #0]
 8006d14:	6163      	str	r3, [r4, #20]
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	6120      	str	r0, [r4, #16]
 8006d1a:	b15b      	cbz	r3, 8006d34 <__smakebuf_r+0x74>
 8006d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 fc35 	bl	8007590 <_isatty_r>
 8006d26:	b128      	cbz	r0, 8006d34 <__smakebuf_r+0x74>
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	89a0      	ldrh	r0, [r4, #12]
 8006d36:	4305      	orrs	r5, r0
 8006d38:	81a5      	strh	r5, [r4, #12]
 8006d3a:	e7cd      	b.n	8006cd8 <__smakebuf_r+0x18>
 8006d3c:	08006ad1 	.word	0x08006ad1

08006d40 <malloc>:
 8006d40:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <malloc+0xc>)
 8006d42:	4601      	mov	r1, r0
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	f000 b853 	b.w	8006df0 <_malloc_r>
 8006d4a:	bf00      	nop
 8006d4c:	2000000c 	.word	0x2000000c

08006d50 <_free_r>:
 8006d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d048      	beq.n	8006de8 <_free_r+0x98>
 8006d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5a:	9001      	str	r0, [sp, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d62:	bfb8      	it	lt
 8006d64:	18e4      	addlt	r4, r4, r3
 8006d66:	f000 fc35 	bl	80075d4 <__malloc_lock>
 8006d6a:	4a20      	ldr	r2, [pc, #128]	; (8006dec <_free_r+0x9c>)
 8006d6c:	9801      	ldr	r0, [sp, #4]
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	4615      	mov	r5, r2
 8006d72:	b933      	cbnz	r3, 8006d82 <_free_r+0x32>
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	6014      	str	r4, [r2, #0]
 8006d78:	b003      	add	sp, #12
 8006d7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d7e:	f000 bc2f 	b.w	80075e0 <__malloc_unlock>
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	d90b      	bls.n	8006d9e <_free_r+0x4e>
 8006d86:	6821      	ldr	r1, [r4, #0]
 8006d88:	1862      	adds	r2, r4, r1
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bf04      	itt	eq
 8006d8e:	681a      	ldreq	r2, [r3, #0]
 8006d90:	685b      	ldreq	r3, [r3, #4]
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	bf04      	itt	eq
 8006d96:	1852      	addeq	r2, r2, r1
 8006d98:	6022      	streq	r2, [r4, #0]
 8006d9a:	602c      	str	r4, [r5, #0]
 8006d9c:	e7ec      	b.n	8006d78 <_free_r+0x28>
 8006d9e:	461a      	mov	r2, r3
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	b10b      	cbz	r3, 8006da8 <_free_r+0x58>
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	d9fa      	bls.n	8006d9e <_free_r+0x4e>
 8006da8:	6811      	ldr	r1, [r2, #0]
 8006daa:	1855      	adds	r5, r2, r1
 8006dac:	42a5      	cmp	r5, r4
 8006dae:	d10b      	bne.n	8006dc8 <_free_r+0x78>
 8006db0:	6824      	ldr	r4, [r4, #0]
 8006db2:	4421      	add	r1, r4
 8006db4:	1854      	adds	r4, r2, r1
 8006db6:	42a3      	cmp	r3, r4
 8006db8:	6011      	str	r1, [r2, #0]
 8006dba:	d1dd      	bne.n	8006d78 <_free_r+0x28>
 8006dbc:	681c      	ldr	r4, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	4421      	add	r1, r4
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	e7d7      	b.n	8006d78 <_free_r+0x28>
 8006dc8:	d902      	bls.n	8006dd0 <_free_r+0x80>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	6003      	str	r3, [r0, #0]
 8006dce:	e7d3      	b.n	8006d78 <_free_r+0x28>
 8006dd0:	6825      	ldr	r5, [r4, #0]
 8006dd2:	1961      	adds	r1, r4, r5
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	bf04      	itt	eq
 8006dd8:	6819      	ldreq	r1, [r3, #0]
 8006dda:	685b      	ldreq	r3, [r3, #4]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	bf04      	itt	eq
 8006de0:	1949      	addeq	r1, r1, r5
 8006de2:	6021      	streq	r1, [r4, #0]
 8006de4:	6054      	str	r4, [r2, #4]
 8006de6:	e7c7      	b.n	8006d78 <_free_r+0x28>
 8006de8:	b003      	add	sp, #12
 8006dea:	bd30      	pop	{r4, r5, pc}
 8006dec:	20000090 	.word	0x20000090

08006df0 <_malloc_r>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	1ccd      	adds	r5, r1, #3
 8006df4:	f025 0503 	bic.w	r5, r5, #3
 8006df8:	3508      	adds	r5, #8
 8006dfa:	2d0c      	cmp	r5, #12
 8006dfc:	bf38      	it	cc
 8006dfe:	250c      	movcc	r5, #12
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	4606      	mov	r6, r0
 8006e04:	db01      	blt.n	8006e0a <_malloc_r+0x1a>
 8006e06:	42a9      	cmp	r1, r5
 8006e08:	d903      	bls.n	8006e12 <_malloc_r+0x22>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	6033      	str	r3, [r6, #0]
 8006e0e:	2000      	movs	r0, #0
 8006e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e12:	f000 fbdf 	bl	80075d4 <__malloc_lock>
 8006e16:	4921      	ldr	r1, [pc, #132]	; (8006e9c <_malloc_r+0xac>)
 8006e18:	680a      	ldr	r2, [r1, #0]
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	b99c      	cbnz	r4, 8006e46 <_malloc_r+0x56>
 8006e1e:	4f20      	ldr	r7, [pc, #128]	; (8006ea0 <_malloc_r+0xb0>)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	b923      	cbnz	r3, 8006e2e <_malloc_r+0x3e>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4630      	mov	r0, r6
 8006e28:	f000 fb2a 	bl	8007480 <_sbrk_r>
 8006e2c:	6038      	str	r0, [r7, #0]
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 fb25 	bl	8007480 <_sbrk_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d123      	bne.n	8006e82 <_malloc_r+0x92>
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 fbce 	bl	80075e0 <__malloc_unlock>
 8006e44:	e7e3      	b.n	8006e0e <_malloc_r+0x1e>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	1b5b      	subs	r3, r3, r5
 8006e4a:	d417      	bmi.n	8006e7c <_malloc_r+0x8c>
 8006e4c:	2b0b      	cmp	r3, #11
 8006e4e:	d903      	bls.n	8006e58 <_malloc_r+0x68>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	441c      	add	r4, r3
 8006e54:	6025      	str	r5, [r4, #0]
 8006e56:	e004      	b.n	8006e62 <_malloc_r+0x72>
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	42a2      	cmp	r2, r4
 8006e5c:	bf0c      	ite	eq
 8006e5e:	600b      	streq	r3, [r1, #0]
 8006e60:	6053      	strne	r3, [r2, #4]
 8006e62:	4630      	mov	r0, r6
 8006e64:	f000 fbbc 	bl	80075e0 <__malloc_unlock>
 8006e68:	f104 000b 	add.w	r0, r4, #11
 8006e6c:	1d23      	adds	r3, r4, #4
 8006e6e:	f020 0007 	bic.w	r0, r0, #7
 8006e72:	1ac2      	subs	r2, r0, r3
 8006e74:	d0cc      	beq.n	8006e10 <_malloc_r+0x20>
 8006e76:	1a1b      	subs	r3, r3, r0
 8006e78:	50a3      	str	r3, [r4, r2]
 8006e7a:	e7c9      	b.n	8006e10 <_malloc_r+0x20>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	6864      	ldr	r4, [r4, #4]
 8006e80:	e7cc      	b.n	8006e1c <_malloc_r+0x2c>
 8006e82:	1cc4      	adds	r4, r0, #3
 8006e84:	f024 0403 	bic.w	r4, r4, #3
 8006e88:	42a0      	cmp	r0, r4
 8006e8a:	d0e3      	beq.n	8006e54 <_malloc_r+0x64>
 8006e8c:	1a21      	subs	r1, r4, r0
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 faf6 	bl	8007480 <_sbrk_r>
 8006e94:	3001      	adds	r0, #1
 8006e96:	d1dd      	bne.n	8006e54 <_malloc_r+0x64>
 8006e98:	e7cf      	b.n	8006e3a <_malloc_r+0x4a>
 8006e9a:	bf00      	nop
 8006e9c:	20000090 	.word	0x20000090
 8006ea0:	20000094 	.word	0x20000094

08006ea4 <__sfputc_r>:
 8006ea4:	6893      	ldr	r3, [r2, #8]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	b410      	push	{r4}
 8006eac:	6093      	str	r3, [r2, #8]
 8006eae:	da08      	bge.n	8006ec2 <__sfputc_r+0x1e>
 8006eb0:	6994      	ldr	r4, [r2, #24]
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	db01      	blt.n	8006eba <__sfputc_r+0x16>
 8006eb6:	290a      	cmp	r1, #10
 8006eb8:	d103      	bne.n	8006ec2 <__sfputc_r+0x1e>
 8006eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ebe:	f7ff bc61 	b.w	8006784 <__swbuf_r>
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	1c58      	adds	r0, r3, #1
 8006ec6:	6010      	str	r0, [r2, #0]
 8006ec8:	7019      	strb	r1, [r3, #0]
 8006eca:	4608      	mov	r0, r1
 8006ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <__sfputs_r>:
 8006ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	460f      	mov	r7, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	18d5      	adds	r5, r2, r3
 8006edc:	42ac      	cmp	r4, r5
 8006ede:	d101      	bne.n	8006ee4 <__sfputs_r+0x12>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e007      	b.n	8006ef4 <__sfputs_r+0x22>
 8006ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee8:	463a      	mov	r2, r7
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff ffda 	bl	8006ea4 <__sfputc_r>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d1f3      	bne.n	8006edc <__sfputs_r+0xa>
 8006ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ef8 <_vfiprintf_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	460d      	mov	r5, r1
 8006efe:	b09d      	sub	sp, #116	; 0x74
 8006f00:	4614      	mov	r4, r2
 8006f02:	4698      	mov	r8, r3
 8006f04:	4606      	mov	r6, r0
 8006f06:	b118      	cbz	r0, 8006f10 <_vfiprintf_r+0x18>
 8006f08:	6983      	ldr	r3, [r0, #24]
 8006f0a:	b90b      	cbnz	r3, 8006f10 <_vfiprintf_r+0x18>
 8006f0c:	f7ff fe14 	bl	8006b38 <__sinit>
 8006f10:	4b89      	ldr	r3, [pc, #548]	; (8007138 <_vfiprintf_r+0x240>)
 8006f12:	429d      	cmp	r5, r3
 8006f14:	d11b      	bne.n	8006f4e <_vfiprintf_r+0x56>
 8006f16:	6875      	ldr	r5, [r6, #4]
 8006f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f1a:	07d9      	lsls	r1, r3, #31
 8006f1c:	d405      	bmi.n	8006f2a <_vfiprintf_r+0x32>
 8006f1e:	89ab      	ldrh	r3, [r5, #12]
 8006f20:	059a      	lsls	r2, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_vfiprintf_r+0x32>
 8006f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f26:	f7ff fea5 	bl	8006c74 <__retarget_lock_acquire_recursive>
 8006f2a:	89ab      	ldrh	r3, [r5, #12]
 8006f2c:	071b      	lsls	r3, r3, #28
 8006f2e:	d501      	bpl.n	8006f34 <_vfiprintf_r+0x3c>
 8006f30:	692b      	ldr	r3, [r5, #16]
 8006f32:	b9eb      	cbnz	r3, 8006f70 <_vfiprintf_r+0x78>
 8006f34:	4629      	mov	r1, r5
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff fc76 	bl	8006828 <__swsetup_r>
 8006f3c:	b1c0      	cbz	r0, 8006f70 <_vfiprintf_r+0x78>
 8006f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f40:	07dc      	lsls	r4, r3, #31
 8006f42:	d50e      	bpl.n	8006f62 <_vfiprintf_r+0x6a>
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f48:	b01d      	add	sp, #116	; 0x74
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	4b7b      	ldr	r3, [pc, #492]	; (800713c <_vfiprintf_r+0x244>)
 8006f50:	429d      	cmp	r5, r3
 8006f52:	d101      	bne.n	8006f58 <_vfiprintf_r+0x60>
 8006f54:	68b5      	ldr	r5, [r6, #8]
 8006f56:	e7df      	b.n	8006f18 <_vfiprintf_r+0x20>
 8006f58:	4b79      	ldr	r3, [pc, #484]	; (8007140 <_vfiprintf_r+0x248>)
 8006f5a:	429d      	cmp	r5, r3
 8006f5c:	bf08      	it	eq
 8006f5e:	68f5      	ldreq	r5, [r6, #12]
 8006f60:	e7da      	b.n	8006f18 <_vfiprintf_r+0x20>
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	0598      	lsls	r0, r3, #22
 8006f66:	d4ed      	bmi.n	8006f44 <_vfiprintf_r+0x4c>
 8006f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f6a:	f7ff fe84 	bl	8006c76 <__retarget_lock_release_recursive>
 8006f6e:	e7e9      	b.n	8006f44 <_vfiprintf_r+0x4c>
 8006f70:	2300      	movs	r3, #0
 8006f72:	9309      	str	r3, [sp, #36]	; 0x24
 8006f74:	2320      	movs	r3, #32
 8006f76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f7e:	2330      	movs	r3, #48	; 0x30
 8006f80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007144 <_vfiprintf_r+0x24c>
 8006f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f88:	f04f 0901 	mov.w	r9, #1
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	469a      	mov	sl, r3
 8006f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f94:	b10a      	cbz	r2, 8006f9a <_vfiprintf_r+0xa2>
 8006f96:	2a25      	cmp	r2, #37	; 0x25
 8006f98:	d1f9      	bne.n	8006f8e <_vfiprintf_r+0x96>
 8006f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f9e:	d00b      	beq.n	8006fb8 <_vfiprintf_r+0xc0>
 8006fa0:	465b      	mov	r3, fp
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7ff ff93 	bl	8006ed2 <__sfputs_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	f000 80aa 	beq.w	8007106 <_vfiprintf_r+0x20e>
 8006fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fb4:	445a      	add	r2, fp
 8006fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80a2 	beq.w	8007106 <_vfiprintf_r+0x20e>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fcc:	f10a 0a01 	add.w	sl, sl, #1
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006fda:	4654      	mov	r4, sl
 8006fdc:	2205      	movs	r2, #5
 8006fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe2:	4858      	ldr	r0, [pc, #352]	; (8007144 <_vfiprintf_r+0x24c>)
 8006fe4:	f7f9 f8f4 	bl	80001d0 <memchr>
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	b9d8      	cbnz	r0, 8007024 <_vfiprintf_r+0x12c>
 8006fec:	06d1      	lsls	r1, r2, #27
 8006fee:	bf44      	itt	mi
 8006ff0:	2320      	movmi	r3, #32
 8006ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ff6:	0713      	lsls	r3, r2, #28
 8006ff8:	bf44      	itt	mi
 8006ffa:	232b      	movmi	r3, #43	; 0x2b
 8006ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007000:	f89a 3000 	ldrb.w	r3, [sl]
 8007004:	2b2a      	cmp	r3, #42	; 0x2a
 8007006:	d015      	beq.n	8007034 <_vfiprintf_r+0x13c>
 8007008:	9a07      	ldr	r2, [sp, #28]
 800700a:	4654      	mov	r4, sl
 800700c:	2000      	movs	r0, #0
 800700e:	f04f 0c0a 	mov.w	ip, #10
 8007012:	4621      	mov	r1, r4
 8007014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007018:	3b30      	subs	r3, #48	; 0x30
 800701a:	2b09      	cmp	r3, #9
 800701c:	d94e      	bls.n	80070bc <_vfiprintf_r+0x1c4>
 800701e:	b1b0      	cbz	r0, 800704e <_vfiprintf_r+0x156>
 8007020:	9207      	str	r2, [sp, #28]
 8007022:	e014      	b.n	800704e <_vfiprintf_r+0x156>
 8007024:	eba0 0308 	sub.w	r3, r0, r8
 8007028:	fa09 f303 	lsl.w	r3, r9, r3
 800702c:	4313      	orrs	r3, r2
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	46a2      	mov	sl, r4
 8007032:	e7d2      	b.n	8006fda <_vfiprintf_r+0xe2>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1d19      	adds	r1, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	9103      	str	r1, [sp, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfbb      	ittet	lt
 8007040:	425b      	neglt	r3, r3
 8007042:	f042 0202 	orrlt.w	r2, r2, #2
 8007046:	9307      	strge	r3, [sp, #28]
 8007048:	9307      	strlt	r3, [sp, #28]
 800704a:	bfb8      	it	lt
 800704c:	9204      	strlt	r2, [sp, #16]
 800704e:	7823      	ldrb	r3, [r4, #0]
 8007050:	2b2e      	cmp	r3, #46	; 0x2e
 8007052:	d10c      	bne.n	800706e <_vfiprintf_r+0x176>
 8007054:	7863      	ldrb	r3, [r4, #1]
 8007056:	2b2a      	cmp	r3, #42	; 0x2a
 8007058:	d135      	bne.n	80070c6 <_vfiprintf_r+0x1ce>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	9203      	str	r2, [sp, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfb8      	it	lt
 8007066:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800706a:	3402      	adds	r4, #2
 800706c:	9305      	str	r3, [sp, #20]
 800706e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007154 <_vfiprintf_r+0x25c>
 8007072:	7821      	ldrb	r1, [r4, #0]
 8007074:	2203      	movs	r2, #3
 8007076:	4650      	mov	r0, sl
 8007078:	f7f9 f8aa 	bl	80001d0 <memchr>
 800707c:	b140      	cbz	r0, 8007090 <_vfiprintf_r+0x198>
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	eba0 000a 	sub.w	r0, r0, sl
 8007084:	fa03 f000 	lsl.w	r0, r3, r0
 8007088:	9b04      	ldr	r3, [sp, #16]
 800708a:	4303      	orrs	r3, r0
 800708c:	3401      	adds	r4, #1
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	482c      	ldr	r0, [pc, #176]	; (8007148 <_vfiprintf_r+0x250>)
 8007096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800709a:	2206      	movs	r2, #6
 800709c:	f7f9 f898 	bl	80001d0 <memchr>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d03f      	beq.n	8007124 <_vfiprintf_r+0x22c>
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <_vfiprintf_r+0x254>)
 80070a6:	bb1b      	cbnz	r3, 80070f0 <_vfiprintf_r+0x1f8>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	3307      	adds	r3, #7
 80070ac:	f023 0307 	bic.w	r3, r3, #7
 80070b0:	3308      	adds	r3, #8
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b6:	443b      	add	r3, r7
 80070b8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ba:	e767      	b.n	8006f8c <_vfiprintf_r+0x94>
 80070bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c0:	460c      	mov	r4, r1
 80070c2:	2001      	movs	r0, #1
 80070c4:	e7a5      	b.n	8007012 <_vfiprintf_r+0x11a>
 80070c6:	2300      	movs	r3, #0
 80070c8:	3401      	adds	r4, #1
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f04f 0c0a 	mov.w	ip, #10
 80070d2:	4620      	mov	r0, r4
 80070d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d8:	3a30      	subs	r2, #48	; 0x30
 80070da:	2a09      	cmp	r2, #9
 80070dc:	d903      	bls.n	80070e6 <_vfiprintf_r+0x1ee>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c5      	beq.n	800706e <_vfiprintf_r+0x176>
 80070e2:	9105      	str	r1, [sp, #20]
 80070e4:	e7c3      	b.n	800706e <_vfiprintf_r+0x176>
 80070e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ea:	4604      	mov	r4, r0
 80070ec:	2301      	movs	r3, #1
 80070ee:	e7f0      	b.n	80070d2 <_vfiprintf_r+0x1da>
 80070f0:	ab03      	add	r3, sp, #12
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	462a      	mov	r2, r5
 80070f6:	4b16      	ldr	r3, [pc, #88]	; (8007150 <_vfiprintf_r+0x258>)
 80070f8:	a904      	add	r1, sp, #16
 80070fa:	4630      	mov	r0, r6
 80070fc:	f3af 8000 	nop.w
 8007100:	4607      	mov	r7, r0
 8007102:	1c78      	adds	r0, r7, #1
 8007104:	d1d6      	bne.n	80070b4 <_vfiprintf_r+0x1bc>
 8007106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007108:	07d9      	lsls	r1, r3, #31
 800710a:	d405      	bmi.n	8007118 <_vfiprintf_r+0x220>
 800710c:	89ab      	ldrh	r3, [r5, #12]
 800710e:	059a      	lsls	r2, r3, #22
 8007110:	d402      	bmi.n	8007118 <_vfiprintf_r+0x220>
 8007112:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007114:	f7ff fdaf 	bl	8006c76 <__retarget_lock_release_recursive>
 8007118:	89ab      	ldrh	r3, [r5, #12]
 800711a:	065b      	lsls	r3, r3, #25
 800711c:	f53f af12 	bmi.w	8006f44 <_vfiprintf_r+0x4c>
 8007120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007122:	e711      	b.n	8006f48 <_vfiprintf_r+0x50>
 8007124:	ab03      	add	r3, sp, #12
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	462a      	mov	r2, r5
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <_vfiprintf_r+0x258>)
 800712c:	a904      	add	r1, sp, #16
 800712e:	4630      	mov	r0, r6
 8007130:	f000 f880 	bl	8007234 <_printf_i>
 8007134:	e7e4      	b.n	8007100 <_vfiprintf_r+0x208>
 8007136:	bf00      	nop
 8007138:	0800768c 	.word	0x0800768c
 800713c:	080076ac 	.word	0x080076ac
 8007140:	0800766c 	.word	0x0800766c
 8007144:	080076cc 	.word	0x080076cc
 8007148:	080076d6 	.word	0x080076d6
 800714c:	00000000 	.word	0x00000000
 8007150:	08006ed3 	.word	0x08006ed3
 8007154:	080076d2 	.word	0x080076d2

08007158 <_printf_common>:
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	4616      	mov	r6, r2
 800715e:	4699      	mov	r9, r3
 8007160:	688a      	ldr	r2, [r1, #8]
 8007162:	690b      	ldr	r3, [r1, #16]
 8007164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007168:	4293      	cmp	r3, r2
 800716a:	bfb8      	it	lt
 800716c:	4613      	movlt	r3, r2
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007174:	4607      	mov	r7, r0
 8007176:	460c      	mov	r4, r1
 8007178:	b10a      	cbz	r2, 800717e <_printf_common+0x26>
 800717a:	3301      	adds	r3, #1
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	0699      	lsls	r1, r3, #26
 8007182:	bf42      	ittt	mi
 8007184:	6833      	ldrmi	r3, [r6, #0]
 8007186:	3302      	addmi	r3, #2
 8007188:	6033      	strmi	r3, [r6, #0]
 800718a:	6825      	ldr	r5, [r4, #0]
 800718c:	f015 0506 	ands.w	r5, r5, #6
 8007190:	d106      	bne.n	80071a0 <_printf_common+0x48>
 8007192:	f104 0a19 	add.w	sl, r4, #25
 8007196:	68e3      	ldr	r3, [r4, #12]
 8007198:	6832      	ldr	r2, [r6, #0]
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	42ab      	cmp	r3, r5
 800719e:	dc26      	bgt.n	80071ee <_printf_common+0x96>
 80071a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071a4:	1e13      	subs	r3, r2, #0
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	bf18      	it	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	0692      	lsls	r2, r2, #26
 80071ae:	d42b      	bmi.n	8007208 <_printf_common+0xb0>
 80071b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071b4:	4649      	mov	r1, r9
 80071b6:	4638      	mov	r0, r7
 80071b8:	47c0      	blx	r8
 80071ba:	3001      	adds	r0, #1
 80071bc:	d01e      	beq.n	80071fc <_printf_common+0xa4>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	68e5      	ldr	r5, [r4, #12]
 80071c2:	6832      	ldr	r2, [r6, #0]
 80071c4:	f003 0306 	and.w	r3, r3, #6
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	bf08      	it	eq
 80071cc:	1aad      	subeq	r5, r5, r2
 80071ce:	68a3      	ldr	r3, [r4, #8]
 80071d0:	6922      	ldr	r2, [r4, #16]
 80071d2:	bf0c      	ite	eq
 80071d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d8:	2500      	movne	r5, #0
 80071da:	4293      	cmp	r3, r2
 80071dc:	bfc4      	itt	gt
 80071de:	1a9b      	subgt	r3, r3, r2
 80071e0:	18ed      	addgt	r5, r5, r3
 80071e2:	2600      	movs	r6, #0
 80071e4:	341a      	adds	r4, #26
 80071e6:	42b5      	cmp	r5, r6
 80071e8:	d11a      	bne.n	8007220 <_printf_common+0xc8>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e008      	b.n	8007200 <_printf_common+0xa8>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4652      	mov	r2, sl
 80071f2:	4649      	mov	r1, r9
 80071f4:	4638      	mov	r0, r7
 80071f6:	47c0      	blx	r8
 80071f8:	3001      	adds	r0, #1
 80071fa:	d103      	bne.n	8007204 <_printf_common+0xac>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	3501      	adds	r5, #1
 8007206:	e7c6      	b.n	8007196 <_printf_common+0x3e>
 8007208:	18e1      	adds	r1, r4, r3
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	2030      	movs	r0, #48	; 0x30
 800720e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007212:	4422      	add	r2, r4
 8007214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800721c:	3302      	adds	r3, #2
 800721e:	e7c7      	b.n	80071b0 <_printf_common+0x58>
 8007220:	2301      	movs	r3, #1
 8007222:	4622      	mov	r2, r4
 8007224:	4649      	mov	r1, r9
 8007226:	4638      	mov	r0, r7
 8007228:	47c0      	blx	r8
 800722a:	3001      	adds	r0, #1
 800722c:	d0e6      	beq.n	80071fc <_printf_common+0xa4>
 800722e:	3601      	adds	r6, #1
 8007230:	e7d9      	b.n	80071e6 <_printf_common+0x8e>
	...

08007234 <_printf_i>:
 8007234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	460c      	mov	r4, r1
 800723a:	4691      	mov	r9, r2
 800723c:	7e27      	ldrb	r7, [r4, #24]
 800723e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007240:	2f78      	cmp	r7, #120	; 0x78
 8007242:	4680      	mov	r8, r0
 8007244:	469a      	mov	sl, r3
 8007246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800724a:	d807      	bhi.n	800725c <_printf_i+0x28>
 800724c:	2f62      	cmp	r7, #98	; 0x62
 800724e:	d80a      	bhi.n	8007266 <_printf_i+0x32>
 8007250:	2f00      	cmp	r7, #0
 8007252:	f000 80d8 	beq.w	8007406 <_printf_i+0x1d2>
 8007256:	2f58      	cmp	r7, #88	; 0x58
 8007258:	f000 80a3 	beq.w	80073a2 <_printf_i+0x16e>
 800725c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007264:	e03a      	b.n	80072dc <_printf_i+0xa8>
 8007266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800726a:	2b15      	cmp	r3, #21
 800726c:	d8f6      	bhi.n	800725c <_printf_i+0x28>
 800726e:	a001      	add	r0, pc, #4	; (adr r0, 8007274 <_printf_i+0x40>)
 8007270:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007274:	080072cd 	.word	0x080072cd
 8007278:	080072e1 	.word	0x080072e1
 800727c:	0800725d 	.word	0x0800725d
 8007280:	0800725d 	.word	0x0800725d
 8007284:	0800725d 	.word	0x0800725d
 8007288:	0800725d 	.word	0x0800725d
 800728c:	080072e1 	.word	0x080072e1
 8007290:	0800725d 	.word	0x0800725d
 8007294:	0800725d 	.word	0x0800725d
 8007298:	0800725d 	.word	0x0800725d
 800729c:	0800725d 	.word	0x0800725d
 80072a0:	080073ed 	.word	0x080073ed
 80072a4:	08007311 	.word	0x08007311
 80072a8:	080073cf 	.word	0x080073cf
 80072ac:	0800725d 	.word	0x0800725d
 80072b0:	0800725d 	.word	0x0800725d
 80072b4:	0800740f 	.word	0x0800740f
 80072b8:	0800725d 	.word	0x0800725d
 80072bc:	08007311 	.word	0x08007311
 80072c0:	0800725d 	.word	0x0800725d
 80072c4:	0800725d 	.word	0x0800725d
 80072c8:	080073d7 	.word	0x080073d7
 80072cc:	680b      	ldr	r3, [r1, #0]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	600a      	str	r2, [r1, #0]
 80072d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072dc:	2301      	movs	r3, #1
 80072de:	e0a3      	b.n	8007428 <_printf_i+0x1f4>
 80072e0:	6825      	ldr	r5, [r4, #0]
 80072e2:	6808      	ldr	r0, [r1, #0]
 80072e4:	062e      	lsls	r6, r5, #24
 80072e6:	f100 0304 	add.w	r3, r0, #4
 80072ea:	d50a      	bpl.n	8007302 <_printf_i+0xce>
 80072ec:	6805      	ldr	r5, [r0, #0]
 80072ee:	600b      	str	r3, [r1, #0]
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	da03      	bge.n	80072fc <_printf_i+0xc8>
 80072f4:	232d      	movs	r3, #45	; 0x2d
 80072f6:	426d      	negs	r5, r5
 80072f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072fc:	485e      	ldr	r0, [pc, #376]	; (8007478 <_printf_i+0x244>)
 80072fe:	230a      	movs	r3, #10
 8007300:	e019      	b.n	8007336 <_printf_i+0x102>
 8007302:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007306:	6805      	ldr	r5, [r0, #0]
 8007308:	600b      	str	r3, [r1, #0]
 800730a:	bf18      	it	ne
 800730c:	b22d      	sxthne	r5, r5
 800730e:	e7ef      	b.n	80072f0 <_printf_i+0xbc>
 8007310:	680b      	ldr	r3, [r1, #0]
 8007312:	6825      	ldr	r5, [r4, #0]
 8007314:	1d18      	adds	r0, r3, #4
 8007316:	6008      	str	r0, [r1, #0]
 8007318:	0628      	lsls	r0, r5, #24
 800731a:	d501      	bpl.n	8007320 <_printf_i+0xec>
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	e002      	b.n	8007326 <_printf_i+0xf2>
 8007320:	0669      	lsls	r1, r5, #25
 8007322:	d5fb      	bpl.n	800731c <_printf_i+0xe8>
 8007324:	881d      	ldrh	r5, [r3, #0]
 8007326:	4854      	ldr	r0, [pc, #336]	; (8007478 <_printf_i+0x244>)
 8007328:	2f6f      	cmp	r7, #111	; 0x6f
 800732a:	bf0c      	ite	eq
 800732c:	2308      	moveq	r3, #8
 800732e:	230a      	movne	r3, #10
 8007330:	2100      	movs	r1, #0
 8007332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007336:	6866      	ldr	r6, [r4, #4]
 8007338:	60a6      	str	r6, [r4, #8]
 800733a:	2e00      	cmp	r6, #0
 800733c:	bfa2      	ittt	ge
 800733e:	6821      	ldrge	r1, [r4, #0]
 8007340:	f021 0104 	bicge.w	r1, r1, #4
 8007344:	6021      	strge	r1, [r4, #0]
 8007346:	b90d      	cbnz	r5, 800734c <_printf_i+0x118>
 8007348:	2e00      	cmp	r6, #0
 800734a:	d04d      	beq.n	80073e8 <_printf_i+0x1b4>
 800734c:	4616      	mov	r6, r2
 800734e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007352:	fb03 5711 	mls	r7, r3, r1, r5
 8007356:	5dc7      	ldrb	r7, [r0, r7]
 8007358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800735c:	462f      	mov	r7, r5
 800735e:	42bb      	cmp	r3, r7
 8007360:	460d      	mov	r5, r1
 8007362:	d9f4      	bls.n	800734e <_printf_i+0x11a>
 8007364:	2b08      	cmp	r3, #8
 8007366:	d10b      	bne.n	8007380 <_printf_i+0x14c>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07df      	lsls	r7, r3, #31
 800736c:	d508      	bpl.n	8007380 <_printf_i+0x14c>
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	6861      	ldr	r1, [r4, #4]
 8007372:	4299      	cmp	r1, r3
 8007374:	bfde      	ittt	le
 8007376:	2330      	movle	r3, #48	; 0x30
 8007378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800737c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007380:	1b92      	subs	r2, r2, r6
 8007382:	6122      	str	r2, [r4, #16]
 8007384:	f8cd a000 	str.w	sl, [sp]
 8007388:	464b      	mov	r3, r9
 800738a:	aa03      	add	r2, sp, #12
 800738c:	4621      	mov	r1, r4
 800738e:	4640      	mov	r0, r8
 8007390:	f7ff fee2 	bl	8007158 <_printf_common>
 8007394:	3001      	adds	r0, #1
 8007396:	d14c      	bne.n	8007432 <_printf_i+0x1fe>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800739c:	b004      	add	sp, #16
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	4835      	ldr	r0, [pc, #212]	; (8007478 <_printf_i+0x244>)
 80073a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	680e      	ldr	r6, [r1, #0]
 80073ac:	061f      	lsls	r7, r3, #24
 80073ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80073b2:	600e      	str	r6, [r1, #0]
 80073b4:	d514      	bpl.n	80073e0 <_printf_i+0x1ac>
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	bf44      	itt	mi
 80073ba:	f043 0320 	orrmi.w	r3, r3, #32
 80073be:	6023      	strmi	r3, [r4, #0]
 80073c0:	b91d      	cbnz	r5, 80073ca <_printf_i+0x196>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	f023 0320 	bic.w	r3, r3, #32
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	2310      	movs	r3, #16
 80073cc:	e7b0      	b.n	8007330 <_printf_i+0xfc>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	f043 0320 	orr.w	r3, r3, #32
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	2378      	movs	r3, #120	; 0x78
 80073d8:	4828      	ldr	r0, [pc, #160]	; (800747c <_printf_i+0x248>)
 80073da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073de:	e7e3      	b.n	80073a8 <_printf_i+0x174>
 80073e0:	065e      	lsls	r6, r3, #25
 80073e2:	bf48      	it	mi
 80073e4:	b2ad      	uxthmi	r5, r5
 80073e6:	e7e6      	b.n	80073b6 <_printf_i+0x182>
 80073e8:	4616      	mov	r6, r2
 80073ea:	e7bb      	b.n	8007364 <_printf_i+0x130>
 80073ec:	680b      	ldr	r3, [r1, #0]
 80073ee:	6826      	ldr	r6, [r4, #0]
 80073f0:	6960      	ldr	r0, [r4, #20]
 80073f2:	1d1d      	adds	r5, r3, #4
 80073f4:	600d      	str	r5, [r1, #0]
 80073f6:	0635      	lsls	r5, r6, #24
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	d501      	bpl.n	8007400 <_printf_i+0x1cc>
 80073fc:	6018      	str	r0, [r3, #0]
 80073fe:	e002      	b.n	8007406 <_printf_i+0x1d2>
 8007400:	0671      	lsls	r1, r6, #25
 8007402:	d5fb      	bpl.n	80073fc <_printf_i+0x1c8>
 8007404:	8018      	strh	r0, [r3, #0]
 8007406:	2300      	movs	r3, #0
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	4616      	mov	r6, r2
 800740c:	e7ba      	b.n	8007384 <_printf_i+0x150>
 800740e:	680b      	ldr	r3, [r1, #0]
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	600a      	str	r2, [r1, #0]
 8007414:	681e      	ldr	r6, [r3, #0]
 8007416:	6862      	ldr	r2, [r4, #4]
 8007418:	2100      	movs	r1, #0
 800741a:	4630      	mov	r0, r6
 800741c:	f7f8 fed8 	bl	80001d0 <memchr>
 8007420:	b108      	cbz	r0, 8007426 <_printf_i+0x1f2>
 8007422:	1b80      	subs	r0, r0, r6
 8007424:	6060      	str	r0, [r4, #4]
 8007426:	6863      	ldr	r3, [r4, #4]
 8007428:	6123      	str	r3, [r4, #16]
 800742a:	2300      	movs	r3, #0
 800742c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007430:	e7a8      	b.n	8007384 <_printf_i+0x150>
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	4632      	mov	r2, r6
 8007436:	4649      	mov	r1, r9
 8007438:	4640      	mov	r0, r8
 800743a:	47d0      	blx	sl
 800743c:	3001      	adds	r0, #1
 800743e:	d0ab      	beq.n	8007398 <_printf_i+0x164>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	079b      	lsls	r3, r3, #30
 8007444:	d413      	bmi.n	800746e <_printf_i+0x23a>
 8007446:	68e0      	ldr	r0, [r4, #12]
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	4298      	cmp	r0, r3
 800744c:	bfb8      	it	lt
 800744e:	4618      	movlt	r0, r3
 8007450:	e7a4      	b.n	800739c <_printf_i+0x168>
 8007452:	2301      	movs	r3, #1
 8007454:	4632      	mov	r2, r6
 8007456:	4649      	mov	r1, r9
 8007458:	4640      	mov	r0, r8
 800745a:	47d0      	blx	sl
 800745c:	3001      	adds	r0, #1
 800745e:	d09b      	beq.n	8007398 <_printf_i+0x164>
 8007460:	3501      	adds	r5, #1
 8007462:	68e3      	ldr	r3, [r4, #12]
 8007464:	9903      	ldr	r1, [sp, #12]
 8007466:	1a5b      	subs	r3, r3, r1
 8007468:	42ab      	cmp	r3, r5
 800746a:	dcf2      	bgt.n	8007452 <_printf_i+0x21e>
 800746c:	e7eb      	b.n	8007446 <_printf_i+0x212>
 800746e:	2500      	movs	r5, #0
 8007470:	f104 0619 	add.w	r6, r4, #25
 8007474:	e7f5      	b.n	8007462 <_printf_i+0x22e>
 8007476:	bf00      	nop
 8007478:	080076dd 	.word	0x080076dd
 800747c:	080076ee 	.word	0x080076ee

08007480 <_sbrk_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4d06      	ldr	r5, [pc, #24]	; (800749c <_sbrk_r+0x1c>)
 8007484:	2300      	movs	r3, #0
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	602b      	str	r3, [r5, #0]
 800748c:	f7f9 fd90 	bl	8000fb0 <_sbrk>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d102      	bne.n	800749a <_sbrk_r+0x1a>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	b103      	cbz	r3, 800749a <_sbrk_r+0x1a>
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	20000ac0 	.word	0x20000ac0

080074a0 <__sread>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	f000 f8a0 	bl	80075ec <_read_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	bfab      	itete	ge
 80074b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074b2:	89a3      	ldrhlt	r3, [r4, #12]
 80074b4:	181b      	addge	r3, r3, r0
 80074b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ba:	bfac      	ite	ge
 80074bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074be:	81a3      	strhlt	r3, [r4, #12]
 80074c0:	bd10      	pop	{r4, pc}

080074c2 <__swrite>:
 80074c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	461f      	mov	r7, r3
 80074c8:	898b      	ldrh	r3, [r1, #12]
 80074ca:	05db      	lsls	r3, r3, #23
 80074cc:	4605      	mov	r5, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	4616      	mov	r6, r2
 80074d2:	d505      	bpl.n	80074e0 <__swrite+0x1e>
 80074d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d8:	2302      	movs	r3, #2
 80074da:	2200      	movs	r2, #0
 80074dc:	f000 f868 	bl	80075b0 <_lseek_r>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	4628      	mov	r0, r5
 80074f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f6:	f000 b817 	b.w	8007528 <_write_r>

080074fa <__sseek>:
 80074fa:	b510      	push	{r4, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007502:	f000 f855 	bl	80075b0 <_lseek_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	bf15      	itete	ne
 800750c:	6560      	strne	r0, [r4, #84]	; 0x54
 800750e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007516:	81a3      	strheq	r3, [r4, #12]
 8007518:	bf18      	it	ne
 800751a:	81a3      	strhne	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__sclose>:
 800751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007522:	f000 b813 	b.w	800754c <_close_r>
	...

08007528 <_write_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_write_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7f9 faae 	bl	8000a98 <_write>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_write_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_write_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000ac0 	.word	0x20000ac0

0800754c <_close_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d06      	ldr	r5, [pc, #24]	; (8007568 <_close_r+0x1c>)
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	f7f9 faca 	bl	8000af0 <_close>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_close_r+0x1a>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_close_r+0x1a>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20000ac0 	.word	0x20000ac0

0800756c <_fstat_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_fstat_r+0x20>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f7f9 fb09 	bl	8000b90 <_fstat>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d102      	bne.n	8007588 <_fstat_r+0x1c>
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	b103      	cbz	r3, 8007588 <_fstat_r+0x1c>
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	bd38      	pop	{r3, r4, r5, pc}
 800758a:	bf00      	nop
 800758c:	20000ac0 	.word	0x20000ac0

08007590 <_isatty_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_isatty_r+0x1c>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7f9 fa66 	bl	8000a6c <_isatty>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_isatty_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_isatty_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000ac0 	.word	0x20000ac0

080075b0 <_lseek_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_lseek_r+0x20>)
 80075b4:	4604      	mov	r4, r0
 80075b6:	4608      	mov	r0, r1
 80075b8:	4611      	mov	r1, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7f9 faad 	bl	8000b1e <_lseek>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_lseek_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_lseek_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000ac0 	.word	0x20000ac0

080075d4 <__malloc_lock>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__malloc_lock+0x8>)
 80075d6:	f7ff bb4d 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 80075da:	bf00      	nop
 80075dc:	20000ab8 	.word	0x20000ab8

080075e0 <__malloc_unlock>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__malloc_unlock+0x8>)
 80075e2:	f7ff bb48 	b.w	8006c76 <__retarget_lock_release_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000ab8 	.word	0x20000ab8

080075ec <_read_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	; (800760c <_read_r+0x20>)
 80075f0:	4604      	mov	r4, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7f9 faa0 	bl	8000b40 <_read>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_read_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_read_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000ac0 	.word	0x20000ac0

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
