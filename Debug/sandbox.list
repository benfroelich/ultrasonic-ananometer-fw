
sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ac  080061ac  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080061ac  080061ac  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061ac  080061ac  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080061b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000088  0800623c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800623c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010374  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a0  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  000326d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf31  00000000  00000000  000339f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1f9  00000000  00000000  00050929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4982  00000000  00000000  0005eb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001034a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb8  00000000  00000000  001034f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060bc 	.word	0x080060bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080060bc 	.word	0x080060bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fc85 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f867 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 800027e:	f000 f949 	bl	8000514 <MX_DMA_Init>
  MX_GPIO_Init();
 8000282:	f000 f96d 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f915 	bl	80004b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800028a:	f000 f8b7 	bl	80003fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800028e:	482b      	ldr	r0, [pc, #172]	; (800033c <main+0xcc>)
 8000290:	f000 f9e8 	bl	8000664 <RetargetInit>
  //uhADCxConvertedData_Voltage_mVolt = VAR_CONVERTED_DATA_INIT_VALUE;
  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000294:	2100      	movs	r1, #0
 8000296:	482a      	ldr	r0, [pc, #168]	; (8000340 <main+0xd0>)
 8000298:	f001 f98c 	bl	80015b4 <HAL_ADCEx_Calibration_Start>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <main+0x36>
  {
    Error_Handler();
 80002a2:	f000 f9d9 	bl	8000658 <Error_Handler>
  }

  /* User start transmission data through "TxBuffer" buffer */
  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 80002a6:	2217      	movs	r2, #23
 80002a8:	4926      	ldr	r1, [pc, #152]	; (8000344 <main+0xd4>)
 80002aa:	4824      	ldr	r0, [pc, #144]	; (800033c <main+0xcc>)
 80002ac:	f003 feca 	bl	8004044 <HAL_UART_Transmit_DMA>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0x4a>
  {
	/* Transfer error in transmission process */
	Error_Handler();
 80002b6:	f000 f9cf 	bl	8000658 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {}
 80002ba:	bf00      	nop
 80002bc:	481f      	ldr	r0, [pc, #124]	; (800033c <main+0xcc>)
 80002be:	f004 fa45 	bl	800474c <HAL_UART_GetState>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b20      	cmp	r3, #32
 80002c6:	d1f9      	bne.n	80002bc <main+0x4c>


      int n = 10;
 80002c8:	230a      	movs	r3, #10
 80002ca:	607b      	str	r3, [r7, #4]
      uint32_t adc_result = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
      for(int i = 0; i < n; i++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e024      	b.n	8000320 <main+0xb0>
      {
    	  while(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY));
 80002d6:	bf00      	nop
 80002d8:	4819      	ldr	r0, [pc, #100]	; (8000340 <main+0xd0>)
 80002da:	f000 fcd7 	bl	8000c8c <HAL_ADC_GetState>
 80002de:	4603      	mov	r3, r0
 80002e0:	f003 0302 	and.w	r3, r3, #2
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d0f7      	beq.n	80002d8 <main+0x68>
          // read from ADC
    	  if(HAL_ADC_Start(&hadc1) != HAL_OK) {Error_Handler();}
 80002e8:	4815      	ldr	r0, [pc, #84]	; (8000340 <main+0xd0>)
 80002ea:	f000 fe61 	bl	8000fb0 <HAL_ADC_Start>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <main+0x88>
 80002f4:	f000 f9b0 	bl	8000658 <Error_Handler>
    	  if(HAL_ADC_PollForConversion(&hadc1, 0xffff /*TODO*/) != HAL_OK) {Error_Handler();}
 80002f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002fc:	4810      	ldr	r0, [pc, #64]	; (8000340 <main+0xd0>)
 80002fe:	f000 fec5 	bl	800108c <HAL_ADC_PollForConversion>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <main+0x9c>
 8000308:	f000 f9a6 	bl	8000658 <Error_Handler>
          adc_result += HAL_ADC_GetValue(&hadc1);
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <main+0xd0>)
 800030e:	f000 ff7b 	bl	8001208 <HAL_ADC_GetValue>
 8000312:	4602      	mov	r2, r0
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	4413      	add	r3, r2
 8000318:	60bb      	str	r3, [r7, #8]
      for(int i = 0; i < n; i++)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3301      	adds	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbd6      	blt.n	80002d6 <main+0x66>
      }
      adc_result /= n;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000330:	60bb      	str	r3, [r7, #8]
      printf("t=%d\r\n", adc_result);
 8000332:	68b9      	ldr	r1, [r7, #8]
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <main+0xd8>)
 8000336:	f004 fe9d 	bl	8005074 <iprintf>
  {
 800033a:	e7be      	b.n	80002ba <main+0x4a>
 800033c:	20000194 	.word	0x20000194
 8000340:	200000f4 	.word	0x200000f4
 8000344:	20000000 	.word	0x20000000
 8000348:	080060d4 	.word	0x080060d4

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b09c      	sub	sp, #112	; 0x70
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 fe82 	bl	8005064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2234      	movs	r2, #52	; 0x34
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f004 fe74 	bl	8005064 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037c:	2302      	movs	r3, #2
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	2310      	movs	r3, #16
 8000386:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	2302      	movs	r3, #2
 800038a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038c:	2300      	movs	r3, #0
 800038e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000390:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000394:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800039a:	4618      	mov	r0, r3
 800039c:	f002 f9ce 	bl	800273c <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003a6:	f000 f957 	bl	8000658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2302      	movs	r3, #2
 80003b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003c4:	2102      	movs	r1, #2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 f8c0 	bl	800354c <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003d2:	f000 f941 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 80003d6:	2380      	movs	r3, #128	; 0x80
 80003d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80003da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e0:	463b      	mov	r3, r7
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 fae8 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003ee:	f000 f933 	bl	8000658 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3770      	adds	r7, #112	; 0x70
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	463b      	mov	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000412:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800043c:	2200      	movs	r2, #0
 800043e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000442:	2201      	movs	r2, #1
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800044e:	2201      	movs	r2, #1
 8000450:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800045c:	2204      	movs	r2, #4
 800045e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_ADC1_Init+0xb4>)
 8000468:	2200      	movs	r2, #0
 800046a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046c:	4810      	ldr	r0, [pc, #64]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800046e:	f000 fc19 	bl	8000ca4 <HAL_ADC_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000478:	f000 f8ee 	bl	8000658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800047c:	2301      	movs	r3, #1
 800047e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000480:	2301      	movs	r3, #1
 8000482:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000494:	463b      	mov	r3, r7
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_ADC1_Init+0xb4>)
 800049a:	f001 f925 	bl	80016e8 <HAL_ADC_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80004a4:	f000 f8d8 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000f4 	.word	0x200000f4

080004b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ba:	4a15      	ldr	r2, [pc, #84]	; (8000510 <MX_USART2_UART_Init+0x5c>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004f8:	f003 fbf0 	bl	8003cdc <HAL_UART_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f8a9 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000194 	.word	0x20000194
 8000510:	40004400 	.word	0x40004400

08000514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_DMA_Init+0x48>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <MX_DMA_Init+0x48>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MX_DMA_Init+0x48>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	2010      	movs	r0, #16
 8000538:	f001 fd31 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800053c:	2010      	movs	r0, #16
 800053e:	f001 fd4a 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	2011      	movs	r0, #17
 8000548:	f001 fd29 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800054c:	2011      	movs	r0, #17
 800054e:	f001 fd42 	bl	8001fd6 <HAL_NVIC_EnableIRQ>

}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a24      	ldr	r2, [pc, #144]	; (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <MX_GPIO_Init+0xc8>)
 80005de:	f002 f895 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <MX_GPIO_Init+0xcc>)
 80005fa:	f001 ff15 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_GPIO_Init+0xc8>)
 8000618:	f001 ff06 	bl	8002428 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000400 	.word	0x48000400
 800062c:	48000800 	.word	0x48000800

08000630 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <RetargetInit+0x28>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RetargetInit+0x2c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	2300      	movs	r3, #0
 800067a:	2202      	movs	r2, #2
 800067c:	2100      	movs	r1, #0
 800067e:	f004 fd11 	bl	80050a4 <setvbuf>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000218 	.word	0x20000218
 8000690:	20000024 	.word	0x20000024

08000694 <_isatty>:

int _isatty(int fd) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db04      	blt.n	80006ac <_isatty+0x18>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dc01      	bgt.n	80006ac <_isatty+0x18>
    return 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e005      	b.n	80006b8 <_isatty+0x24>

  errno = EBADF;
 80006ac:	f004 fcb0 	bl	8005010 <__errno>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2209      	movs	r2, #9
 80006b4:	601a      	str	r2, [r3, #0]
  return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_write>:

int _write(int fd, char* ptr, int len) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d002      	beq.n	80006d8 <_write+0x18>
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d111      	bne.n	80006fc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <_write+0x54>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	f003 fb47 	bl	8003d78 <HAL_UART_Transmit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <_write+0x38>
      return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	e008      	b.n	800070a <_write+0x4a>
    else
      return EIO;
 80006f8:	2305      	movs	r3, #5
 80006fa:	e006      	b.n	800070a <_write+0x4a>
  }
  errno = EBADF;
 80006fc:	f004 fc88 	bl	8005010 <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	2209      	movs	r2, #9
 8000704:	601a      	str	r2, [r3, #0]
  return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000218 	.word	0x20000218

08000718 <_close>:

int _close(int fd) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db04      	blt.n	8000730 <_close+0x18>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b02      	cmp	r3, #2
 800072a:	dc01      	bgt.n	8000730 <_close+0x18>
    return 0;
 800072c:	2300      	movs	r3, #0
 800072e:	e006      	b.n	800073e <_close+0x26>

  errno = EBADF;
 8000730:	f004 fc6e 	bl	8005010 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	2209      	movs	r2, #9
 8000738:	601a      	str	r2, [r3, #0]
  return -1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000752:	f004 fc5d 	bl	8005010 <__errno>
 8000756:	4603      	mov	r3, r0
 8000758:	2209      	movs	r2, #9
 800075a:	601a      	str	r2, [r3, #0]
  return -1;
 800075c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_read>:

int _read(int fd, char* ptr, int len) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d110      	bne.n	800079c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <_read+0x4c>)
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000782:	2201      	movs	r2, #1
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	f003 fb8b 	bl	8003ea0 <HAL_UART_Receive>
 800078a:	4603      	mov	r3, r0
 800078c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <_read+0x30>
      return 1;
 8000794:	2301      	movs	r3, #1
 8000796:	e008      	b.n	80007aa <_read+0x42>
    else
      return EIO;
 8000798:	2305      	movs	r3, #5
 800079a:	e006      	b.n	80007aa <_read+0x42>
  }
  errno = EBADF;
 800079c:	f004 fc38 	bl	8005010 <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2209      	movs	r2, #9
 80007a4:	601a      	str	r2, [r3, #0]
  return -1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000218 	.word	0x20000218

080007b8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db08      	blt.n	80007da <_fstat+0x22>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	dc05      	bgt.n	80007da <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d4:	605a      	str	r2, [r3, #4]
    return 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e005      	b.n	80007e6 <_fstat+0x2e>
  }

  errno = EBADF;
 80007da:	f004 fc19 	bl	8005010 <__errno>
 80007de:	4603      	mov	r3, r0
 80007e0:	2209      	movs	r2, #9
 80007e2:	601a      	str	r2, [r3, #0]
  return 0;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x44>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000826:	2007      	movs	r0, #7
 8000828:	f001 fbae 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000858:	d12c      	bne.n	80008b4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_ADC_MspInit+0x84>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088a:	2301      	movs	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f001 fdc2 	bl	8002428 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2012      	movs	r0, #18
 80008aa:	f001 fb78 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80008ae:	2012      	movs	r0, #18
 80008b0:	f001 fb91 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a41      	ldr	r2, [pc, #260]	; (80009e4 <HAL_UART_MspInit+0x124>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d17c      	bne.n	80009dc <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <HAL_UART_MspInit+0x128>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_UART_MspInit+0x128>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <HAL_UART_MspInit+0x128>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <HAL_UART_MspInit+0x128>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a3a      	ldr	r2, [pc, #232]	; (80009e8 <HAL_UART_MspInit+0x128>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <HAL_UART_MspInit+0x128>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000912:	230c      	movs	r3, #12
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000922:	2307      	movs	r3, #7
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f001 fd7a 	bl	8002428 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000936:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <HAL_UART_MspInit+0x130>)
 8000938:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <HAL_UART_MspInit+0x12c>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <HAL_UART_MspInit+0x12c>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <HAL_UART_MspInit+0x12c>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000966:	f001 fb50 	bl	800200a <HAL_DMA_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000970:	f7ff fe72 	bl	8000658 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_UART_MspInit+0x12c>)
 8000978:	671a      	str	r2, [r3, #112]	; 0x70
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <HAL_UART_MspInit+0x12c>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_UART_MspInit+0x134>)
 8000982:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_UART_MspInit+0x138>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_UART_MspInit+0x134>)
 8000988:	2210      	movs	r2, #16
 800098a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0x134>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x134>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0x134>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x134>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_UART_MspInit+0x134>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_UART_MspInit+0x134>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x134>)
 80009b2:	f001 fb2a 	bl	800200a <HAL_DMA_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80009bc:	f7ff fe4c 	bl	8000658 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <HAL_UART_MspInit+0x134>)
 80009c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HAL_UART_MspInit+0x134>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2026      	movs	r0, #38	; 0x26
 80009d2:	f001 fae4 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f001 fafd 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	200000b0 	.word	0x200000b0
 80009f0:	4002006c 	.word	0x4002006c
 80009f4:	20000144 	.word	0x20000144
 80009f8:	40020080 	.word	0x40020080

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8e2 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DMA1_Channel6_IRQHandler+0x10>)
 8000a56:	f001 fbf5 	bl	8002244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000b0 	.word	0x200000b0

08000a64 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <DMA1_Channel7_IRQHandler+0x10>)
 8000a6a:	f001 fbeb 	bl	8002244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000144 	.word	0x20000144

08000a78 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <ADC1_IRQHandler+0x10>)
 8000a7e:	f000 fbd1 	bl	8001224 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000f4 	.word	0x200000f4

08000a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <USART2_IRQHandler+0x10>)
 8000a92:	f003 fb67 	bl	8004164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000194 	.word	0x20000194

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f004 fa9e 	bl	8005010 <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20004000 	.word	0x20004000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	200000a4 	.word	0x200000a4
 8000b08:	20000230 	.word	0x20000230

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5a:	f7ff ffd7 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f004 fa5d 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fb85 	bl	8000270 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b68:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b74:	080061b4 	.word	0x080061b4
  ldr r2, =_sbss
 8000b78:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b7c:	20000230 	.word	0x20000230

08000b80 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <CAN_RX1_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x28>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f001 f9f7 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe26 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fa0f 	bl	8001ff2 <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f001 f9d7 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000018 	.word	0x20000018
 8000c08:	20000020 	.word	0x20000020
 8000c0c:	2000001c 	.word	0x2000001c

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000020 	.word	0x20000020
 8000c34:	2000021c 	.word	0x2000021c

08000c38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000021c 	.word	0x2000021c

08000c50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09a      	sub	sp, #104	; 0x68
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e169      	b.n	8000f98 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d176      	bne.n	8000dc4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d152      	bne.n	8000d84 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fd9d 	bl	8000838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d13b      	bne.n	8000d84 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f001 f805 	bl	8001d1c <ADC_Disable>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d12f      	bne.n	8000d84 <HAL_ADC_Init+0xe0>
 8000d24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d12b      	bne.n	8000d84 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d34:	f023 0302 	bic.w	r3, r3, #2
 8000d38:	f043 0202 	orr.w	r2, r3, #2
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d4e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d60:	4b8f      	ldr	r3, [pc, #572]	; (8000fa0 <HAL_ADC_Init+0x2fc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a8f      	ldr	r2, [pc, #572]	; (8000fa4 <HAL_ADC_Init+0x300>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9a      	lsrs	r2, r3, #18
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d76:	e002      	b.n	8000d7e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f9      	bne.n	8000d78 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d007      	beq.n	8000da2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000da0:	d110      	bne.n	8000dc4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f023 0312 	bic.w	r3, r3, #18
 8000daa:	f043 0210 	orr.w	r2, r3, #16
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f043 0201 	orr.w	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f040 80d6 	bne.w	8000f7e <HAL_ADC_Init+0x2da>
 8000dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 80d1 	bne.w	8000f7e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 80c9 	bne.w	8000f7e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000df4:	f043 0202 	orr.w	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dfc:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <HAL_ADC_Init+0x304>)
 8000dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <HAL_ADC_Init+0x180>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_ADC_Init+0x180>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_ADC_Init+0x182>
 8000e24:	2300      	movs	r3, #0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d11c      	bne.n	8000e64 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d010      	beq.n	8000e52 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d107      	bne.n	8000e4c <HAL_ADC_Init+0x1a8>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <HAL_ADC_Init+0x1a8>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <HAL_ADC_Init+0x1aa>
 8000e4c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d108      	bne.n	8000e64 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e62:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7e5b      	ldrb	r3, [r3, #25]
 8000e68:	035b      	lsls	r3, r3, #13
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d002      	beq.n	8000e78 <HAL_ADC_Init+0x1d4>
 8000e72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e76:	e000      	b.n	8000e7a <HAL_ADC_Init+0x1d6>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d11b      	bne.n	8000ed0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e5b      	ldrb	r3, [r3, #25]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	045a      	lsls	r2, r3, #17
 8000ea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8000eb2:	e00d      	b.n	8000ed0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ebc:	f043 0220 	orr.w	r2, r3, #32
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	f043 0201 	orr.w	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d007      	beq.n	8000ee8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 030c 	and.w	r3, r3, #12
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d114      	bne.n	8000f20 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f04:	f023 0302 	bic.w	r3, r3, #2
 8000f08:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7e1b      	ldrb	r3, [r3, #24]
 8000f0e:	039a      	lsls	r2, r3, #14
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_ADC_Init+0x308>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f30:	430b      	orrs	r3, r1
 8000f32:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10c      	bne.n	8000f56 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f023 010f 	bic.w	r1, r3, #15
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
 8000f54:	e007      	b.n	8000f66 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 020f 	bic.w	r2, r2, #15
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f023 0303 	bic.w	r3, r3, #3
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7c:	e00a      	b.n	8000f94 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f023 0312 	bic.w	r3, r3, #18
 8000f86:	f043 0210 	orr.w	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3768      	adds	r7, #104	; 0x68
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000018 	.word	0x20000018
 8000fa4:	431bde83 	.word	0x431bde83
 8000fa8:	50000300 	.word	0x50000300
 8000fac:	fff0c007 	.word	0xfff0c007

08000fb0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d158      	bne.n	800107c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_ADC_Start+0x28>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e054      	b.n	8001082 <HAL_ADC_Start+0xd2>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fe37 	bl	8001c54 <ADC_Enable>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d140      	bne.n	8001072 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001026:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800103a:	d106      	bne.n	800104a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f023 0206 	bic.w	r2, r3, #6
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
 8001048:	e002      	b.n	8001050 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	221c      	movs	r2, #28
 800105e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0204 	orr.w	r2, r2, #4
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	e006      	b.n	8001080 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800107a:	e001      	b.n	8001080 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800107c:	2302      	movs	r3, #2
 800107e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d102      	bne.n	80010a8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010a2:	2308      	movs	r3, #8
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e02e      	b.n	8001106 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <HAL_ADC_PollForConversion+0x178>)
 80010aa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d112      	bne.n	80010de <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d11d      	bne.n	8001102 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f043 0220 	orr.w	r2, r3, #32
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e08d      	b.n	80011fa <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f043 0220 	orr.w	r2, r3, #32
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e07b      	b.n	80011fa <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001102:	230c      	movs	r3, #12
 8001104:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800110e:	f7ff fd93 	bl	8000c38 <HAL_GetTick>
 8001112:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001114:	e021      	b.n	800115a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800111c:	d01d      	beq.n	800115a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_ADC_PollForConversion+0xa8>
 8001124:	f7ff fd88 	bl	8000c38 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d212      	bcs.n	800115a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10b      	bne.n	800115a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f043 0204 	orr.w	r2, r3, #4
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e04f      	b.n	80011fa <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0d6      	beq.n	8001116 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800117e:	2b00      	cmp	r3, #0
 8001180:	d131      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001188:	2b00      	cmp	r3, #0
 800118a:	d12c      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b08      	cmp	r3, #8
 8001198:	d125      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d112      	bne.n	80011ce <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d112      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
 80011cc:	e00b      	b.n	80011e6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f043 0220 	orr.w	r2, r3, #32
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	50000300 	.word	0x50000300

08001208 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b04      	cmp	r3, #4
 8001244:	d106      	bne.n	8001254 <HAL_ADC_IRQHandler+0x30>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00d      	beq.n	8001270 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800125e:	2b08      	cmp	r3, #8
 8001260:	d15e      	bne.n	8001320 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b08      	cmp	r3, #8
 800126e:	d157      	bne.n	8001320 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800129a:	2b00      	cmp	r3, #0
 800129c:	d139      	bne.n	8001312 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d134      	bne.n	8001312 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d12d      	bne.n	8001312 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11a      	bne.n	80012fa <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020c 	bic.w	r2, r2, #12
 80012d2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d112      	bne.n	8001312 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f043 0201 	orr.w	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
 80012f8:	e00b      	b.n	8001312 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0210 	orr.w	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fc9c 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	220c      	movs	r2, #12
 800131e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b20      	cmp	r3, #32
 800132c:	d106      	bne.n	800133c <HAL_ADC_IRQHandler+0x118>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b20      	cmp	r3, #32
 800133a:	d00d      	beq.n	8001358 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001346:	2b40      	cmp	r3, #64	; 0x40
 8001348:	d16d      	bne.n	8001426 <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001354:	2b40      	cmp	r3, #64	; 0x40
 8001356:	d166      	bne.n	8001426 <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d14e      	bne.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <HAL_ADC_IRQHandler+0x178>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800138e:	2b00      	cmp	r3, #0
 8001390:	d142      	bne.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001398:	2b00      	cmp	r3, #0
 800139a:	d13d      	bne.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d136      	bne.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d12d      	bne.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11a      	bne.n	8001400 <HAL_ADC_IRQHandler+0x1dc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013d8:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d112      	bne.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
 80013fe:	e00b      	b.n	8001418 <HAL_ADC_IRQHandler+0x1f4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f93d 	bl	8001698 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2260      	movs	r2, #96	; 0x60
 8001424:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001430:	2b80      	cmp	r3, #128	; 0x80
 8001432:	d113      	bne.n	800145c <HAL_ADC_IRQHandler+0x238>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	2b80      	cmp	r3, #128	; 0x80
 8001440:	d10c      	bne.n	800145c <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fc08 	bl	8000c64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	d115      	bne.n	8001498 <HAL_ADC_IRQHandler+0x274>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800147a:	d10d      	bne.n	8001498 <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f919 	bl	80016c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001496:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a6:	d115      	bne.n	80014d4 <HAL_ADC_IRQHandler+0x2b0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b6:	d10d      	bne.n	80014d4 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f905 	bl	80016d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d13d      	bne.n	800155e <HAL_ADC_IRQHandler+0x33a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d136      	bne.n	800155e <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e019      	b.n	8001532 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <HAL_ADC_IRQHandler+0x38c>)
 8001500:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10a      	bne.n	8001532 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e007      	b.n	8001532 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d10e      	bne.n	8001556 <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f043 0202 	orr.w	r2, r3, #2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fb91 	bl	8000c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2210      	movs	r2, #16
 800155c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156c:	d11b      	bne.n	80015a6 <HAL_ADC_IRQHandler+0x382>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d113      	bne.n	80015a6 <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f043 0208 	orr.w	r2, r3, #8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f883 	bl	80016ac <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	50000300 	.word	0x50000300

080015b4 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADCEx_Calibration_Start+0x1c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e05f      	b.n	8001690 <HAL_ADCEx_Calibration_Start+0xdc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fb9f 	bl	8001d1c <ADC_Disable>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d14e      	bne.n	8001686 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80015fc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001612:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001622:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001624:	f7ff fb08 	bl	8000c38 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800162a:	e01c      	b.n	8001666 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800162c:	f7ff fb04 	bl	8000c38 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b0a      	cmp	r3, #10
 8001638:	d915      	bls.n	8001666 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001648:	d10d      	bne.n	8001666 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f023 0312 	bic.w	r3, r3, #18
 8001652:	f043 0210 	orr.w	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e014      	b.n	8001690 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001674:	d0da      	beq.n	800162c <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b09b      	sub	sp, #108	; 0x6c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_ConfigChannel+0x22>
 8001706:	2302      	movs	r3, #2
 8001708:	e299      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x556>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 827d 	bne.w	8001c1c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b04      	cmp	r3, #4
 8001728:	d81c      	bhi.n	8001764 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	461a      	mov	r2, r3
 800173e:	231f      	movs	r3, #31
 8001740:	4093      	lsls	r3, r2
 8001742:	43db      	mvns	r3, r3
 8001744:	4019      	ands	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
 8001762:	e063      	b.n	800182c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d81e      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	3b1e      	subs	r3, #30
 8001780:	221f      	movs	r2, #31
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	4019      	ands	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	3b1e      	subs	r3, #30
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
 80017a8:	e040      	b.n	800182c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b0e      	cmp	r3, #14
 80017b0:	d81e      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	3b3c      	subs	r3, #60	; 0x3c
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	3b3c      	subs	r3, #60	; 0x3c
 80017e2:	fa00 f203 	lsl.w	r2, r0, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
 80017ee:	e01d      	b.n	800182c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	3b5a      	subs	r3, #90	; 0x5a
 8001804:	221f      	movs	r2, #31
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	4019      	ands	r1, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	3b5a      	subs	r3, #90	; 0x5a
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80e5 	bne.w	8001a06 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d91c      	bls.n	800187e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6999      	ldr	r1, [r3, #24]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	3b1e      	subs	r3, #30
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	3b1e      	subs	r3, #30
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	619a      	str	r2, [r3, #24]
 800187c:	e019      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6959      	ldr	r1, [r3, #20]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	2207      	movs	r2, #7
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6898      	ldr	r0, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d84f      	bhi.n	8001974 <HAL_ADC_ConfigChannel+0x28c>
 80018d4:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <HAL_ADC_ConfigChannel+0x1f4>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	0800190f 	.word	0x0800190f
 80018e4:	08001931 	.word	0x08001931
 80018e8:	08001953 	.word	0x08001953
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f2:	4b99      	ldr	r3, [pc, #612]	; (8001b58 <HAL_ADC_ConfigChannel+0x470>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	0691      	lsls	r1, r2, #26
 80018fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fe:	430a      	orrs	r2, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800190c:	e07e      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001914:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <HAL_ADC_ConfigChannel+0x470>)
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	0691      	lsls	r1, r2, #26
 800191e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001920:	430a      	orrs	r2, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800192e:	e06d      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001936:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_ADC_ConfigChannel+0x470>)
 8001938:	4013      	ands	r3, r2
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	0691      	lsls	r1, r2, #26
 8001940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001942:	430a      	orrs	r2, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800194e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001950:	e05c      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001958:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_ADC_ConfigChannel+0x470>)
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	0691      	lsls	r1, r2, #26
 8001962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001964:	430a      	orrs	r2, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001970:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001972:	e04b      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	069b      	lsls	r3, r3, #26
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001996:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800199e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	069b      	lsls	r3, r3, #26
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	069b      	lsls	r3, r3, #26
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d107      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019de:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	069b      	lsls	r3, r3, #26
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a02:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a04:	e001      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a0a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x344>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x344>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x346>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 80ff 	bne.w	8001c32 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d00f      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	400a      	ands	r2, r1
 8001a56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a5a:	e049      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b09      	cmp	r3, #9
 8001a7c:	d91c      	bls.n	8001ab8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6999      	ldr	r1, [r3, #24]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b1b      	subs	r3, #27
 8001a90:	2207      	movs	r2, #7
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4019      	ands	r1, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6898      	ldr	r0, [r3, #8]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b1b      	subs	r3, #27
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	619a      	str	r2, [r3, #24]
 8001ab6:	e01b      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6959      	ldr	r1, [r3, #20]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	2207      	movs	r2, #7
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4019      	ands	r1, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_ADC_ConfigChannel+0x474>)
 8001af2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d014      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b0c:	2b11      	cmp	r3, #17
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	f040 8086 	bne.w	8001c32 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d17f      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10d      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x478>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d106      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x478>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e005      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x47a>
 8001b56:	bf00      	nop
 8001b58:	83fff000 	.word	0x83fff000
 8001b5c:	50000300 	.word	0x50000300
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d150      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d010      	beq.n	8001b8e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x4a0>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x4a0>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x4a2>
 8001b88:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d13c      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d11d      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x4ea>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9e:	d118      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001baa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_ADC_ConfigChannel+0x564>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_ADC_ConfigChannel+0x568>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9a      	lsrs	r2, r3, #18
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc2:	e002      	b.n	8001bca <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bd0:	e02e      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b11      	cmp	r3, #17
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x50a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf0:	e01e      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d11a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c06:	e013      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c1a:	e00a      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c2e:	e000      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c30:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	376c      	adds	r7, #108	; 0x6c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000018 	.word	0x20000018
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <ADC_Enable+0x2c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <ADC_Enable+0x2c>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <ADC_Enable+0x2e>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d143      	bne.n	8001d0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <ADC_Enable+0xc4>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e02f      	b.n	8001d10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001cc0:	f7fe ffba 	bl	8000c38 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cc6:	e01b      	b.n	8001d00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc8:	f7fe ffb6 	bl	8000c38 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d914      	bls.n	8001d00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d00d      	beq.n	8001d00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e007      	b.n	8001d10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d1dc      	bne.n	8001cc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	8000003f 	.word	0x8000003f

08001d1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <ADC_Disable+0x2c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <ADC_Disable+0x2c>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <ADC_Disable+0x2e>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d047      	beq.n	8001dde <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030d 	and.w	r3, r3, #13
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10f      	bne.n	8001d7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0202 	orr.w	r2, r2, #2
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2203      	movs	r2, #3
 8001d72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d74:	f7fe ff60 	bl	8000c38 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d7a:	e029      	b.n	8001dd0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0210 	orr.w	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e023      	b.n	8001de0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d98:	f7fe ff4e 	bl	8000c38 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d914      	bls.n	8001dd0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10d      	bne.n	8001dd0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f043 0210 	orr.w	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e007      	b.n	8001de0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d0dc      	beq.n	8001d98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff3e 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff8e 	bl	8001edc <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5d 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff31 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffa2 	bl	8001f44 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e037      	b.n	8002090 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002036:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800203a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f9b8 	bl	80023e8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}  
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Start_IT+0x20>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e04a      	b.n	800214e <HAL_DMA_Start_IT+0xb6>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d13a      	bne.n	8002140 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f94b 	bl	800238a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 020e 	orr.w	r2, r2, #14
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e00f      	b.n	800212e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 020a 	orr.w	r2, r2, #10
 800211c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0204 	bic.w	r2, r2, #4
 800212c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e005      	b.n	800214c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002148:	2302      	movs	r3, #2
 800214a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800214c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002164:	2b02      	cmp	r3, #2
 8002166:	d008      	beq.n	800217a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2204      	movs	r2, #4
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e020      	b.n	80021bc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 020e 	bic.w	r2, r2, #14
 8002188:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d005      	beq.n	80021ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e027      	b.n	800223a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020e 	bic.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
    } 
  }
  return status;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2204      	movs	r2, #4
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d024      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x72>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01f      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2104      	movs	r1, #4
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d06a      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80022b4:	e065      	b.n	8002382 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2202      	movs	r2, #2
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02c      	beq.n	8002320 <HAL_DMA_IRQHandler+0xdc>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d027      	beq.n	8002320 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 020a 	bic.w	r2, r2, #10
 80022ec:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2102      	movs	r1, #2
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	2b00      	cmp	r3, #0
 8002314:	d035      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800231e:	e030      	b.n	8002382 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2208      	movs	r2, #8
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d028      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 020e 	bic.w	r2, r2, #14
 8002348:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
    }
  }
}  
 8002380:	e7ff      	b.n	8002382 <HAL_DMA_IRQHandler+0x13e>
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d108      	bne.n	80023ca <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023c8:	e007      	b.n	80023da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	60da      	str	r2, [r3, #12]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <DMA_CalcBaseAndBitshift+0x34>)
 80023f8:	4413      	add	r3, r2
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <DMA_CalcBaseAndBitshift+0x38>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a06      	ldr	r2, [pc, #24]	; (8002424 <DMA_CalcBaseAndBitshift+0x3c>)
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	bffdfff8 	.word	0xbffdfff8
 8002420:	cccccccd 	.word	0xcccccccd
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002436:	e14e      	b.n	80026d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8140 	beq.w	80026d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d005      	beq.n	8002468 <HAL_GPIO_Init+0x40>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d130      	bne.n	80024ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249e:	2201      	movs	r2, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0201 	and.w	r2, r3, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d017      	beq.n	8002506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d123      	bne.n	800255a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	6939      	ldr	r1, [r7, #16]
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 809a 	beq.w	80026d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259c:	4b55      	ldr	r3, [pc, #340]	; (80026f4 <HAL_GPIO_Init+0x2cc>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_GPIO_Init+0x2cc>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x2cc>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b4:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025de:	d013      	beq.n	8002608 <HAL_GPIO_Init+0x1e0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a46      	ldr	r2, [pc, #280]	; (80026fc <HAL_GPIO_Init+0x2d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_GPIO_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a45      	ldr	r2, [pc, #276]	; (8002700 <HAL_GPIO_Init+0x2d8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0x1d8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a44      	ldr	r2, [pc, #272]	; (8002704 <HAL_GPIO_Init+0x2dc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_GPIO_Init+0x1d4>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x1e2>
 80025fc:	2305      	movs	r3, #5
 80025fe:	e004      	b.n	800260a <HAL_GPIO_Init+0x1e2>
 8002600:	2302      	movs	r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x1e2>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_GPIO_Init+0x1e2>
 8002608:	2300      	movs	r3, #0
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4093      	lsls	r3, r2
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800261a:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002628:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800264c:	4a2e      	ldr	r2, [pc, #184]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026ca:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3301      	adds	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f47f aea9 	bne.w	8002438 <HAL_GPIO_Init+0x10>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010000 	.word	0x40010000
 80026fc:	48000400 	.word	0x48000400
 8002700:	48000800 	.word	0x48000800
 8002704:	48000c00 	.word	0x48000c00
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002728:	e002      	b.n	8002730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002742:	af00      	add	r7, sp, #0
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f000 bef4 	b.w	800353e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 816a 	beq.w	8002a3a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002766:	4bb3      	ldr	r3, [pc, #716]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00c      	beq.n	800278c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002772:	4bb0      	ldr	r3, [pc, #704]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b08      	cmp	r3, #8
 800277c:	d159      	bne.n	8002832 <HAL_RCC_OscConfig+0xf6>
 800277e:	4bad      	ldr	r3, [pc, #692]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d152      	bne.n	8002832 <HAL_RCC_OscConfig+0xf6>
 800278c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002790:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0x82>
 80027b8:	4b9e      	ldr	r3, [pc, #632]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0xae>
 80027be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027e6:	4b93      	ldr	r3, [pc, #588]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002802:	fab2 f282 	clz	r2, r2
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f042 0220 	orr.w	r2, r2, #32
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f002 021f 	and.w	r2, r2, #31
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f202 	lsl.w	r2, r1, r2
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 810c 	beq.w	8002a38 <HAL_RCC_OscConfig+0x2fc>
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8106 	bne.w	8002a38 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	f000 be86 	b.w	800353e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x110>
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7c      	ldr	r2, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e030      	b.n	80028ae <HAL_RCC_OscConfig+0x172>
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x134>
 8002856:	4b77      	ldr	r3, [pc, #476]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a76      	ldr	r2, [pc, #472]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b74      	ldr	r3, [pc, #464]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a73      	ldr	r2, [pc, #460]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01e      	b.n	80028ae <HAL_RCC_OscConfig+0x172>
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x15a>
 800287c:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6c      	ldr	r2, [pc, #432]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a69      	ldr	r2, [pc, #420]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x172>
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a66      	ldr	r2, [pc, #408]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ae:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f023 020f 	bic.w	r2, r3, #15
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	495d      	ldr	r1, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d059      	beq.n	8002980 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe f9b4 	bl	8000c38 <HAL_GetTick>
 80028d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d6:	f7fe f9af 	bl	8000c38 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d902      	bls.n	80028ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	f000 be29 	b.w	800353e <HAL_RCC_OscConfig+0xe02>
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002900:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0x1e2>
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x20e>
 800291e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002922:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002936:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800293a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002952:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800295e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0220 	orr.w	r2, r2, #32
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ab      	beq.n	80028d6 <HAL_RCC_OscConfig+0x19a>
 800297e:	e05c      	b.n	8002a3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe f95a 	bl	8000c38 <HAL_GetTick>
 8002984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298a:	f7fe f955 	bl	8000c38 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d902      	bls.n	80029a0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	f000 bdcf 	b.w	800353e <HAL_RCC_OscConfig+0xe02>
 80029a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_OscConfig+0x296>
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x2c2>
 80029d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a12:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ab      	bne.n	800298a <HAL_RCC_OscConfig+0x24e>
 8002a32:	e002      	b.n	8002a3a <HAL_RCC_OscConfig+0x2fe>
 8002a34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 816f 	beq.w	8002d28 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a4a:	4bd0      	ldr	r3, [pc, #832]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a56:	4bcd      	ldr	r3, [pc, #820]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d16c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x400>
 8002a62:	4bca      	ldr	r3, [pc, #808]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d166      	bne.n	8002b3c <HAL_RCC_OscConfig+0x400>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0x362>
 8002a98:	4bbc      	ldr	r3, [pc, #752]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e013      	b.n	8002ac6 <HAL_RCC_OscConfig+0x38a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ab6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ac2:	4bb2      	ldr	r3, [pc, #712]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002acc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ad8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002adc:	fab2 f282 	clz	r2, r2
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f042 0220 	orr.w	r2, r2, #32
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f002 021f 	and.w	r2, r2, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3cc>
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f000 bd1b 	b.w	800353e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4ba0      	ldr	r3, [pc, #640]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	21f8      	movs	r1, #248	; 0xf8
 8002b18:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b20:	fa91 f1a1 	rbit	r1, r1
 8002b24:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b28:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b2c:	fab1 f181 	clz	r1, r1
 8002b30:	b2c9      	uxtb	r1, r1
 8002b32:	408b      	lsls	r3, r1
 8002b34:	4995      	ldr	r1, [pc, #596]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e0f5      	b.n	8002d28 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8085 	beq.w	8002c52 <HAL_RCC_OscConfig+0x516>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe f860 	bl	8000c38 <HAL_GetTick>
 8002b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f85b 	bl	8000c38 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f000 bcd5 	b.w	800353e <HAL_RCC_OscConfig+0xe02>
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ba6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x488>
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	e013      	b.n	8002bec <HAL_RCC_OscConfig+0x4b0>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2202      	movs	r2, #2
 8002bee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bf2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bfe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0af      	beq.n	8002b7e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	21f8      	movs	r1, #248	; 0xf8
 8002c2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c36:	fa91 f1a1 	rbit	r1, r1
 8002c3a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c3e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c42:	fab1 f181 	clz	r1, r1
 8002c46:	b2c9      	uxtb	r1, r1
 8002c48:	408b      	lsls	r3, r1
 8002c4a:	4950      	ldr	r1, [pc, #320]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e06a      	b.n	8002d28 <HAL_RCC_OscConfig+0x5ec>
 8002c52:	2301      	movs	r3, #1
 8002c54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fd ffdb 	bl	8000c38 <HAL_GetTick>
 8002c82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c88:	f7fd ffd6 	bl	8000c38 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d902      	bls.n	8002c9e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f000 bc50 	b.w	800353e <HAL_RCC_OscConfig+0xe02>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_OscConfig+0x592>
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e013      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5ba>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <HAL_RCC_OscConfig+0x650>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cfc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d00:	fa92 f2a2 	rbit	r2, r2
 8002d04:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1af      	bne.n	8002c88 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80da 	beq.w	8002eec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d069      	beq.n	8002e16 <HAL_RCC_OscConfig+0x6da>
 8002d42:	2301      	movs	r3, #1
 8002d44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_OscConfig+0x654>)
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	461a      	mov	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7fd ff64 	bl	8000c38 <HAL_GetTick>
 8002d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d74:	e00e      	b.n	8002d94 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fd ff5f 	bl	8000c38 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d906      	bls.n	8002d94 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e3d9      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	10908120 	.word	0x10908120
 8002d94:	2302      	movs	r3, #2
 8002d96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002da6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002daa:	2202      	movs	r2, #2
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002dd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	4ba5      	ldr	r3, [pc, #660]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002dde:	2102      	movs	r1, #2
 8002de0:	6019      	str	r1, [r3, #0]
 8002de2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f1a3 	rbit	r1, r3
 8002dec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002df0:	6019      	str	r1, [r3, #0]
  return result;
 8002df2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0b0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x63a>
 8002e14:	e06a      	b.n	8002eec <HAL_RCC_OscConfig+0x7b0>
 8002e16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e2c:	601a      	str	r2, [r3, #0]
  return result;
 8002e2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCC_OscConfig+0x934>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7fd fef6 	bl	8000c38 <HAL_GetTick>
 8002e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e009      	b.n	8002e66 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fd fef1 	bl	8000c38 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e36b      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 8002e66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e82:	2202      	movs	r2, #2
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	6019      	str	r1, [r3, #0]
 8002eba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f1a3 	rbit	r1, r3
 8002ec4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ec8:	6019      	str	r1, [r3, #0]
  return result;
 8002eca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1b2      	bne.n	8002e52 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8158 	beq.w	80031ac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b5a      	ldr	r3, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d112      	bne.n	8002f34 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b57      	ldr	r3, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a56      	ldr	r2, [pc, #344]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f18:	61d3      	str	r3, [r2, #28]
 8002f1a:	4b54      	ldr	r3, [pc, #336]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_RCC_OscConfig+0x938>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d11a      	bne.n	8002f76 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f40:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x938>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_RCC_OscConfig+0x938>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4c:	f7fd fe74 	bl	8000c38 <HAL_GetTick>
 8002f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e009      	b.n	8002f6a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fd fe6f 	bl	8000c38 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2e9      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_RCC_OscConfig+0x938>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ef      	beq.n	8002f56 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x852>
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a39      	ldr	r2, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	e02f      	b.n	8002fee <HAL_RCC_OscConfig+0x8b2>
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10c      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x876>
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4a33      	ldr	r2, [pc, #204]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6213      	str	r3, [r2, #32]
 8002fa4:	4b31      	ldr	r3, [pc, #196]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a30      	ldr	r2, [pc, #192]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	e01d      	b.n	8002fee <HAL_RCC_OscConfig+0x8b2>
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x89a>
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6213      	str	r3, [r2, #32]
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x8b2>
 8002fd6:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d06b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fd fe1e 	bl	8000c38 <HAL_GetTick>
 8002ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fd fe19 	bl	8000c38 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e291      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 800301a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003036:	2202      	movs	r2, #2
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800304e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d109      	bne.n	8003078 <HAL_RCC_OscConfig+0x93c>
 8003064:	4b01      	ldr	r3, [pc, #4]	; (800306c <HAL_RCC_OscConfig+0x930>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x958>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	10908120 	.word	0x10908120
 8003074:	40007000 	.word	0x40007000
 8003078:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800307c:	2202      	movs	r2, #2
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	4bbb      	ldr	r3, [pc, #748]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003098:	2102      	movs	r1, #2
 800309a:	6011      	str	r1, [r2, #0]
 800309c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	fa92 f1a2 	rbit	r1, r2
 80030a6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80030aa:	6011      	str	r1, [r2, #0]
  return result;
 80030ac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	fab2 f282 	clz	r2, r2
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d099      	beq.n	8003002 <HAL_RCC_OscConfig+0x8c6>
 80030ce:	e063      	b.n	8003198 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fd fdb2 	bl	8000c38 <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d8:	e00b      	b.n	80030f2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fd fdad 	bl	8000c38 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e225      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 80030f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030f6:	2202      	movs	r2, #2
 80030f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003120:	601a      	str	r2, [r3, #0]
  return result;
 8003122:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003126:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0xa06>
 800313c:	4b90      	ldr	r3, [pc, #576]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	e00d      	b.n	800315e <HAL_RCC_OscConfig+0xa22>
 8003142:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003146:	2202      	movs	r2, #2
 8003148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	fa93 f2a3 	rbit	r2, r3
 8003154:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	4b89      	ldr	r3, [pc, #548]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003162:	2102      	movs	r1, #2
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fa92 f1a2 	rbit	r1, r2
 8003170:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003174:	6011      	str	r1, [r2, #0]
  return result;
 8003176:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1a0      	bne.n	80030da <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003198:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a0:	4b77      	ldr	r3, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	4a76      	ldr	r2, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 80031a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 81c2 	beq.w	800353c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	4b71      	ldr	r3, [pc, #452]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	f000 819c 	beq.w	80034fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f040 8114 	bne.w	80033fa <HAL_RCC_OscConfig+0xcbe>
 80031d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031ea:	601a      	str	r2, [r3, #0]
  return result;
 80031ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	461a      	mov	r2, r3
 8003204:	2300      	movs	r3, #0
 8003206:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd fd16 	bl	8000c38 <HAL_GetTick>
 800320c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	e009      	b.n	8003226 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fd11 	bl	8000c38 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e18b      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 8003226:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800322a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800323e:	601a      	str	r2, [r3, #0]
  return result;
 8003240:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003244:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_RCC_OscConfig+0xb24>
 800325a:	4b49      	ldr	r3, [pc, #292]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0xb5c>
 8003260:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800327e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800329c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80032b0:	6011      	str	r1, [r2, #0]
  return result;
 80032b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d19e      	bne.n	8003212 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003308:	601a      	str	r2, [r3, #0]
  return result;
 800330a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800330e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800331a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	2301      	movs	r3, #1
 8003324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fd fc87 	bl	8000c38 <HAL_GetTick>
 800332a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332e:	e009      	b.n	8003344 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fc82 	bl	8000c38 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0fc      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 8003344:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800335c:	601a      	str	r2, [r3, #0]
  return result;
 800335e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003362:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0xc48>
 8003378:	4b01      	ldr	r3, [pc, #4]	; (8003380 <HAL_RCC_OscConfig+0xc44>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	e01e      	b.n	80033bc <HAL_RCC_OscConfig+0xc80>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_OscConfig+0xe0c>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033c4:	6011      	str	r1, [r2, #0]
 80033c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	fa92 f1a2 	rbit	r1, r2
 80033d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80033d4:	6011      	str	r1, [r2, #0]
  return result;
 80033d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f042 0220 	orr.w	r2, r2, #32
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f002 021f 	and.w	r2, r2, #31
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f202 	lsl.w	r2, r1, r2
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d09b      	beq.n	8003330 <HAL_RCC_OscConfig+0xbf4>
 80033f8:	e0a0      	b.n	800353c <HAL_RCC_OscConfig+0xe00>
 80033fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003412:	601a      	str	r2, [r3, #0]
  return result;
 8003414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003418:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd fc02 	bl	8000c38 <HAL_GetTick>
 8003434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003438:	e009      	b.n	800344e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343a:	f7fd fbfd 	bl	8000c38 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e077      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
 800344e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003466:	601a      	str	r2, [r3, #0]
  return result;
 8003468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <HAL_RCC_OscConfig+0xd4c>
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0xe0c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	e01b      	b.n	80034c0 <HAL_RCC_OscConfig+0xd84>
 8003488:	f107 0320 	add.w	r3, r7, #32
 800348c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f107 0320 	add.w	r3, r7, #32
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f107 0318 	add.w	r3, r7, #24
 80034a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f107 0318 	add.w	r3, r7, #24
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0xe0c>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f107 0210 	add.w	r2, r7, #16
 80034c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	f107 0210 	add.w	r2, r7, #16
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	fa92 f1a2 	rbit	r1, r2
 80034d4:	f107 020c 	add.w	r2, r7, #12
 80034d8:	6011      	str	r1, [r2, #0]
  return result;
 80034da:	f107 020c 	add.w	r2, r7, #12
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f042 0220 	orr.w	r2, r2, #32
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f002 021f 	and.w	r2, r2, #31
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f202 	lsl.w	r2, r1, r2
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d19e      	bne.n	800343a <HAL_RCC_OscConfig+0xcfe>
 80034fc:	e01e      	b.n	800353c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e018      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_RCC_OscConfig+0xe0c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003514:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	429a      	cmp	r2, r3
 8003524:	d108      	bne.n	8003538 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003526:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800352a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000

0800354c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b09e      	sub	sp, #120	; 0x78
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e162      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d910      	bls.n	8003594 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	498b      	ldr	r1, [pc, #556]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b89      	ldr	r3, [pc, #548]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e14a      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a0:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	497f      	ldr	r1, [pc, #508]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80dc 	beq.w	8003778 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d13c      	bne.n	8003642 <HAL_RCC_ClockConfig+0xf6>
 80035c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d102      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xa6>
 80035ec:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	e00f      	b.n	8003612 <HAL_RCC_ClockConfig+0xc6>
 80035f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003604:	663b      	str	r3, [r7, #96]	; 0x60
 8003606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360e:	4b67      	ldr	r3, [pc, #412]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003616:	65ba      	str	r2, [r7, #88]	; 0x58
 8003618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800361a:	fa92 f2a2 	rbit	r2, r2
 800361e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003622:	fab2 f282 	clz	r2, r2
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	f002 021f 	and.w	r2, r2, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d17b      	bne.n	8003736 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0f3      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d13c      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x178>
 800364a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_RCC_ClockConfig+0x128>
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	e00f      	b.n	8003694 <HAL_RCC_ClockConfig+0x148>
 8003674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
 8003682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003686:	643b      	str	r3, [r7, #64]	; 0x40
 8003688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003698:	63ba      	str	r2, [r7, #56]	; 0x38
 800369a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800369c:	fa92 f2a2 	rbit	r2, r2
 80036a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0220 	orr.w	r2, r2, #32
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d13a      	bne.n	8003736 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b2      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
 80036c4:	2302      	movs	r3, #2
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1a0>
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	e00d      	b.n	8003708 <HAL_RCC_ClockConfig+0x1bc>
 80036ec:	2302      	movs	r3, #2
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
 80036f8:	2302      	movs	r3, #2
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	4b29      	ldr	r3, [pc, #164]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2202      	movs	r2, #2
 800370a:	61ba      	str	r2, [r7, #24]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	617a      	str	r2, [r7, #20]
  return result;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e079      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	491a      	ldr	r1, [pc, #104]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003748:	f7fd fa76 	bl	8000c38 <HAL_GetTick>
 800374c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fd fa72 	bl	8000c38 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e061      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d214      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	4906      	ldr	r1, [pc, #24]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCC_ClockConfig+0x25c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e040      	b.n	800382a <HAL_RCC_ClockConfig+0x2de>
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_RCC_ClockConfig+0x2e8>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	491a      	ldr	r1, [pc, #104]	; (8003834 <HAL_RCC_ClockConfig+0x2e8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <HAL_RCC_ClockConfig+0x2e8>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4912      	ldr	r1, [pc, #72]	; (8003834 <HAL_RCC_ClockConfig+0x2e8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037ee:	f000 f829 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 80037f2:	4601      	mov	r1, r0
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <HAL_RCC_ClockConfig+0x2e8>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fc:	22f0      	movs	r2, #240	; 0xf0
 80037fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	fa92 f2a2 	rbit	r2, r2
 8003806:	60fa      	str	r2, [r7, #12]
  return result;
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	fab2 f282 	clz	r2, r2
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	40d3      	lsrs	r3, r2
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x2ec>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	fa21 f303 	lsr.w	r3, r1, r3
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <HAL_RCC_ClockConfig+0x2f0>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_RCC_ClockConfig+0x2f4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd f9c4 	bl	8000bb0 <HAL_InitTick>
  
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3778      	adds	r7, #120	; 0x78
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000
 8003838:	080060dc 	.word	0x080060dc
 800383c:	20000018 	.word	0x20000018
 8003840:	2000001c 	.word	0x2000001c

08003844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b08b      	sub	sp, #44	; 0x2c
 8003848:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x30>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x36>
 8003872:	e03c      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003876:	623b      	str	r3, [r7, #32]
      break;
 8003878:	e03c      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003880:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003884:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	fa92 f2a2 	rbit	r2, r2
 800388c:	607a      	str	r2, [r7, #4]
  return result;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	40d3      	lsrs	r3, r2
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_RCC_GetSysClockFreq+0xc8>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800389e:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	220f      	movs	r2, #15
 80038a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	fa92 f2a2 	rbit	r2, r2
 80038b0:	60fa      	str	r2, [r7, #12]
  return result;
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	fab2 f282 	clz	r2, r2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	40d3      	lsrs	r3, r2
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	e004      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	623b      	str	r3, [r7, #32]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038f0:	623b      	str	r3, [r7, #32]
      break;
 80038f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f4:	6a3b      	ldr	r3, [r7, #32]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	372c      	adds	r7, #44	; 0x2c
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	080060f4 	.word	0x080060f4
 8003910:	08006104 	.word	0x08006104
 8003914:	003d0900 	.word	0x003d0900

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000018 	.word	0x20000018

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003936:	f7ff ffef 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 800393a:	4601      	mov	r1, r0
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003944:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003948:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	fa92 f2a2 	rbit	r2, r2
 8003950:	603a      	str	r2, [r7, #0]
  return result;
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	40d3      	lsrs	r3, r2
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x40>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	080060ec 	.word	0x080060ec

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800397a:	f7ff ffcd 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 800397e:	4601      	mov	r1, r0
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003988:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800398c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	fa92 f2a2 	rbit	r2, r2
 8003994:	603a      	str	r2, [r7, #0]
  return result;
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	fab2 f282 	clz	r2, r2
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	40d3      	lsrs	r3, r2
 80039a0:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	080060ec 	.word	0x080060ec

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b092      	sub	sp, #72	; 0x48
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80d4 	beq.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039dc:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	61d3      	str	r3, [r2, #28]
 80039f4:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a12:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a41      	ldr	r2, [pc, #260]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7fd f90b 	bl	8000c38 <HAL_GetTick>
 8003a22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fd f907 	bl	8000c38 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e14b      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a44:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8084 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d07c      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2301      	movs	r3, #1
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fd f8b7 	bl	8000c38 <HAL_GetTick>
 8003aca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd f8b3 	bl	8000c38 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0f5      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	2302      	movs	r3, #2
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	61fb      	str	r3, [r7, #28]
  return result;
 8003afc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d108      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b12:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	e00d      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	10908100 	.word	0x10908100
 8003b24:	2302      	movs	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	4b69      	ldr	r3, [pc, #420]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2202      	movs	r2, #2
 8003b36:	613a      	str	r2, [r7, #16]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	fa92 f2a2 	rbit	r2, r2
 8003b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	fab2 f282 	clz	r2, r2
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f002 021f 	and.w	r2, r2, #31
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0b7      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	495b      	ldr	r1, [pc, #364]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b90:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494e      	ldr	r1, [pc, #312]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f023 0210 	bic.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	4947      	ldr	r1, [pc, #284]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	493f      	ldr	r1, [pc, #252]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f023 0220 	bic.w	r2, r3, #32
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	4938      	ldr	r1, [pc, #224]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c08:	4b33      	ldr	r3, [pc, #204]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	4930      	ldr	r1, [pc, #192]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4929      	ldr	r1, [pc, #164]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003c44:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	491a      	ldr	r1, [pc, #104]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	4912      	ldr	r1, [pc, #72]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3748      	adds	r7, #72	; 0x48
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000

08003cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e040      	b.n	8003d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc fdde 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fd2a 	bl	8004774 <UART_SetConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fe54 	bl	80049e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fedb 	bl	8004b24 <UART_CheckIdleState>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	f040 8082 	bne.w	8003e96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_Transmit+0x26>
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07a      	b.n	8003e98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Transmit+0x38>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e073      	b.n	8003e98 <HAL_UART_Transmit+0x120>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	; 0x21
 8003dc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc6:	f7fc ff37 	bl	8000c38 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d108      	bne.n	8003df8 <HAL_UART_Transmit+0x80>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e003      	b.n	8003e00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e08:	e02d      	b.n	8003e66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fece 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e039      	b.n	8003e98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e36:	b292      	uxth	r2, r2
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	e008      	b.n	8003e54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3301      	adds	r3, #1
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1cb      	bne.n	8003e0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fe9a 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e005      	b.n	8003e98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f040 80bf 	bne.w	8004038 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_UART_Receive+0x26>
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0b7      	b.n	800403a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Receive+0x38>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0b0      	b.n	800403a <HAL_UART_Receive+0x19a>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2222      	movs	r2, #34	; 0x22
 8003eec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef4:	f7fc fea0 	bl	8000c38 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d10e      	bne.n	8003f32 <HAL_UART_Receive+0x92>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_UART_Receive+0x88>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f26:	e02d      	b.n	8003f84 <HAL_UART_Receive+0xe4>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	22ff      	movs	r2, #255	; 0xff
 8003f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f30:	e028      	b.n	8003f84 <HAL_UART_Receive+0xe4>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <HAL_UART_Receive+0xb6>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <HAL_UART_Receive+0xac>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f4a:	e01b      	b.n	8003f84 <HAL_UART_Receive+0xe4>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	227f      	movs	r2, #127	; 0x7f
 8003f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f54:	e016      	b.n	8003f84 <HAL_UART_Receive+0xe4>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5e:	d10d      	bne.n	8003f7c <HAL_UART_Receive+0xdc>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <HAL_UART_Receive+0xd2>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	227f      	movs	r2, #127	; 0x7f
 8003f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f70:	e008      	b.n	8003f84 <HAL_UART_Receive+0xe4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	223f      	movs	r2, #63	; 0x3f
 8003f76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f7a:	e003      	b.n	8003f84 <HAL_UART_Receive+0xe4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f8a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d108      	bne.n	8003fa8 <HAL_UART_Receive+0x108>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e003      	b.n	8003fb0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003fb8:	e033      	b.n	8004022 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fdf6 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e032      	b.n	800403a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	8a7b      	ldrh	r3, [r7, #18]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	3302      	adds	r3, #2
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e00d      	b.n	8004010 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8a7b      	ldrh	r3, [r7, #18]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4013      	ands	r3, r2
 8004004:	b2da      	uxtb	r2, r3
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1c5      	bne.n	8003fba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004056:	2b20      	cmp	r3, #32
 8004058:	d178      	bne.n	800414c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_UART_Transmit_DMA+0x22>
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e071      	b.n	800414e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_UART_Transmit_DMA+0x34>
 8004074:	2302      	movs	r3, #2
 8004076:	e06a      	b.n	800414e <HAL_UART_Transmit_DMA+0x10a>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02b      	beq.n	8004104 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <HAL_UART_Transmit_DMA+0x114>)
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b8:	4a28      	ldr	r2, [pc, #160]	; (800415c <HAL_UART_Transmit_DMA+0x118>)
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_UART_Transmit_DMA+0x11c>)
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	4619      	mov	r1, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3328      	adds	r3, #40	; 0x28
 80040dc:	461a      	mov	r2, r3
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	f7fd ffda 	bl	8002098 <HAL_DMA_Start_IT>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2210      	movs	r2, #16
 80040ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e024      	b.n	800414e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	623a      	str	r2, [r7, #32]
 8004136:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69f9      	ldr	r1, [r7, #28]
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	61bb      	str	r3, [r7, #24]
   return(result);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	08004e51 	.word	0x08004e51
 800415c:	08004ee5 	.word	0x08004ee5
 8004160:	08004f01 	.word	0x08004f01

08004164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b0ba      	sub	sp, #232	; 0xe8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800418a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800418e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004192:	4013      	ands	r3, r2
 8004194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d115      	bne.n	80041cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 82a3 	beq.w	8004708 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
      }
      return;
 80041ca:	e29d      	b.n	8004708 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8117 	beq.w	8004404 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041e6:	4b85      	ldr	r3, [pc, #532]	; (80043fc <HAL_UART_IRQHandler+0x298>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 810a 	beq.w	8004404 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <HAL_UART_IRQHandler+0xbc>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2201      	movs	r2, #1
 800420e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_UART_IRQHandler+0xec>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2202      	movs	r2, #2
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d011      	beq.n	8004280 <HAL_UART_IRQHandler+0x11c>
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d017      	beq.n	80042bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <HAL_UART_IRQHandler+0x18a>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00c      	beq.n	80042ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8209 	beq.w	800470c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800433a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004342:	2b00      	cmp	r3, #0
 8004344:	d04f      	beq.n	80043e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fd1f 	bl	8004d8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d141      	bne.n	80043de <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800438a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800439e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d9      	bne.n	800435a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d013      	beq.n	80043d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <HAL_UART_IRQHandler+0x29c>)
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd ff04 	bl	80021c8 <HAL_DMA_Abort_IT>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00f      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fc f934 	bl	8000644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e00b      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc f930 	bl	8000644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e007      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc f92c 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043f4:	e18a      	b.n	800470c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	bf00      	nop
    return;
 80043f8:	e188      	b.n	800470c <HAL_UART_IRQHandler+0x5a8>
 80043fa:	bf00      	nop
 80043fc:	04000120 	.word	0x04000120
 8004400:	08004f7d 	.word	0x08004f7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 8143 	bne.w	8004694 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 813c 	beq.w	8004694 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8135 	beq.w	8004694 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	f040 80b1 	bne.w	80045a4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800444e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 815c 	beq.w	8004710 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800445e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004462:	429a      	cmp	r2, r3
 8004464:	f080 8154 	bcs.w	8004710 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800446e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b20      	cmp	r3, #32
 800447a:	f000 8085 	beq.w	8004588 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1da      	bne.n	800447e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e1      	bne.n	80044c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004528:	66fa      	str	r2, [r7, #108]	; 0x6c
 800452a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800452e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e3      	bne.n	8004504 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004558:	f023 0310 	bic.w	r3, r3, #16
 800455c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456a:	65bb      	str	r3, [r7, #88]	; 0x58
 800456c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e4      	bne.n	8004548 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd fde7 	bl	8002156 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004594:	b29b      	uxth	r3, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	b29b      	uxth	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8c9 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a2:	e0b5      	b.n	8004710 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a7 	beq.w	8004714 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80045c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a2 	beq.w	8004714 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045f2:	647b      	str	r3, [r7, #68]	; 0x44
 80045f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e4      	bne.n	80045d0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3308      	adds	r3, #8
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	623b      	str	r3, [r7, #32]
   return(result);
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3308      	adds	r3, #8
 8004626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800462a:	633a      	str	r2, [r7, #48]	; 0x30
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e3      	bne.n	8004606 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	60fb      	str	r3, [r7, #12]
   return(result);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	617b      	str	r3, [r7, #20]
   return(result);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e4      	bne.n	8004650 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f851 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004692:	e03f      	b.n	8004714 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <HAL_UART_IRQHandler+0x55a>
 80046a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fca0 	bl	8004ffc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046bc:	e02d      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01c      	beq.n	8004718 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
    }
    return;
 80046e6:	e017      	b.n	8004718 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d012      	beq.n	800471a <HAL_UART_IRQHandler+0x5b6>
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fc51 	bl	8004fa8 <UART_EndTransmit_IT>
    return;
 8004706:	e008      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004708:	bf00      	nop
 800470a:	e006      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
    return;
 800470c:	bf00      	nop
 800470e:	e004      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004710:	bf00      	nop
 8004712:	e002      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004718:	bf00      	nop
  }

}
 800471a:	37e8      	adds	r7, #232	; 0xe8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004758:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4313      	orrs	r3, r2
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b8a      	ldr	r3, [pc, #552]	; (80049c8 <UART_SetConfig+0x254>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a78      	ldr	r2, [pc, #480]	; (80049cc <UART_SetConfig+0x258>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d120      	bne.n	8004832 <UART_SetConfig+0xbe>
 80047f0:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <UART_SetConfig+0x25c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d817      	bhi.n	800482c <UART_SetConfig+0xb8>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x90>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004815 	.word	0x08004815
 8004808:	08004821 	.word	0x08004821
 800480c:	08004827 	.word	0x08004827
 8004810:	0800481b 	.word	0x0800481b
 8004814:	2300      	movs	r3, #0
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e01d      	b.n	8004856 <UART_SetConfig+0xe2>
 800481a:	2302      	movs	r3, #2
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e01a      	b.n	8004856 <UART_SetConfig+0xe2>
 8004820:	2304      	movs	r3, #4
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e017      	b.n	8004856 <UART_SetConfig+0xe2>
 8004826:	2308      	movs	r3, #8
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e014      	b.n	8004856 <UART_SetConfig+0xe2>
 800482c:	2310      	movs	r3, #16
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e011      	b.n	8004856 <UART_SetConfig+0xe2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a67      	ldr	r2, [pc, #412]	; (80049d4 <UART_SetConfig+0x260>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d102      	bne.n	8004842 <UART_SetConfig+0xce>
 800483c:	2300      	movs	r3, #0
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e009      	b.n	8004856 <UART_SetConfig+0xe2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a64      	ldr	r2, [pc, #400]	; (80049d8 <UART_SetConfig+0x264>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d102      	bne.n	8004852 <UART_SetConfig+0xde>
 800484c:	2300      	movs	r3, #0
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e001      	b.n	8004856 <UART_SetConfig+0xe2>
 8004852:	2310      	movs	r3, #16
 8004854:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485e:	d15b      	bne.n	8004918 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004860:	7ffb      	ldrb	r3, [r7, #31]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d827      	bhi.n	80048b6 <UART_SetConfig+0x142>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0xf8>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7ff f84e 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e013      	b.n	80048c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7ff f86c 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <UART_SetConfig+0x268>)
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe ffcd 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 80048aa:	61b8      	str	r0, [r7, #24]
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e004      	b.n	80048c0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77bb      	strb	r3, [r7, #30]
        break;
 80048be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d074      	beq.n	80049b0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	005a      	lsls	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	b29b      	uxth	r3, r3
 80048dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b0f      	cmp	r3, #15
 80048e2:	d916      	bls.n	8004912 <UART_SetConfig+0x19e>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ea:	d212      	bcs.n	8004912 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f023 030f 	bic.w	r3, r3, #15
 80048f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	b29a      	uxth	r2, r3
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	4313      	orrs	r3, r2
 8004906:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	89fa      	ldrh	r2, [r7, #14]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	e04e      	b.n	80049b0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	77bb      	strb	r3, [r7, #30]
 8004916:	e04b      	b.n	80049b0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004918:	7ffb      	ldrb	r3, [r7, #31]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d827      	bhi.n	800496e <UART_SetConfig+0x1fa>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x1b0>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	0800496f 	.word	0x0800496f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fe fff2 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800494c:	61b8      	str	r0, [r7, #24]
        break;
 800494e:	e013      	b.n	8004978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7ff f810 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8004954:	61b8      	str	r0, [r7, #24]
        break;
 8004956:	e00f      	b.n	8004978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <UART_SetConfig+0x268>)
 800495a:	61bb      	str	r3, [r7, #24]
        break;
 800495c:	e00c      	b.n	8004978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7fe ff71 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8004962:	61b8      	str	r0, [r7, #24]
        break;
 8004964:	e008      	b.n	8004978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496a:	61bb      	str	r3, [r7, #24]
        break;
 800496c:	e004      	b.n	8004978 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77bb      	strb	r3, [r7, #30]
        break;
 8004976:	bf00      	nop
    }

    if (pclk != 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	085a      	lsrs	r2, r3, #1
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	441a      	add	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	b29b      	uxth	r3, r3
 8004992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d908      	bls.n	80049ac <UART_SetConfig+0x238>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d204      	bcs.n	80049ac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	e001      	b.n	80049b0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	efff69f3 	.word	0xefff69f3
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40004800 	.word	0x40004800
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ade:	d10a      	bne.n	8004af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b34:	f7fc f880 	bl	8000c38 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10e      	bne.n	8004b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f82d 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e023      	b.n	8004bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d10e      	bne.n	8004b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f817 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e00d      	b.n	8004bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b09c      	sub	sp, #112	; 0x70
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	e0a5      	b.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bce:	f000 80a1 	beq.w	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fc f831 	bl	8000c38 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d13e      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e6      	bne.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	663b      	str	r3, [r7, #96]	; 0x60
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e067      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04f      	beq.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c82:	d147      	bne.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e6      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ce0:	623a      	str	r2, [r7, #32]
 8004ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	69f9      	ldr	r1, [r7, #28]
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e010      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f43f af4a 	beq.w	8004bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3770      	adds	r7, #112	; 0x70
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b089      	sub	sp, #36	; 0x24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6979      	ldr	r1, [r7, #20]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	613b      	str	r3, [r7, #16]
   return(result);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004d7e:	bf00      	nop
 8004d80:	3724      	adds	r7, #36	; 0x24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b095      	sub	sp, #84	; 0x54
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db0:	643b      	str	r3, [r7, #64]	; 0x40
 8004db2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e6      	bne.n	8004d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d118      	bne.n	8004e32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f023 0310 	bic.w	r3, r3, #16
 8004e14:	647b      	str	r3, [r7, #68]	; 0x44
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e6      	bne.n	8004e00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e44:	bf00      	nop
 8004e46:	3754      	adds	r7, #84	; 0x54
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b090      	sub	sp, #64	; 0x40
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d037      	beq.n	8004ed6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e6      	bne.n	8004ea2 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ed4:	e002      	b.n	8004edc <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8004ed6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ed8:	f7fb fbaa 	bl	8000630 <HAL_UART_TxCpltCallback>
}
 8004edc:	bf00      	nop
 8004ede:	3740      	adds	r7, #64	; 0x40
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fc14 	bl	8004720 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d109      	bne.n	8004f3c <UART_DMAError+0x3c>
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b21      	cmp	r3, #33	; 0x21
 8004f2c:	d106      	bne.n	8004f3c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f7ff ff01 	bl	8004d3e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d109      	bne.n	8004f5e <UART_DMAError+0x5e>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b22      	cmp	r3, #34	; 0x22
 8004f4e:	d106      	bne.n	8004f5e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004f58:	6978      	ldr	r0, [r7, #20]
 8004f5a:	f7ff ff16 	bl	8004d8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f64:	f043 0210 	orr.w	r2, r3, #16
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f6e:	6978      	ldr	r0, [r7, #20]
 8004f70:	f7fb fb68 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7fb fb52 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fb fb1e 	bl	8000630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff4:	bf00      	nop
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <__errno>:
 8005010:	4b01      	ldr	r3, [pc, #4]	; (8005018 <__errno+0x8>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000024 	.word	0x20000024

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4d0d      	ldr	r5, [pc, #52]	; (8005054 <__libc_init_array+0x38>)
 8005020:	4c0d      	ldr	r4, [pc, #52]	; (8005058 <__libc_init_array+0x3c>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	2600      	movs	r6, #0
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	4d0b      	ldr	r5, [pc, #44]	; (800505c <__libc_init_array+0x40>)
 800502e:	4c0c      	ldr	r4, [pc, #48]	; (8005060 <__libc_init_array+0x44>)
 8005030:	f001 f844 	bl	80060bc <_init>
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	2600      	movs	r6, #0
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	080061ac 	.word	0x080061ac
 8005058:	080061ac 	.word	0x080061ac
 800505c:	080061ac 	.word	0x080061ac
 8005060:	080061b0 	.word	0x080061b0

08005064 <memset>:
 8005064:	4402      	add	r2, r0
 8005066:	4603      	mov	r3, r0
 8005068:	4293      	cmp	r3, r2
 800506a:	d100      	bne.n	800506e <memset+0xa>
 800506c:	4770      	bx	lr
 800506e:	f803 1b01 	strb.w	r1, [r3], #1
 8005072:	e7f9      	b.n	8005068 <memset+0x4>

08005074 <iprintf>:
 8005074:	b40f      	push	{r0, r1, r2, r3}
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <iprintf+0x2c>)
 8005078:	b513      	push	{r0, r1, r4, lr}
 800507a:	681c      	ldr	r4, [r3, #0]
 800507c:	b124      	cbz	r4, 8005088 <iprintf+0x14>
 800507e:	69a3      	ldr	r3, [r4, #24]
 8005080:	b913      	cbnz	r3, 8005088 <iprintf+0x14>
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f9ee 	bl	8005464 <__sinit>
 8005088:	ab05      	add	r3, sp, #20
 800508a:	9a04      	ldr	r2, [sp, #16]
 800508c:	68a1      	ldr	r1, [r4, #8]
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	4620      	mov	r0, r4
 8005092:	f000 fbc7 	bl	8005824 <_vfiprintf_r>
 8005096:	b002      	add	sp, #8
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	b004      	add	sp, #16
 800509e:	4770      	bx	lr
 80050a0:	20000024 	.word	0x20000024

080050a4 <setvbuf>:
 80050a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	461d      	mov	r5, r3
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <setvbuf+0x17c>)
 80050ac:	681f      	ldr	r7, [r3, #0]
 80050ae:	4604      	mov	r4, r0
 80050b0:	460e      	mov	r6, r1
 80050b2:	4690      	mov	r8, r2
 80050b4:	b127      	cbz	r7, 80050c0 <setvbuf+0x1c>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	b913      	cbnz	r3, 80050c0 <setvbuf+0x1c>
 80050ba:	4638      	mov	r0, r7
 80050bc:	f000 f9d2 	bl	8005464 <__sinit>
 80050c0:	4b58      	ldr	r3, [pc, #352]	; (8005224 <setvbuf+0x180>)
 80050c2:	429c      	cmp	r4, r3
 80050c4:	d167      	bne.n	8005196 <setvbuf+0xf2>
 80050c6:	687c      	ldr	r4, [r7, #4]
 80050c8:	f1b8 0f02 	cmp.w	r8, #2
 80050cc:	d006      	beq.n	80050dc <setvbuf+0x38>
 80050ce:	f1b8 0f01 	cmp.w	r8, #1
 80050d2:	f200 809f 	bhi.w	8005214 <setvbuf+0x170>
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	f2c0 809c 	blt.w	8005214 <setvbuf+0x170>
 80050dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050de:	07db      	lsls	r3, r3, #31
 80050e0:	d405      	bmi.n	80050ee <setvbuf+0x4a>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	0598      	lsls	r0, r3, #22
 80050e6:	d402      	bmi.n	80050ee <setvbuf+0x4a>
 80050e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ea:	f000 fa59 	bl	80055a0 <__retarget_lock_acquire_recursive>
 80050ee:	4621      	mov	r1, r4
 80050f0:	4638      	mov	r0, r7
 80050f2:	f000 f923 	bl	800533c <_fflush_r>
 80050f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050f8:	b141      	cbz	r1, 800510c <setvbuf+0x68>
 80050fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050fe:	4299      	cmp	r1, r3
 8005100:	d002      	beq.n	8005108 <setvbuf+0x64>
 8005102:	4638      	mov	r0, r7
 8005104:	f000 faba 	bl	800567c <_free_r>
 8005108:	2300      	movs	r3, #0
 800510a:	6363      	str	r3, [r4, #52]	; 0x34
 800510c:	2300      	movs	r3, #0
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	6063      	str	r3, [r4, #4]
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	0619      	lsls	r1, r3, #24
 8005116:	d503      	bpl.n	8005120 <setvbuf+0x7c>
 8005118:	6921      	ldr	r1, [r4, #16]
 800511a:	4638      	mov	r0, r7
 800511c:	f000 faae 	bl	800567c <_free_r>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	f1b8 0f02 	cmp.w	r8, #2
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	d06c      	beq.n	800520c <setvbuf+0x168>
 8005132:	ab01      	add	r3, sp, #4
 8005134:	466a      	mov	r2, sp
 8005136:	4621      	mov	r1, r4
 8005138:	4638      	mov	r0, r7
 800513a:	f000 fa33 	bl	80055a4 <__swhatbuf_r>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	4318      	orrs	r0, r3
 8005142:	81a0      	strh	r0, [r4, #12]
 8005144:	2d00      	cmp	r5, #0
 8005146:	d130      	bne.n	80051aa <setvbuf+0x106>
 8005148:	9d00      	ldr	r5, [sp, #0]
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fa8e 	bl	800566c <malloc>
 8005150:	4606      	mov	r6, r0
 8005152:	2800      	cmp	r0, #0
 8005154:	d155      	bne.n	8005202 <setvbuf+0x15e>
 8005156:	f8dd 9000 	ldr.w	r9, [sp]
 800515a:	45a9      	cmp	r9, r5
 800515c:	d14a      	bne.n	80051f4 <setvbuf+0x150>
 800515e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005162:	2200      	movs	r2, #0
 8005164:	60a2      	str	r2, [r4, #8]
 8005166:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800516a:	6022      	str	r2, [r4, #0]
 800516c:	6122      	str	r2, [r4, #16]
 800516e:	2201      	movs	r2, #1
 8005170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005174:	6162      	str	r2, [r4, #20]
 8005176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	07d2      	lsls	r2, r2, #31
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	d405      	bmi.n	800518e <setvbuf+0xea>
 8005182:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005186:	d102      	bne.n	800518e <setvbuf+0xea>
 8005188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800518a:	f000 fa0a 	bl	80055a2 <__retarget_lock_release_recursive>
 800518e:	4628      	mov	r0, r5
 8005190:	b003      	add	sp, #12
 8005192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <setvbuf+0x184>)
 8005198:	429c      	cmp	r4, r3
 800519a:	d101      	bne.n	80051a0 <setvbuf+0xfc>
 800519c:	68bc      	ldr	r4, [r7, #8]
 800519e:	e793      	b.n	80050c8 <setvbuf+0x24>
 80051a0:	4b22      	ldr	r3, [pc, #136]	; (800522c <setvbuf+0x188>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	bf08      	it	eq
 80051a6:	68fc      	ldreq	r4, [r7, #12]
 80051a8:	e78e      	b.n	80050c8 <setvbuf+0x24>
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d0cd      	beq.n	800514a <setvbuf+0xa6>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	b913      	cbnz	r3, 80051b8 <setvbuf+0x114>
 80051b2:	4638      	mov	r0, r7
 80051b4:	f000 f956 	bl	8005464 <__sinit>
 80051b8:	f1b8 0f01 	cmp.w	r8, #1
 80051bc:	bf08      	it	eq
 80051be:	89a3      	ldrheq	r3, [r4, #12]
 80051c0:	6026      	str	r6, [r4, #0]
 80051c2:	bf04      	itt	eq
 80051c4:	f043 0301 	orreq.w	r3, r3, #1
 80051c8:	81a3      	strheq	r3, [r4, #12]
 80051ca:	89a2      	ldrh	r2, [r4, #12]
 80051cc:	f012 0308 	ands.w	r3, r2, #8
 80051d0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80051d4:	d01c      	beq.n	8005210 <setvbuf+0x16c>
 80051d6:	07d3      	lsls	r3, r2, #31
 80051d8:	bf41      	itttt	mi
 80051da:	2300      	movmi	r3, #0
 80051dc:	426d      	negmi	r5, r5
 80051de:	60a3      	strmi	r3, [r4, #8]
 80051e0:	61a5      	strmi	r5, [r4, #24]
 80051e2:	bf58      	it	pl
 80051e4:	60a5      	strpl	r5, [r4, #8]
 80051e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80051e8:	f015 0501 	ands.w	r5, r5, #1
 80051ec:	d115      	bne.n	800521a <setvbuf+0x176>
 80051ee:	f412 7f00 	tst.w	r2, #512	; 0x200
 80051f2:	e7c8      	b.n	8005186 <setvbuf+0xe2>
 80051f4:	4648      	mov	r0, r9
 80051f6:	f000 fa39 	bl	800566c <malloc>
 80051fa:	4606      	mov	r6, r0
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d0ae      	beq.n	800515e <setvbuf+0xba>
 8005200:	464d      	mov	r5, r9
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	e7d0      	b.n	80051ae <setvbuf+0x10a>
 800520c:	2500      	movs	r5, #0
 800520e:	e7a8      	b.n	8005162 <setvbuf+0xbe>
 8005210:	60a3      	str	r3, [r4, #8]
 8005212:	e7e8      	b.n	80051e6 <setvbuf+0x142>
 8005214:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005218:	e7b9      	b.n	800518e <setvbuf+0xea>
 800521a:	2500      	movs	r5, #0
 800521c:	e7b7      	b.n	800518e <setvbuf+0xea>
 800521e:	bf00      	nop
 8005220:	20000024 	.word	0x20000024
 8005224:	08006138 	.word	0x08006138
 8005228:	08006158 	.word	0x08006158
 800522c:	08006118 	.word	0x08006118

08005230 <__sflush_r>:
 8005230:	898a      	ldrh	r2, [r1, #12]
 8005232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005236:	4605      	mov	r5, r0
 8005238:	0710      	lsls	r0, r2, #28
 800523a:	460c      	mov	r4, r1
 800523c:	d458      	bmi.n	80052f0 <__sflush_r+0xc0>
 800523e:	684b      	ldr	r3, [r1, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	dc05      	bgt.n	8005250 <__sflush_r+0x20>
 8005244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	dc02      	bgt.n	8005250 <__sflush_r+0x20>
 800524a:	2000      	movs	r0, #0
 800524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005252:	2e00      	cmp	r6, #0
 8005254:	d0f9      	beq.n	800524a <__sflush_r+0x1a>
 8005256:	2300      	movs	r3, #0
 8005258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800525c:	682f      	ldr	r7, [r5, #0]
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	d032      	beq.n	80052c8 <__sflush_r+0x98>
 8005262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	075a      	lsls	r2, r3, #29
 8005268:	d505      	bpl.n	8005276 <__sflush_r+0x46>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	1ac0      	subs	r0, r0, r3
 800526e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005270:	b10b      	cbz	r3, 8005276 <__sflush_r+0x46>
 8005272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005274:	1ac0      	subs	r0, r0, r3
 8005276:	2300      	movs	r3, #0
 8005278:	4602      	mov	r2, r0
 800527a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	d106      	bne.n	8005296 <__sflush_r+0x66>
 8005288:	6829      	ldr	r1, [r5, #0]
 800528a:	291d      	cmp	r1, #29
 800528c:	d82c      	bhi.n	80052e8 <__sflush_r+0xb8>
 800528e:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <__sflush_r+0x108>)
 8005290:	40ca      	lsrs	r2, r1
 8005292:	07d6      	lsls	r6, r2, #31
 8005294:	d528      	bpl.n	80052e8 <__sflush_r+0xb8>
 8005296:	2200      	movs	r2, #0
 8005298:	6062      	str	r2, [r4, #4]
 800529a:	04d9      	lsls	r1, r3, #19
 800529c:	6922      	ldr	r2, [r4, #16]
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	d504      	bpl.n	80052ac <__sflush_r+0x7c>
 80052a2:	1c42      	adds	r2, r0, #1
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0x7a>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	b903      	cbnz	r3, 80052ac <__sflush_r+0x7c>
 80052aa:	6560      	str	r0, [r4, #84]	; 0x54
 80052ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ae:	602f      	str	r7, [r5, #0]
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d0ca      	beq.n	800524a <__sflush_r+0x1a>
 80052b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b8:	4299      	cmp	r1, r3
 80052ba:	d002      	beq.n	80052c2 <__sflush_r+0x92>
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 f9dd 	bl	800567c <_free_r>
 80052c2:	2000      	movs	r0, #0
 80052c4:	6360      	str	r0, [r4, #52]	; 0x34
 80052c6:	e7c1      	b.n	800524c <__sflush_r+0x1c>
 80052c8:	6a21      	ldr	r1, [r4, #32]
 80052ca:	2301      	movs	r3, #1
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b0      	blx	r6
 80052d0:	1c41      	adds	r1, r0, #1
 80052d2:	d1c7      	bne.n	8005264 <__sflush_r+0x34>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0c4      	beq.n	8005264 <__sflush_r+0x34>
 80052da:	2b1d      	cmp	r3, #29
 80052dc:	d001      	beq.n	80052e2 <__sflush_r+0xb2>
 80052de:	2b16      	cmp	r3, #22
 80052e0:	d101      	bne.n	80052e6 <__sflush_r+0xb6>
 80052e2:	602f      	str	r7, [r5, #0]
 80052e4:	e7b1      	b.n	800524a <__sflush_r+0x1a>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	e7ad      	b.n	800524c <__sflush_r+0x1c>
 80052f0:	690f      	ldr	r7, [r1, #16]
 80052f2:	2f00      	cmp	r7, #0
 80052f4:	d0a9      	beq.n	800524a <__sflush_r+0x1a>
 80052f6:	0793      	lsls	r3, r2, #30
 80052f8:	680e      	ldr	r6, [r1, #0]
 80052fa:	bf08      	it	eq
 80052fc:	694b      	ldreq	r3, [r1, #20]
 80052fe:	600f      	str	r7, [r1, #0]
 8005300:	bf18      	it	ne
 8005302:	2300      	movne	r3, #0
 8005304:	eba6 0807 	sub.w	r8, r6, r7
 8005308:	608b      	str	r3, [r1, #8]
 800530a:	f1b8 0f00 	cmp.w	r8, #0
 800530e:	dd9c      	ble.n	800524a <__sflush_r+0x1a>
 8005310:	6a21      	ldr	r1, [r4, #32]
 8005312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005314:	4643      	mov	r3, r8
 8005316:	463a      	mov	r2, r7
 8005318:	4628      	mov	r0, r5
 800531a:	47b0      	blx	r6
 800531c:	2800      	cmp	r0, #0
 800531e:	dc06      	bgt.n	800532e <__sflush_r+0xfe>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800532c:	e78e      	b.n	800524c <__sflush_r+0x1c>
 800532e:	4407      	add	r7, r0
 8005330:	eba8 0800 	sub.w	r8, r8, r0
 8005334:	e7e9      	b.n	800530a <__sflush_r+0xda>
 8005336:	bf00      	nop
 8005338:	20400001 	.word	0x20400001

0800533c <_fflush_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	690b      	ldr	r3, [r1, #16]
 8005340:	4605      	mov	r5, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b913      	cbnz	r3, 800534c <_fflush_r+0x10>
 8005346:	2500      	movs	r5, #0
 8005348:	4628      	mov	r0, r5
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	b118      	cbz	r0, 8005356 <_fflush_r+0x1a>
 800534e:	6983      	ldr	r3, [r0, #24]
 8005350:	b90b      	cbnz	r3, 8005356 <_fflush_r+0x1a>
 8005352:	f000 f887 	bl	8005464 <__sinit>
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <_fflush_r+0x6c>)
 8005358:	429c      	cmp	r4, r3
 800535a:	d11b      	bne.n	8005394 <_fflush_r+0x58>
 800535c:	686c      	ldr	r4, [r5, #4]
 800535e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ef      	beq.n	8005346 <_fflush_r+0xa>
 8005366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005368:	07d0      	lsls	r0, r2, #31
 800536a:	d404      	bmi.n	8005376 <_fflush_r+0x3a>
 800536c:	0599      	lsls	r1, r3, #22
 800536e:	d402      	bmi.n	8005376 <_fflush_r+0x3a>
 8005370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005372:	f000 f915 	bl	80055a0 <__retarget_lock_acquire_recursive>
 8005376:	4628      	mov	r0, r5
 8005378:	4621      	mov	r1, r4
 800537a:	f7ff ff59 	bl	8005230 <__sflush_r>
 800537e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005380:	07da      	lsls	r2, r3, #31
 8005382:	4605      	mov	r5, r0
 8005384:	d4e0      	bmi.n	8005348 <_fflush_r+0xc>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	059b      	lsls	r3, r3, #22
 800538a:	d4dd      	bmi.n	8005348 <_fflush_r+0xc>
 800538c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800538e:	f000 f908 	bl	80055a2 <__retarget_lock_release_recursive>
 8005392:	e7d9      	b.n	8005348 <_fflush_r+0xc>
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <_fflush_r+0x70>)
 8005396:	429c      	cmp	r4, r3
 8005398:	d101      	bne.n	800539e <_fflush_r+0x62>
 800539a:	68ac      	ldr	r4, [r5, #8]
 800539c:	e7df      	b.n	800535e <_fflush_r+0x22>
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <_fflush_r+0x74>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	bf08      	it	eq
 80053a4:	68ec      	ldreq	r4, [r5, #12]
 80053a6:	e7da      	b.n	800535e <_fflush_r+0x22>
 80053a8:	08006138 	.word	0x08006138
 80053ac:	08006158 	.word	0x08006158
 80053b0:	08006118 	.word	0x08006118

080053b4 <std>:
 80053b4:	2300      	movs	r3, #0
 80053b6:	b510      	push	{r4, lr}
 80053b8:	4604      	mov	r4, r0
 80053ba:	e9c0 3300 	strd	r3, r3, [r0]
 80053be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053c2:	6083      	str	r3, [r0, #8]
 80053c4:	8181      	strh	r1, [r0, #12]
 80053c6:	6643      	str	r3, [r0, #100]	; 0x64
 80053c8:	81c2      	strh	r2, [r0, #14]
 80053ca:	6183      	str	r3, [r0, #24]
 80053cc:	4619      	mov	r1, r3
 80053ce:	2208      	movs	r2, #8
 80053d0:	305c      	adds	r0, #92	; 0x5c
 80053d2:	f7ff fe47 	bl	8005064 <memset>
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <std+0x38>)
 80053d8:	6263      	str	r3, [r4, #36]	; 0x24
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <std+0x3c>)
 80053dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <std+0x40>)
 80053e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <std+0x44>)
 80053e4:	6224      	str	r4, [r4, #32]
 80053e6:	6323      	str	r3, [r4, #48]	; 0x30
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	bf00      	nop
 80053ec:	08005dcd 	.word	0x08005dcd
 80053f0:	08005def 	.word	0x08005def
 80053f4:	08005e27 	.word	0x08005e27
 80053f8:	08005e4b 	.word	0x08005e4b

080053fc <_cleanup_r>:
 80053fc:	4901      	ldr	r1, [pc, #4]	; (8005404 <_cleanup_r+0x8>)
 80053fe:	f000 b8af 	b.w	8005560 <_fwalk_reent>
 8005402:	bf00      	nop
 8005404:	0800533d 	.word	0x0800533d

08005408 <__sfmoreglue>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	1e4a      	subs	r2, r1, #1
 800540c:	2568      	movs	r5, #104	; 0x68
 800540e:	4355      	muls	r5, r2
 8005410:	460e      	mov	r6, r1
 8005412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005416:	f000 f981 	bl	800571c <_malloc_r>
 800541a:	4604      	mov	r4, r0
 800541c:	b140      	cbz	r0, 8005430 <__sfmoreglue+0x28>
 800541e:	2100      	movs	r1, #0
 8005420:	e9c0 1600 	strd	r1, r6, [r0]
 8005424:	300c      	adds	r0, #12
 8005426:	60a0      	str	r0, [r4, #8]
 8005428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800542c:	f7ff fe1a 	bl	8005064 <memset>
 8005430:	4620      	mov	r0, r4
 8005432:	bd70      	pop	{r4, r5, r6, pc}

08005434 <__sfp_lock_acquire>:
 8005434:	4801      	ldr	r0, [pc, #4]	; (800543c <__sfp_lock_acquire+0x8>)
 8005436:	f000 b8b3 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 800543a:	bf00      	nop
 800543c:	20000228 	.word	0x20000228

08005440 <__sfp_lock_release>:
 8005440:	4801      	ldr	r0, [pc, #4]	; (8005448 <__sfp_lock_release+0x8>)
 8005442:	f000 b8ae 	b.w	80055a2 <__retarget_lock_release_recursive>
 8005446:	bf00      	nop
 8005448:	20000228 	.word	0x20000228

0800544c <__sinit_lock_acquire>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__sinit_lock_acquire+0x8>)
 800544e:	f000 b8a7 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 8005452:	bf00      	nop
 8005454:	20000223 	.word	0x20000223

08005458 <__sinit_lock_release>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__sinit_lock_release+0x8>)
 800545a:	f000 b8a2 	b.w	80055a2 <__retarget_lock_release_recursive>
 800545e:	bf00      	nop
 8005460:	20000223 	.word	0x20000223

08005464 <__sinit>:
 8005464:	b510      	push	{r4, lr}
 8005466:	4604      	mov	r4, r0
 8005468:	f7ff fff0 	bl	800544c <__sinit_lock_acquire>
 800546c:	69a3      	ldr	r3, [r4, #24]
 800546e:	b11b      	cbz	r3, 8005478 <__sinit+0x14>
 8005470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005474:	f7ff bff0 	b.w	8005458 <__sinit_lock_release>
 8005478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800547c:	6523      	str	r3, [r4, #80]	; 0x50
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <__sinit+0x68>)
 8005480:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <__sinit+0x6c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	62a2      	str	r2, [r4, #40]	; 0x28
 8005486:	42a3      	cmp	r3, r4
 8005488:	bf04      	itt	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	61a3      	streq	r3, [r4, #24]
 800548e:	4620      	mov	r0, r4
 8005490:	f000 f820 	bl	80054d4 <__sfp>
 8005494:	6060      	str	r0, [r4, #4]
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f81c 	bl	80054d4 <__sfp>
 800549c:	60a0      	str	r0, [r4, #8]
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f818 	bl	80054d4 <__sfp>
 80054a4:	2200      	movs	r2, #0
 80054a6:	60e0      	str	r0, [r4, #12]
 80054a8:	2104      	movs	r1, #4
 80054aa:	6860      	ldr	r0, [r4, #4]
 80054ac:	f7ff ff82 	bl	80053b4 <std>
 80054b0:	68a0      	ldr	r0, [r4, #8]
 80054b2:	2201      	movs	r2, #1
 80054b4:	2109      	movs	r1, #9
 80054b6:	f7ff ff7d 	bl	80053b4 <std>
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	2112      	movs	r1, #18
 80054c0:	f7ff ff78 	bl	80053b4 <std>
 80054c4:	2301      	movs	r3, #1
 80054c6:	61a3      	str	r3, [r4, #24]
 80054c8:	e7d2      	b.n	8005470 <__sinit+0xc>
 80054ca:	bf00      	nop
 80054cc:	08006114 	.word	0x08006114
 80054d0:	080053fd 	.word	0x080053fd

080054d4 <__sfp>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	4607      	mov	r7, r0
 80054d8:	f7ff ffac 	bl	8005434 <__sfp_lock_acquire>
 80054dc:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <__sfp+0x84>)
 80054de:	681e      	ldr	r6, [r3, #0]
 80054e0:	69b3      	ldr	r3, [r6, #24]
 80054e2:	b913      	cbnz	r3, 80054ea <__sfp+0x16>
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff ffbd 	bl	8005464 <__sinit>
 80054ea:	3648      	adds	r6, #72	; 0x48
 80054ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	d503      	bpl.n	80054fc <__sfp+0x28>
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	b30b      	cbz	r3, 800553c <__sfp+0x68>
 80054f8:	6836      	ldr	r6, [r6, #0]
 80054fa:	e7f7      	b.n	80054ec <__sfp+0x18>
 80054fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005500:	b9d5      	cbnz	r5, 8005538 <__sfp+0x64>
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <__sfp+0x88>)
 8005504:	60e3      	str	r3, [r4, #12]
 8005506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800550a:	6665      	str	r5, [r4, #100]	; 0x64
 800550c:	f000 f847 	bl	800559e <__retarget_lock_init_recursive>
 8005510:	f7ff ff96 	bl	8005440 <__sfp_lock_release>
 8005514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800551c:	6025      	str	r5, [r4, #0]
 800551e:	61a5      	str	r5, [r4, #24]
 8005520:	2208      	movs	r2, #8
 8005522:	4629      	mov	r1, r5
 8005524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005528:	f7ff fd9c 	bl	8005064 <memset>
 800552c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005534:	4620      	mov	r0, r4
 8005536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005538:	3468      	adds	r4, #104	; 0x68
 800553a:	e7d9      	b.n	80054f0 <__sfp+0x1c>
 800553c:	2104      	movs	r1, #4
 800553e:	4638      	mov	r0, r7
 8005540:	f7ff ff62 	bl	8005408 <__sfmoreglue>
 8005544:	4604      	mov	r4, r0
 8005546:	6030      	str	r0, [r6, #0]
 8005548:	2800      	cmp	r0, #0
 800554a:	d1d5      	bne.n	80054f8 <__sfp+0x24>
 800554c:	f7ff ff78 	bl	8005440 <__sfp_lock_release>
 8005550:	230c      	movs	r3, #12
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	e7ee      	b.n	8005534 <__sfp+0x60>
 8005556:	bf00      	nop
 8005558:	08006114 	.word	0x08006114
 800555c:	ffff0001 	.word	0xffff0001

08005560 <_fwalk_reent>:
 8005560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005564:	4606      	mov	r6, r0
 8005566:	4688      	mov	r8, r1
 8005568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800556c:	2700      	movs	r7, #0
 800556e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005572:	f1b9 0901 	subs.w	r9, r9, #1
 8005576:	d505      	bpl.n	8005584 <_fwalk_reent+0x24>
 8005578:	6824      	ldr	r4, [r4, #0]
 800557a:	2c00      	cmp	r4, #0
 800557c:	d1f7      	bne.n	800556e <_fwalk_reent+0xe>
 800557e:	4638      	mov	r0, r7
 8005580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005584:	89ab      	ldrh	r3, [r5, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d907      	bls.n	800559a <_fwalk_reent+0x3a>
 800558a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800558e:	3301      	adds	r3, #1
 8005590:	d003      	beq.n	800559a <_fwalk_reent+0x3a>
 8005592:	4629      	mov	r1, r5
 8005594:	4630      	mov	r0, r6
 8005596:	47c0      	blx	r8
 8005598:	4307      	orrs	r7, r0
 800559a:	3568      	adds	r5, #104	; 0x68
 800559c:	e7e9      	b.n	8005572 <_fwalk_reent+0x12>

0800559e <__retarget_lock_init_recursive>:
 800559e:	4770      	bx	lr

080055a0 <__retarget_lock_acquire_recursive>:
 80055a0:	4770      	bx	lr

080055a2 <__retarget_lock_release_recursive>:
 80055a2:	4770      	bx	lr

080055a4 <__swhatbuf_r>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	460e      	mov	r6, r1
 80055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ac:	2900      	cmp	r1, #0
 80055ae:	b096      	sub	sp, #88	; 0x58
 80055b0:	4614      	mov	r4, r2
 80055b2:	461d      	mov	r5, r3
 80055b4:	da07      	bge.n	80055c6 <__swhatbuf_r+0x22>
 80055b6:	2300      	movs	r3, #0
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	89b3      	ldrh	r3, [r6, #12]
 80055bc:	061a      	lsls	r2, r3, #24
 80055be:	d410      	bmi.n	80055e2 <__swhatbuf_r+0x3e>
 80055c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c4:	e00e      	b.n	80055e4 <__swhatbuf_r+0x40>
 80055c6:	466a      	mov	r2, sp
 80055c8:	f000 fd26 	bl	8006018 <_fstat_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	dbf2      	blt.n	80055b6 <__swhatbuf_r+0x12>
 80055d0:	9a01      	ldr	r2, [sp, #4]
 80055d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055da:	425a      	negs	r2, r3
 80055dc:	415a      	adcs	r2, r3
 80055de:	602a      	str	r2, [r5, #0]
 80055e0:	e7ee      	b.n	80055c0 <__swhatbuf_r+0x1c>
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	2000      	movs	r0, #0
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	b016      	add	sp, #88	; 0x58
 80055ea:	bd70      	pop	{r4, r5, r6, pc}

080055ec <__smakebuf_r>:
 80055ec:	898b      	ldrh	r3, [r1, #12]
 80055ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055f0:	079d      	lsls	r5, r3, #30
 80055f2:	4606      	mov	r6, r0
 80055f4:	460c      	mov	r4, r1
 80055f6:	d507      	bpl.n	8005608 <__smakebuf_r+0x1c>
 80055f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	6123      	str	r3, [r4, #16]
 8005600:	2301      	movs	r3, #1
 8005602:	6163      	str	r3, [r4, #20]
 8005604:	b002      	add	sp, #8
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	ab01      	add	r3, sp, #4
 800560a:	466a      	mov	r2, sp
 800560c:	f7ff ffca 	bl	80055a4 <__swhatbuf_r>
 8005610:	9900      	ldr	r1, [sp, #0]
 8005612:	4605      	mov	r5, r0
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f881 	bl	800571c <_malloc_r>
 800561a:	b948      	cbnz	r0, 8005630 <__smakebuf_r+0x44>
 800561c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005620:	059a      	lsls	r2, r3, #22
 8005622:	d4ef      	bmi.n	8005604 <__smakebuf_r+0x18>
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	f043 0302 	orr.w	r3, r3, #2
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	e7e3      	b.n	80055f8 <__smakebuf_r+0xc>
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <__smakebuf_r+0x7c>)
 8005632:	62b3      	str	r3, [r6, #40]	; 0x28
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	6020      	str	r0, [r4, #0]
 8005638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	9b00      	ldr	r3, [sp, #0]
 8005640:	6163      	str	r3, [r4, #20]
 8005642:	9b01      	ldr	r3, [sp, #4]
 8005644:	6120      	str	r0, [r4, #16]
 8005646:	b15b      	cbz	r3, 8005660 <__smakebuf_r+0x74>
 8005648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800564c:	4630      	mov	r0, r6
 800564e:	f000 fcf5 	bl	800603c <_isatty_r>
 8005652:	b128      	cbz	r0, 8005660 <__smakebuf_r+0x74>
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	89a0      	ldrh	r0, [r4, #12]
 8005662:	4305      	orrs	r5, r0
 8005664:	81a5      	strh	r5, [r4, #12]
 8005666:	e7cd      	b.n	8005604 <__smakebuf_r+0x18>
 8005668:	080053fd 	.word	0x080053fd

0800566c <malloc>:
 800566c:	4b02      	ldr	r3, [pc, #8]	; (8005678 <malloc+0xc>)
 800566e:	4601      	mov	r1, r0
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	f000 b853 	b.w	800571c <_malloc_r>
 8005676:	bf00      	nop
 8005678:	20000024 	.word	0x20000024

0800567c <_free_r>:
 800567c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567e:	2900      	cmp	r1, #0
 8005680:	d048      	beq.n	8005714 <_free_r+0x98>
 8005682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005686:	9001      	str	r0, [sp, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f1a1 0404 	sub.w	r4, r1, #4
 800568e:	bfb8      	it	lt
 8005690:	18e4      	addlt	r4, r4, r3
 8005692:	f000 fcf5 	bl	8006080 <__malloc_lock>
 8005696:	4a20      	ldr	r2, [pc, #128]	; (8005718 <_free_r+0x9c>)
 8005698:	9801      	ldr	r0, [sp, #4]
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	4615      	mov	r5, r2
 800569e:	b933      	cbnz	r3, 80056ae <_free_r+0x32>
 80056a0:	6063      	str	r3, [r4, #4]
 80056a2:	6014      	str	r4, [r2, #0]
 80056a4:	b003      	add	sp, #12
 80056a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056aa:	f000 bcef 	b.w	800608c <__malloc_unlock>
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d90b      	bls.n	80056ca <_free_r+0x4e>
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	1862      	adds	r2, r4, r1
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bf04      	itt	eq
 80056ba:	681a      	ldreq	r2, [r3, #0]
 80056bc:	685b      	ldreq	r3, [r3, #4]
 80056be:	6063      	str	r3, [r4, #4]
 80056c0:	bf04      	itt	eq
 80056c2:	1852      	addeq	r2, r2, r1
 80056c4:	6022      	streq	r2, [r4, #0]
 80056c6:	602c      	str	r4, [r5, #0]
 80056c8:	e7ec      	b.n	80056a4 <_free_r+0x28>
 80056ca:	461a      	mov	r2, r3
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b10b      	cbz	r3, 80056d4 <_free_r+0x58>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x4e>
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	1855      	adds	r5, r2, r1
 80056d8:	42a5      	cmp	r5, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x78>
 80056dc:	6824      	ldr	r4, [r4, #0]
 80056de:	4421      	add	r1, r4
 80056e0:	1854      	adds	r4, r2, r1
 80056e2:	42a3      	cmp	r3, r4
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	d1dd      	bne.n	80056a4 <_free_r+0x28>
 80056e8:	681c      	ldr	r4, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6053      	str	r3, [r2, #4]
 80056ee:	4421      	add	r1, r4
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	e7d7      	b.n	80056a4 <_free_r+0x28>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x80>
 80056f6:	230c      	movs	r3, #12
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	e7d3      	b.n	80056a4 <_free_r+0x28>
 80056fc:	6825      	ldr	r5, [r4, #0]
 80056fe:	1961      	adds	r1, r4, r5
 8005700:	428b      	cmp	r3, r1
 8005702:	bf04      	itt	eq
 8005704:	6819      	ldreq	r1, [r3, #0]
 8005706:	685b      	ldreq	r3, [r3, #4]
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	bf04      	itt	eq
 800570c:	1949      	addeq	r1, r1, r5
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6054      	str	r4, [r2, #4]
 8005712:	e7c7      	b.n	80056a4 <_free_r+0x28>
 8005714:	b003      	add	sp, #12
 8005716:	bd30      	pop	{r4, r5, pc}
 8005718:	200000a8 	.word	0x200000a8

0800571c <_malloc_r>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	1ccd      	adds	r5, r1, #3
 8005720:	f025 0503 	bic.w	r5, r5, #3
 8005724:	3508      	adds	r5, #8
 8005726:	2d0c      	cmp	r5, #12
 8005728:	bf38      	it	cc
 800572a:	250c      	movcc	r5, #12
 800572c:	2d00      	cmp	r5, #0
 800572e:	4606      	mov	r6, r0
 8005730:	db01      	blt.n	8005736 <_malloc_r+0x1a>
 8005732:	42a9      	cmp	r1, r5
 8005734:	d903      	bls.n	800573e <_malloc_r+0x22>
 8005736:	230c      	movs	r3, #12
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	2000      	movs	r0, #0
 800573c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573e:	f000 fc9f 	bl	8006080 <__malloc_lock>
 8005742:	4921      	ldr	r1, [pc, #132]	; (80057c8 <_malloc_r+0xac>)
 8005744:	680a      	ldr	r2, [r1, #0]
 8005746:	4614      	mov	r4, r2
 8005748:	b99c      	cbnz	r4, 8005772 <_malloc_r+0x56>
 800574a:	4f20      	ldr	r7, [pc, #128]	; (80057cc <_malloc_r+0xb0>)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	b923      	cbnz	r3, 800575a <_malloc_r+0x3e>
 8005750:	4621      	mov	r1, r4
 8005752:	4630      	mov	r0, r6
 8005754:	f000 fb2a 	bl	8005dac <_sbrk_r>
 8005758:	6038      	str	r0, [r7, #0]
 800575a:	4629      	mov	r1, r5
 800575c:	4630      	mov	r0, r6
 800575e:	f000 fb25 	bl	8005dac <_sbrk_r>
 8005762:	1c43      	adds	r3, r0, #1
 8005764:	d123      	bne.n	80057ae <_malloc_r+0x92>
 8005766:	230c      	movs	r3, #12
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	4630      	mov	r0, r6
 800576c:	f000 fc8e 	bl	800608c <__malloc_unlock>
 8005770:	e7e3      	b.n	800573a <_malloc_r+0x1e>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	1b5b      	subs	r3, r3, r5
 8005776:	d417      	bmi.n	80057a8 <_malloc_r+0x8c>
 8005778:	2b0b      	cmp	r3, #11
 800577a:	d903      	bls.n	8005784 <_malloc_r+0x68>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	441c      	add	r4, r3
 8005780:	6025      	str	r5, [r4, #0]
 8005782:	e004      	b.n	800578e <_malloc_r+0x72>
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	42a2      	cmp	r2, r4
 8005788:	bf0c      	ite	eq
 800578a:	600b      	streq	r3, [r1, #0]
 800578c:	6053      	strne	r3, [r2, #4]
 800578e:	4630      	mov	r0, r6
 8005790:	f000 fc7c 	bl	800608c <__malloc_unlock>
 8005794:	f104 000b 	add.w	r0, r4, #11
 8005798:	1d23      	adds	r3, r4, #4
 800579a:	f020 0007 	bic.w	r0, r0, #7
 800579e:	1ac2      	subs	r2, r0, r3
 80057a0:	d0cc      	beq.n	800573c <_malloc_r+0x20>
 80057a2:	1a1b      	subs	r3, r3, r0
 80057a4:	50a3      	str	r3, [r4, r2]
 80057a6:	e7c9      	b.n	800573c <_malloc_r+0x20>
 80057a8:	4622      	mov	r2, r4
 80057aa:	6864      	ldr	r4, [r4, #4]
 80057ac:	e7cc      	b.n	8005748 <_malloc_r+0x2c>
 80057ae:	1cc4      	adds	r4, r0, #3
 80057b0:	f024 0403 	bic.w	r4, r4, #3
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d0e3      	beq.n	8005780 <_malloc_r+0x64>
 80057b8:	1a21      	subs	r1, r4, r0
 80057ba:	4630      	mov	r0, r6
 80057bc:	f000 faf6 	bl	8005dac <_sbrk_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d1dd      	bne.n	8005780 <_malloc_r+0x64>
 80057c4:	e7cf      	b.n	8005766 <_malloc_r+0x4a>
 80057c6:	bf00      	nop
 80057c8:	200000a8 	.word	0x200000a8
 80057cc:	200000ac 	.word	0x200000ac

080057d0 <__sfputc_r>:
 80057d0:	6893      	ldr	r3, [r2, #8]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	b410      	push	{r4}
 80057d8:	6093      	str	r3, [r2, #8]
 80057da:	da08      	bge.n	80057ee <__sfputc_r+0x1e>
 80057dc:	6994      	ldr	r4, [r2, #24]
 80057de:	42a3      	cmp	r3, r4
 80057e0:	db01      	blt.n	80057e6 <__sfputc_r+0x16>
 80057e2:	290a      	cmp	r1, #10
 80057e4:	d103      	bne.n	80057ee <__sfputc_r+0x1e>
 80057e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ea:	f000 bb33 	b.w	8005e54 <__swbuf_r>
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	1c58      	adds	r0, r3, #1
 80057f2:	6010      	str	r0, [r2, #0]
 80057f4:	7019      	strb	r1, [r3, #0]
 80057f6:	4608      	mov	r0, r1
 80057f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <__sfputs_r>:
 80057fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005800:	4606      	mov	r6, r0
 8005802:	460f      	mov	r7, r1
 8005804:	4614      	mov	r4, r2
 8005806:	18d5      	adds	r5, r2, r3
 8005808:	42ac      	cmp	r4, r5
 800580a:	d101      	bne.n	8005810 <__sfputs_r+0x12>
 800580c:	2000      	movs	r0, #0
 800580e:	e007      	b.n	8005820 <__sfputs_r+0x22>
 8005810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005814:	463a      	mov	r2, r7
 8005816:	4630      	mov	r0, r6
 8005818:	f7ff ffda 	bl	80057d0 <__sfputc_r>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d1f3      	bne.n	8005808 <__sfputs_r+0xa>
 8005820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005824 <_vfiprintf_r>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	460d      	mov	r5, r1
 800582a:	b09d      	sub	sp, #116	; 0x74
 800582c:	4614      	mov	r4, r2
 800582e:	4698      	mov	r8, r3
 8005830:	4606      	mov	r6, r0
 8005832:	b118      	cbz	r0, 800583c <_vfiprintf_r+0x18>
 8005834:	6983      	ldr	r3, [r0, #24]
 8005836:	b90b      	cbnz	r3, 800583c <_vfiprintf_r+0x18>
 8005838:	f7ff fe14 	bl	8005464 <__sinit>
 800583c:	4b89      	ldr	r3, [pc, #548]	; (8005a64 <_vfiprintf_r+0x240>)
 800583e:	429d      	cmp	r5, r3
 8005840:	d11b      	bne.n	800587a <_vfiprintf_r+0x56>
 8005842:	6875      	ldr	r5, [r6, #4]
 8005844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005846:	07d9      	lsls	r1, r3, #31
 8005848:	d405      	bmi.n	8005856 <_vfiprintf_r+0x32>
 800584a:	89ab      	ldrh	r3, [r5, #12]
 800584c:	059a      	lsls	r2, r3, #22
 800584e:	d402      	bmi.n	8005856 <_vfiprintf_r+0x32>
 8005850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005852:	f7ff fea5 	bl	80055a0 <__retarget_lock_acquire_recursive>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	d501      	bpl.n	8005860 <_vfiprintf_r+0x3c>
 800585c:	692b      	ldr	r3, [r5, #16]
 800585e:	b9eb      	cbnz	r3, 800589c <_vfiprintf_r+0x78>
 8005860:	4629      	mov	r1, r5
 8005862:	4630      	mov	r0, r6
 8005864:	f000 fb5a 	bl	8005f1c <__swsetup_r>
 8005868:	b1c0      	cbz	r0, 800589c <_vfiprintf_r+0x78>
 800586a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800586c:	07dc      	lsls	r4, r3, #31
 800586e:	d50e      	bpl.n	800588e <_vfiprintf_r+0x6a>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005874:	b01d      	add	sp, #116	; 0x74
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	4b7b      	ldr	r3, [pc, #492]	; (8005a68 <_vfiprintf_r+0x244>)
 800587c:	429d      	cmp	r5, r3
 800587e:	d101      	bne.n	8005884 <_vfiprintf_r+0x60>
 8005880:	68b5      	ldr	r5, [r6, #8]
 8005882:	e7df      	b.n	8005844 <_vfiprintf_r+0x20>
 8005884:	4b79      	ldr	r3, [pc, #484]	; (8005a6c <_vfiprintf_r+0x248>)
 8005886:	429d      	cmp	r5, r3
 8005888:	bf08      	it	eq
 800588a:	68f5      	ldreq	r5, [r6, #12]
 800588c:	e7da      	b.n	8005844 <_vfiprintf_r+0x20>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	0598      	lsls	r0, r3, #22
 8005892:	d4ed      	bmi.n	8005870 <_vfiprintf_r+0x4c>
 8005894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005896:	f7ff fe84 	bl	80055a2 <__retarget_lock_release_recursive>
 800589a:	e7e9      	b.n	8005870 <_vfiprintf_r+0x4c>
 800589c:	2300      	movs	r3, #0
 800589e:	9309      	str	r3, [sp, #36]	; 0x24
 80058a0:	2320      	movs	r3, #32
 80058a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058aa:	2330      	movs	r3, #48	; 0x30
 80058ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a70 <_vfiprintf_r+0x24c>
 80058b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058b4:	f04f 0901 	mov.w	r9, #1
 80058b8:	4623      	mov	r3, r4
 80058ba:	469a      	mov	sl, r3
 80058bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c0:	b10a      	cbz	r2, 80058c6 <_vfiprintf_r+0xa2>
 80058c2:	2a25      	cmp	r2, #37	; 0x25
 80058c4:	d1f9      	bne.n	80058ba <_vfiprintf_r+0x96>
 80058c6:	ebba 0b04 	subs.w	fp, sl, r4
 80058ca:	d00b      	beq.n	80058e4 <_vfiprintf_r+0xc0>
 80058cc:	465b      	mov	r3, fp
 80058ce:	4622      	mov	r2, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	4630      	mov	r0, r6
 80058d4:	f7ff ff93 	bl	80057fe <__sfputs_r>
 80058d8:	3001      	adds	r0, #1
 80058da:	f000 80aa 	beq.w	8005a32 <_vfiprintf_r+0x20e>
 80058de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e0:	445a      	add	r2, fp
 80058e2:	9209      	str	r2, [sp, #36]	; 0x24
 80058e4:	f89a 3000 	ldrb.w	r3, [sl]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80a2 	beq.w	8005a32 <_vfiprintf_r+0x20e>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f8:	f10a 0a01 	add.w	sl, sl, #1
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005904:	931a      	str	r3, [sp, #104]	; 0x68
 8005906:	4654      	mov	r4, sl
 8005908:	2205      	movs	r2, #5
 800590a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590e:	4858      	ldr	r0, [pc, #352]	; (8005a70 <_vfiprintf_r+0x24c>)
 8005910:	f7fa fc5e 	bl	80001d0 <memchr>
 8005914:	9a04      	ldr	r2, [sp, #16]
 8005916:	b9d8      	cbnz	r0, 8005950 <_vfiprintf_r+0x12c>
 8005918:	06d1      	lsls	r1, r2, #27
 800591a:	bf44      	itt	mi
 800591c:	2320      	movmi	r3, #32
 800591e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005922:	0713      	lsls	r3, r2, #28
 8005924:	bf44      	itt	mi
 8005926:	232b      	movmi	r3, #43	; 0x2b
 8005928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800592c:	f89a 3000 	ldrb.w	r3, [sl]
 8005930:	2b2a      	cmp	r3, #42	; 0x2a
 8005932:	d015      	beq.n	8005960 <_vfiprintf_r+0x13c>
 8005934:	9a07      	ldr	r2, [sp, #28]
 8005936:	4654      	mov	r4, sl
 8005938:	2000      	movs	r0, #0
 800593a:	f04f 0c0a 	mov.w	ip, #10
 800593e:	4621      	mov	r1, r4
 8005940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005944:	3b30      	subs	r3, #48	; 0x30
 8005946:	2b09      	cmp	r3, #9
 8005948:	d94e      	bls.n	80059e8 <_vfiprintf_r+0x1c4>
 800594a:	b1b0      	cbz	r0, 800597a <_vfiprintf_r+0x156>
 800594c:	9207      	str	r2, [sp, #28]
 800594e:	e014      	b.n	800597a <_vfiprintf_r+0x156>
 8005950:	eba0 0308 	sub.w	r3, r0, r8
 8005954:	fa09 f303 	lsl.w	r3, r9, r3
 8005958:	4313      	orrs	r3, r2
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	46a2      	mov	sl, r4
 800595e:	e7d2      	b.n	8005906 <_vfiprintf_r+0xe2>
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	bfbb      	ittet	lt
 800596c:	425b      	neglt	r3, r3
 800596e:	f042 0202 	orrlt.w	r2, r2, #2
 8005972:	9307      	strge	r3, [sp, #28]
 8005974:	9307      	strlt	r3, [sp, #28]
 8005976:	bfb8      	it	lt
 8005978:	9204      	strlt	r2, [sp, #16]
 800597a:	7823      	ldrb	r3, [r4, #0]
 800597c:	2b2e      	cmp	r3, #46	; 0x2e
 800597e:	d10c      	bne.n	800599a <_vfiprintf_r+0x176>
 8005980:	7863      	ldrb	r3, [r4, #1]
 8005982:	2b2a      	cmp	r3, #42	; 0x2a
 8005984:	d135      	bne.n	80059f2 <_vfiprintf_r+0x1ce>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9203      	str	r2, [sp, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfb8      	it	lt
 8005992:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005996:	3402      	adds	r4, #2
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a80 <_vfiprintf_r+0x25c>
 800599e:	7821      	ldrb	r1, [r4, #0]
 80059a0:	2203      	movs	r2, #3
 80059a2:	4650      	mov	r0, sl
 80059a4:	f7fa fc14 	bl	80001d0 <memchr>
 80059a8:	b140      	cbz	r0, 80059bc <_vfiprintf_r+0x198>
 80059aa:	2340      	movs	r3, #64	; 0x40
 80059ac:	eba0 000a 	sub.w	r0, r0, sl
 80059b0:	fa03 f000 	lsl.w	r0, r3, r0
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	4303      	orrs	r3, r0
 80059b8:	3401      	adds	r4, #1
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	482c      	ldr	r0, [pc, #176]	; (8005a74 <_vfiprintf_r+0x250>)
 80059c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c6:	2206      	movs	r2, #6
 80059c8:	f7fa fc02 	bl	80001d0 <memchr>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d03f      	beq.n	8005a50 <_vfiprintf_r+0x22c>
 80059d0:	4b29      	ldr	r3, [pc, #164]	; (8005a78 <_vfiprintf_r+0x254>)
 80059d2:	bb1b      	cbnz	r3, 8005a1c <_vfiprintf_r+0x1f8>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	3307      	adds	r3, #7
 80059d8:	f023 0307 	bic.w	r3, r3, #7
 80059dc:	3308      	adds	r3, #8
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	443b      	add	r3, r7
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	e767      	b.n	80058b8 <_vfiprintf_r+0x94>
 80059e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ec:	460c      	mov	r4, r1
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7a5      	b.n	800593e <_vfiprintf_r+0x11a>
 80059f2:	2300      	movs	r3, #0
 80059f4:	3401      	adds	r4, #1
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	4619      	mov	r1, r3
 80059fa:	f04f 0c0a 	mov.w	ip, #10
 80059fe:	4620      	mov	r0, r4
 8005a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a04:	3a30      	subs	r2, #48	; 0x30
 8005a06:	2a09      	cmp	r2, #9
 8005a08:	d903      	bls.n	8005a12 <_vfiprintf_r+0x1ee>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0c5      	beq.n	800599a <_vfiprintf_r+0x176>
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	e7c3      	b.n	800599a <_vfiprintf_r+0x176>
 8005a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a16:	4604      	mov	r4, r0
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e7f0      	b.n	80059fe <_vfiprintf_r+0x1da>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <_vfiprintf_r+0x258>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4630      	mov	r0, r6
 8005a28:	f3af 8000 	nop.w
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	1c78      	adds	r0, r7, #1
 8005a30:	d1d6      	bne.n	80059e0 <_vfiprintf_r+0x1bc>
 8005a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a34:	07d9      	lsls	r1, r3, #31
 8005a36:	d405      	bmi.n	8005a44 <_vfiprintf_r+0x220>
 8005a38:	89ab      	ldrh	r3, [r5, #12]
 8005a3a:	059a      	lsls	r2, r3, #22
 8005a3c:	d402      	bmi.n	8005a44 <_vfiprintf_r+0x220>
 8005a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a40:	f7ff fdaf 	bl	80055a2 <__retarget_lock_release_recursive>
 8005a44:	89ab      	ldrh	r3, [r5, #12]
 8005a46:	065b      	lsls	r3, r3, #25
 8005a48:	f53f af12 	bmi.w	8005870 <_vfiprintf_r+0x4c>
 8005a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a4e:	e711      	b.n	8005874 <_vfiprintf_r+0x50>
 8005a50:	ab03      	add	r3, sp, #12
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <_vfiprintf_r+0x258>)
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f000 f880 	bl	8005b60 <_printf_i>
 8005a60:	e7e4      	b.n	8005a2c <_vfiprintf_r+0x208>
 8005a62:	bf00      	nop
 8005a64:	08006138 	.word	0x08006138
 8005a68:	08006158 	.word	0x08006158
 8005a6c:	08006118 	.word	0x08006118
 8005a70:	08006178 	.word	0x08006178
 8005a74:	08006182 	.word	0x08006182
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	080057ff 	.word	0x080057ff
 8005a80:	0800617e 	.word	0x0800617e

08005a84 <_printf_common>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	4616      	mov	r6, r2
 8005a8a:	4699      	mov	r9, r3
 8005a8c:	688a      	ldr	r2, [r1, #8]
 8005a8e:	690b      	ldr	r3, [r1, #16]
 8005a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bfb8      	it	lt
 8005a98:	4613      	movlt	r3, r2
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	b10a      	cbz	r2, 8005aaa <_printf_common+0x26>
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	0699      	lsls	r1, r3, #26
 8005aae:	bf42      	ittt	mi
 8005ab0:	6833      	ldrmi	r3, [r6, #0]
 8005ab2:	3302      	addmi	r3, #2
 8005ab4:	6033      	strmi	r3, [r6, #0]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	f015 0506 	ands.w	r5, r5, #6
 8005abc:	d106      	bne.n	8005acc <_printf_common+0x48>
 8005abe:	f104 0a19 	add.w	sl, r4, #25
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	6832      	ldr	r2, [r6, #0]
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dc26      	bgt.n	8005b1a <_printf_common+0x96>
 8005acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad0:	1e13      	subs	r3, r2, #0
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	bf18      	it	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	0692      	lsls	r2, r2, #26
 8005ada:	d42b      	bmi.n	8005b34 <_printf_common+0xb0>
 8005adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d01e      	beq.n	8005b28 <_printf_common+0xa4>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	68e5      	ldr	r5, [r4, #12]
 8005aee:	6832      	ldr	r2, [r6, #0]
 8005af0:	f003 0306 	and.w	r3, r3, #6
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	bf08      	it	eq
 8005af8:	1aad      	subeq	r5, r5, r2
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	bf0c      	ite	eq
 8005b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b04:	2500      	movne	r5, #0
 8005b06:	4293      	cmp	r3, r2
 8005b08:	bfc4      	itt	gt
 8005b0a:	1a9b      	subgt	r3, r3, r2
 8005b0c:	18ed      	addgt	r5, r5, r3
 8005b0e:	2600      	movs	r6, #0
 8005b10:	341a      	adds	r4, #26
 8005b12:	42b5      	cmp	r5, r6
 8005b14:	d11a      	bne.n	8005b4c <_printf_common+0xc8>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e008      	b.n	8005b2c <_printf_common+0xa8>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4638      	mov	r0, r7
 8005b22:	47c0      	blx	r8
 8005b24:	3001      	adds	r0, #1
 8005b26:	d103      	bne.n	8005b30 <_printf_common+0xac>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b30:	3501      	adds	r5, #1
 8005b32:	e7c6      	b.n	8005ac2 <_printf_common+0x3e>
 8005b34:	18e1      	adds	r1, r4, r3
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	2030      	movs	r0, #48	; 0x30
 8005b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b3e:	4422      	add	r2, r4
 8005b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b48:	3302      	adds	r3, #2
 8005b4a:	e7c7      	b.n	8005adc <_printf_common+0x58>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d0e6      	beq.n	8005b28 <_printf_common+0xa4>
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7d9      	b.n	8005b12 <_printf_common+0x8e>
	...

08005b60 <_printf_i>:
 8005b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	460c      	mov	r4, r1
 8005b66:	4691      	mov	r9, r2
 8005b68:	7e27      	ldrb	r7, [r4, #24]
 8005b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b6c:	2f78      	cmp	r7, #120	; 0x78
 8005b6e:	4680      	mov	r8, r0
 8005b70:	469a      	mov	sl, r3
 8005b72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b76:	d807      	bhi.n	8005b88 <_printf_i+0x28>
 8005b78:	2f62      	cmp	r7, #98	; 0x62
 8005b7a:	d80a      	bhi.n	8005b92 <_printf_i+0x32>
 8005b7c:	2f00      	cmp	r7, #0
 8005b7e:	f000 80d8 	beq.w	8005d32 <_printf_i+0x1d2>
 8005b82:	2f58      	cmp	r7, #88	; 0x58
 8005b84:	f000 80a3 	beq.w	8005cce <_printf_i+0x16e>
 8005b88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b90:	e03a      	b.n	8005c08 <_printf_i+0xa8>
 8005b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b96:	2b15      	cmp	r3, #21
 8005b98:	d8f6      	bhi.n	8005b88 <_printf_i+0x28>
 8005b9a:	a001      	add	r0, pc, #4	; (adr r0, 8005ba0 <_printf_i+0x40>)
 8005b9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005c0d 	.word	0x08005c0d
 8005ba8:	08005b89 	.word	0x08005b89
 8005bac:	08005b89 	.word	0x08005b89
 8005bb0:	08005b89 	.word	0x08005b89
 8005bb4:	08005b89 	.word	0x08005b89
 8005bb8:	08005c0d 	.word	0x08005c0d
 8005bbc:	08005b89 	.word	0x08005b89
 8005bc0:	08005b89 	.word	0x08005b89
 8005bc4:	08005b89 	.word	0x08005b89
 8005bc8:	08005b89 	.word	0x08005b89
 8005bcc:	08005d19 	.word	0x08005d19
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005cfb 	.word	0x08005cfb
 8005bd8:	08005b89 	.word	0x08005b89
 8005bdc:	08005b89 	.word	0x08005b89
 8005be0:	08005d3b 	.word	0x08005d3b
 8005be4:	08005b89 	.word	0x08005b89
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005b89 	.word	0x08005b89
 8005bf0:	08005b89 	.word	0x08005b89
 8005bf4:	08005d03 	.word	0x08005d03
 8005bf8:	680b      	ldr	r3, [r1, #0]
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	600a      	str	r2, [r1, #0]
 8005c00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a3      	b.n	8005d54 <_printf_i+0x1f4>
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	6808      	ldr	r0, [r1, #0]
 8005c10:	062e      	lsls	r6, r5, #24
 8005c12:	f100 0304 	add.w	r3, r0, #4
 8005c16:	d50a      	bpl.n	8005c2e <_printf_i+0xce>
 8005c18:	6805      	ldr	r5, [r0, #0]
 8005c1a:	600b      	str	r3, [r1, #0]
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	da03      	bge.n	8005c28 <_printf_i+0xc8>
 8005c20:	232d      	movs	r3, #45	; 0x2d
 8005c22:	426d      	negs	r5, r5
 8005c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c28:	485e      	ldr	r0, [pc, #376]	; (8005da4 <_printf_i+0x244>)
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	e019      	b.n	8005c62 <_printf_i+0x102>
 8005c2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c32:	6805      	ldr	r5, [r0, #0]
 8005c34:	600b      	str	r3, [r1, #0]
 8005c36:	bf18      	it	ne
 8005c38:	b22d      	sxthne	r5, r5
 8005c3a:	e7ef      	b.n	8005c1c <_printf_i+0xbc>
 8005c3c:	680b      	ldr	r3, [r1, #0]
 8005c3e:	6825      	ldr	r5, [r4, #0]
 8005c40:	1d18      	adds	r0, r3, #4
 8005c42:	6008      	str	r0, [r1, #0]
 8005c44:	0628      	lsls	r0, r5, #24
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0xec>
 8005c48:	681d      	ldr	r5, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0xf2>
 8005c4c:	0669      	lsls	r1, r5, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0xe8>
 8005c50:	881d      	ldrh	r5, [r3, #0]
 8005c52:	4854      	ldr	r0, [pc, #336]	; (8005da4 <_printf_i+0x244>)
 8005c54:	2f6f      	cmp	r7, #111	; 0x6f
 8005c56:	bf0c      	ite	eq
 8005c58:	2308      	moveq	r3, #8
 8005c5a:	230a      	movne	r3, #10
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c62:	6866      	ldr	r6, [r4, #4]
 8005c64:	60a6      	str	r6, [r4, #8]
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	bfa2      	ittt	ge
 8005c6a:	6821      	ldrge	r1, [r4, #0]
 8005c6c:	f021 0104 	bicge.w	r1, r1, #4
 8005c70:	6021      	strge	r1, [r4, #0]
 8005c72:	b90d      	cbnz	r5, 8005c78 <_printf_i+0x118>
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	d04d      	beq.n	8005d14 <_printf_i+0x1b4>
 8005c78:	4616      	mov	r6, r2
 8005c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c82:	5dc7      	ldrb	r7, [r0, r7]
 8005c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c88:	462f      	mov	r7, r5
 8005c8a:	42bb      	cmp	r3, r7
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	d9f4      	bls.n	8005c7a <_printf_i+0x11a>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10b      	bne.n	8005cac <_printf_i+0x14c>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07df      	lsls	r7, r3, #31
 8005c98:	d508      	bpl.n	8005cac <_printf_i+0x14c>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	bfde      	ittt	le
 8005ca2:	2330      	movle	r3, #48	; 0x30
 8005ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ca8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005cac:	1b92      	subs	r2, r2, r6
 8005cae:	6122      	str	r2, [r4, #16]
 8005cb0:	f8cd a000 	str.w	sl, [sp]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	aa03      	add	r2, sp, #12
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fee2 	bl	8005a84 <_printf_common>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d14c      	bne.n	8005d5e <_printf_i+0x1fe>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc8:	b004      	add	sp, #16
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	4835      	ldr	r0, [pc, #212]	; (8005da4 <_printf_i+0x244>)
 8005cd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	680e      	ldr	r6, [r1, #0]
 8005cd8:	061f      	lsls	r7, r3, #24
 8005cda:	f856 5b04 	ldr.w	r5, [r6], #4
 8005cde:	600e      	str	r6, [r1, #0]
 8005ce0:	d514      	bpl.n	8005d0c <_printf_i+0x1ac>
 8005ce2:	07d9      	lsls	r1, r3, #31
 8005ce4:	bf44      	itt	mi
 8005ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cea:	6023      	strmi	r3, [r4, #0]
 8005cec:	b91d      	cbnz	r5, 8005cf6 <_printf_i+0x196>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f023 0320 	bic.w	r3, r3, #32
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	2310      	movs	r3, #16
 8005cf8:	e7b0      	b.n	8005c5c <_printf_i+0xfc>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	f043 0320 	orr.w	r3, r3, #32
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	2378      	movs	r3, #120	; 0x78
 8005d04:	4828      	ldr	r0, [pc, #160]	; (8005da8 <_printf_i+0x248>)
 8005d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d0a:	e7e3      	b.n	8005cd4 <_printf_i+0x174>
 8005d0c:	065e      	lsls	r6, r3, #25
 8005d0e:	bf48      	it	mi
 8005d10:	b2ad      	uxthmi	r5, r5
 8005d12:	e7e6      	b.n	8005ce2 <_printf_i+0x182>
 8005d14:	4616      	mov	r6, r2
 8005d16:	e7bb      	b.n	8005c90 <_printf_i+0x130>
 8005d18:	680b      	ldr	r3, [r1, #0]
 8005d1a:	6826      	ldr	r6, [r4, #0]
 8005d1c:	6960      	ldr	r0, [r4, #20]
 8005d1e:	1d1d      	adds	r5, r3, #4
 8005d20:	600d      	str	r5, [r1, #0]
 8005d22:	0635      	lsls	r5, r6, #24
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0x1cc>
 8005d28:	6018      	str	r0, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0x1d2>
 8005d2c:	0671      	lsls	r1, r6, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0x1c8>
 8005d30:	8018      	strh	r0, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	4616      	mov	r6, r2
 8005d38:	e7ba      	b.n	8005cb0 <_printf_i+0x150>
 8005d3a:	680b      	ldr	r3, [r1, #0]
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	600a      	str	r2, [r1, #0]
 8005d40:	681e      	ldr	r6, [r3, #0]
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7fa fa42 	bl	80001d0 <memchr>
 8005d4c:	b108      	cbz	r0, 8005d52 <_printf_i+0x1f2>
 8005d4e:	1b80      	subs	r0, r0, r6
 8005d50:	6060      	str	r0, [r4, #4]
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2300      	movs	r3, #0
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5c:	e7a8      	b.n	8005cb0 <_printf_i+0x150>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	4632      	mov	r2, r6
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0ab      	beq.n	8005cc4 <_printf_i+0x164>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d413      	bmi.n	8005d9a <_printf_i+0x23a>
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bfb8      	it	lt
 8005d7a:	4618      	movlt	r0, r3
 8005d7c:	e7a4      	b.n	8005cc8 <_printf_i+0x168>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4632      	mov	r2, r6
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d09b      	beq.n	8005cc4 <_printf_i+0x164>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	9903      	ldr	r1, [sp, #12]
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dcf2      	bgt.n	8005d7e <_printf_i+0x21e>
 8005d98:	e7eb      	b.n	8005d72 <_printf_i+0x212>
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	f104 0619 	add.w	r6, r4, #25
 8005da0:	e7f5      	b.n	8005d8e <_printf_i+0x22e>
 8005da2:	bf00      	nop
 8005da4:	08006189 	.word	0x08006189
 8005da8:	0800619a 	.word	0x0800619a

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fa fe72 	bl	8000aa0 <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	2000022c 	.word	0x2000022c

08005dcc <__sread>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	460c      	mov	r4, r1
 8005dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd4:	f000 f960 	bl	8006098 <_read_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	bfab      	itete	ge
 8005ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dde:	89a3      	ldrhlt	r3, [r4, #12]
 8005de0:	181b      	addge	r3, r3, r0
 8005de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005de6:	bfac      	ite	ge
 8005de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dea:	81a3      	strhlt	r3, [r4, #12]
 8005dec:	bd10      	pop	{r4, pc}

08005dee <__swrite>:
 8005dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df2:	461f      	mov	r7, r3
 8005df4:	898b      	ldrh	r3, [r1, #12]
 8005df6:	05db      	lsls	r3, r3, #23
 8005df8:	4605      	mov	r5, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	d505      	bpl.n	8005e0c <__swrite+0x1e>
 8005e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e04:	2302      	movs	r3, #2
 8005e06:	2200      	movs	r2, #0
 8005e08:	f000 f928 	bl	800605c <_lseek_r>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	4632      	mov	r2, r6
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	f000 b869 	b.w	8005ef8 <_write_r>

08005e26 <__sseek>:
 8005e26:	b510      	push	{r4, lr}
 8005e28:	460c      	mov	r4, r1
 8005e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2e:	f000 f915 	bl	800605c <_lseek_r>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	bf15      	itete	ne
 8005e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e42:	81a3      	strheq	r3, [r4, #12]
 8005e44:	bf18      	it	ne
 8005e46:	81a3      	strhne	r3, [r4, #12]
 8005e48:	bd10      	pop	{r4, pc}

08005e4a <__sclose>:
 8005e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4e:	f000 b8d3 	b.w	8005ff8 <_close_r>
	...

08005e54 <__swbuf_r>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	460e      	mov	r6, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	b118      	cbz	r0, 8005e66 <__swbuf_r+0x12>
 8005e5e:	6983      	ldr	r3, [r0, #24]
 8005e60:	b90b      	cbnz	r3, 8005e66 <__swbuf_r+0x12>
 8005e62:	f7ff faff 	bl	8005464 <__sinit>
 8005e66:	4b21      	ldr	r3, [pc, #132]	; (8005eec <__swbuf_r+0x98>)
 8005e68:	429c      	cmp	r4, r3
 8005e6a:	d12b      	bne.n	8005ec4 <__swbuf_r+0x70>
 8005e6c:	686c      	ldr	r4, [r5, #4]
 8005e6e:	69a3      	ldr	r3, [r4, #24]
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	071a      	lsls	r2, r3, #28
 8005e76:	d52f      	bpl.n	8005ed8 <__swbuf_r+0x84>
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	b36b      	cbz	r3, 8005ed8 <__swbuf_r+0x84>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	1ac0      	subs	r0, r0, r3
 8005e82:	6963      	ldr	r3, [r4, #20]
 8005e84:	b2f6      	uxtb	r6, r6
 8005e86:	4283      	cmp	r3, r0
 8005e88:	4637      	mov	r7, r6
 8005e8a:	dc04      	bgt.n	8005e96 <__swbuf_r+0x42>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7ff fa54 	bl	800533c <_fflush_r>
 8005e94:	bb30      	cbnz	r0, 8005ee4 <__swbuf_r+0x90>
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	60a3      	str	r3, [r4, #8]
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	701e      	strb	r6, [r3, #0]
 8005ea4:	6963      	ldr	r3, [r4, #20]
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	4283      	cmp	r3, r0
 8005eaa:	d004      	beq.n	8005eb6 <__swbuf_r+0x62>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	07db      	lsls	r3, r3, #31
 8005eb0:	d506      	bpl.n	8005ec0 <__swbuf_r+0x6c>
 8005eb2:	2e0a      	cmp	r6, #10
 8005eb4:	d104      	bne.n	8005ec0 <__swbuf_r+0x6c>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7ff fa3f 	bl	800533c <_fflush_r>
 8005ebe:	b988      	cbnz	r0, 8005ee4 <__swbuf_r+0x90>
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <__swbuf_r+0x9c>)
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d101      	bne.n	8005ece <__swbuf_r+0x7a>
 8005eca:	68ac      	ldr	r4, [r5, #8]
 8005ecc:	e7cf      	b.n	8005e6e <__swbuf_r+0x1a>
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <__swbuf_r+0xa0>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	bf08      	it	eq
 8005ed4:	68ec      	ldreq	r4, [r5, #12]
 8005ed6:	e7ca      	b.n	8005e6e <__swbuf_r+0x1a>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 f81e 	bl	8005f1c <__swsetup_r>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d0cb      	beq.n	8005e7c <__swbuf_r+0x28>
 8005ee4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ee8:	e7ea      	b.n	8005ec0 <__swbuf_r+0x6c>
 8005eea:	bf00      	nop
 8005eec:	08006138 	.word	0x08006138
 8005ef0:	08006158 	.word	0x08006158
 8005ef4:	08006118 	.word	0x08006118

08005ef8 <_write_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_write_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fa fbda 	bl	80006c0 <_write>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_write_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_write_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	2000022c 	.word	0x2000022c

08005f1c <__swsetup_r>:
 8005f1c:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <__swsetup_r+0xcc>)
 8005f1e:	b570      	push	{r4, r5, r6, lr}
 8005f20:	681d      	ldr	r5, [r3, #0]
 8005f22:	4606      	mov	r6, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	b125      	cbz	r5, 8005f32 <__swsetup_r+0x16>
 8005f28:	69ab      	ldr	r3, [r5, #24]
 8005f2a:	b913      	cbnz	r3, 8005f32 <__swsetup_r+0x16>
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f7ff fa99 	bl	8005464 <__sinit>
 8005f32:	4b2e      	ldr	r3, [pc, #184]	; (8005fec <__swsetup_r+0xd0>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d10f      	bne.n	8005f58 <__swsetup_r+0x3c>
 8005f38:	686c      	ldr	r4, [r5, #4]
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f40:	0719      	lsls	r1, r3, #28
 8005f42:	d42c      	bmi.n	8005f9e <__swsetup_r+0x82>
 8005f44:	06dd      	lsls	r5, r3, #27
 8005f46:	d411      	bmi.n	8005f6c <__swsetup_r+0x50>
 8005f48:	2309      	movs	r3, #9
 8005f4a:	6033      	str	r3, [r6, #0]
 8005f4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f56:	e03e      	b.n	8005fd6 <__swsetup_r+0xba>
 8005f58:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <__swsetup_r+0xd4>)
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	d101      	bne.n	8005f62 <__swsetup_r+0x46>
 8005f5e:	68ac      	ldr	r4, [r5, #8]
 8005f60:	e7eb      	b.n	8005f3a <__swsetup_r+0x1e>
 8005f62:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <__swsetup_r+0xd8>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	bf08      	it	eq
 8005f68:	68ec      	ldreq	r4, [r5, #12]
 8005f6a:	e7e6      	b.n	8005f3a <__swsetup_r+0x1e>
 8005f6c:	0758      	lsls	r0, r3, #29
 8005f6e:	d512      	bpl.n	8005f96 <__swsetup_r+0x7a>
 8005f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f72:	b141      	cbz	r1, 8005f86 <__swsetup_r+0x6a>
 8005f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	d002      	beq.n	8005f82 <__swsetup_r+0x66>
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f7ff fb7d 	bl	800567c <_free_r>
 8005f82:	2300      	movs	r3, #0
 8005f84:	6363      	str	r3, [r4, #52]	; 0x34
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	f043 0308 	orr.w	r3, r3, #8
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	6923      	ldr	r3, [r4, #16]
 8005fa0:	b94b      	cbnz	r3, 8005fb6 <__swsetup_r+0x9a>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fac:	d003      	beq.n	8005fb6 <__swsetup_r+0x9a>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7ff fb1b 	bl	80055ec <__smakebuf_r>
 8005fb6:	89a0      	ldrh	r0, [r4, #12]
 8005fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fbc:	f010 0301 	ands.w	r3, r0, #1
 8005fc0:	d00a      	beq.n	8005fd8 <__swsetup_r+0xbc>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	6963      	ldr	r3, [r4, #20]
 8005fc8:	425b      	negs	r3, r3
 8005fca:	61a3      	str	r3, [r4, #24]
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	b943      	cbnz	r3, 8005fe2 <__swsetup_r+0xc6>
 8005fd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fd4:	d1ba      	bne.n	8005f4c <__swsetup_r+0x30>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	0781      	lsls	r1, r0, #30
 8005fda:	bf58      	it	pl
 8005fdc:	6963      	ldrpl	r3, [r4, #20]
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	e7f4      	b.n	8005fcc <__swsetup_r+0xb0>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e7f7      	b.n	8005fd6 <__swsetup_r+0xba>
 8005fe6:	bf00      	nop
 8005fe8:	20000024 	.word	0x20000024
 8005fec:	08006138 	.word	0x08006138
 8005ff0:	08006158 	.word	0x08006158
 8005ff4:	08006118 	.word	0x08006118

08005ff8 <_close_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d06      	ldr	r5, [pc, #24]	; (8006014 <_close_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fa fb88 	bl	8000718 <_close>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_close_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_close_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	2000022c 	.word	0x2000022c

08006018 <_fstat_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	4d07      	ldr	r5, [pc, #28]	; (8006038 <_fstat_r+0x20>)
 800601c:	2300      	movs	r3, #0
 800601e:	4604      	mov	r4, r0
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	f7fa fbc7 	bl	80007b8 <_fstat>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	d102      	bne.n	8006034 <_fstat_r+0x1c>
 800602e:	682b      	ldr	r3, [r5, #0]
 8006030:	b103      	cbz	r3, 8006034 <_fstat_r+0x1c>
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	bd38      	pop	{r3, r4, r5, pc}
 8006036:	bf00      	nop
 8006038:	2000022c 	.word	0x2000022c

0800603c <_isatty_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d06      	ldr	r5, [pc, #24]	; (8006058 <_isatty_r+0x1c>)
 8006040:	2300      	movs	r3, #0
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	f7fa fb24 	bl	8000694 <_isatty>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_isatty_r+0x1a>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_isatty_r+0x1a>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	2000022c 	.word	0x2000022c

0800605c <_lseek_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4d07      	ldr	r5, [pc, #28]	; (800607c <_lseek_r+0x20>)
 8006060:	4604      	mov	r4, r0
 8006062:	4608      	mov	r0, r1
 8006064:	4611      	mov	r1, r2
 8006066:	2200      	movs	r2, #0
 8006068:	602a      	str	r2, [r5, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f7fa fb6b 	bl	8000746 <_lseek>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_lseek_r+0x1e>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_lseek_r+0x1e>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	2000022c 	.word	0x2000022c

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_lock+0x8>)
 8006082:	f7ff ba8d 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	20000224 	.word	0x20000224

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_unlock+0x8>)
 800608e:	f7ff ba88 	b.w	80055a2 <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	20000224 	.word	0x20000224

08006098 <_read_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d07      	ldr	r5, [pc, #28]	; (80060b8 <_read_r+0x20>)
 800609c:	4604      	mov	r4, r0
 800609e:	4608      	mov	r0, r1
 80060a0:	4611      	mov	r1, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	602a      	str	r2, [r5, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f7fa fb5e 	bl	8000768 <_read>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_read_r+0x1e>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_read_r+0x1e>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	2000022c 	.word	0x2000022c

080060bc <_init>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr

080060c8 <_fini>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr
