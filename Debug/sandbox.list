
sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007188  08007188  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007188  08007188  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007188  08007188  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000088  08007218  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08007218  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167f0  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a27  00000000  00000000  000368a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000392d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  0003a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3a7  00000000  00000000  0003b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146cf  00000000  00000000  000594ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae634  00000000  00000000  0006dbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  0011c258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070c8 	.word	0x080070c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080070c8 	.word	0x080070c8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ff7e 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f83c 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80001d4:	f000 fa88 	bl	80006e8 <MX_DMA_Init>
  MX_GPIO_Init();
 80001d8:	f000 faac 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 fa54 	bl	8000688 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e0:	f000 f892 	bl	8000308 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e4:	f000 f8ec 	bl	80003c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e8:	f000 f9ba 	bl	8000560 <MX_TIM2_Init>
  MX_TIM17_Init();
 80001ec:	f000 fa26 	bl	800063c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2); // point stdio at uart2
 80001f0:	4813      	ldr	r0, [pc, #76]	; (8000240 <main+0x78>)
 80001f2:	f000 fb77 	bl	80008e4 <RetargetInit>
  //uhADCxConvertedData_Voltage_mVolt = VAR_CONVERTED_DATA_INIT_VALUE;
  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4812      	ldr	r0, [pc, #72]	; (8000244 <main+0x7c>)
 80001fa:	f001 fb5d 	bl	80018b8 <HAL_ADCEx_Calibration_Start>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <main+0x40>
  {
    Error_Handler();
 8000204:	f000 fb68 	bl	80008d8 <Error_Handler>
  }

  /* User start transmission data through "TxBuffer" buffer */
  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 8000208:	2217      	movs	r2, #23
 800020a:	490f      	ldr	r1, [pc, #60]	; (8000248 <main+0x80>)
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x78>)
 800020e:	f005 f9c3 	bl	8005598 <HAL_UART_Transmit_DMA>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <main+0x54>
  {
	/* Transfer error in transmission process */
	Error_Handler();
 8000218:	f000 fb5e 	bl	80008d8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(issue_pulse(0) != PULSE_OK) Error_Handler();
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fe8f 	bl	8000f40 <issue_pulse>
 8000222:	4603      	mov	r3, r0
 8000224:	2b02      	cmp	r3, #2
 8000226:	d001      	beq.n	800022c <main+0x64>
 8000228:	f000 fb56 	bl	80008d8 <Error_Handler>
	  while(get_pulse_state() == PULSE_BUSY)
 800022c:	bf00      	nop
 800022e:	f000 fed1 	bl	8000fd4 <get_pulse_state>
 8000232:	4603      	mov	r3, r0
 8000234:	2b01      	cmp	r3, #1
 8000236:	d0fa      	beq.n	800022e <main+0x66>
	  {

	  }
	  HAL_Delay(20);
 8000238:	2014      	movs	r0, #20
 800023a:	f000 ffad 	bl	8001198 <HAL_Delay>
	  if(issue_pulse(0) != PULSE_OK) Error_Handler();
 800023e:	e7ed      	b.n	800021c <main+0x54>
 8000240:	2000027c 	.word	0x2000027c
 8000244:	20000144 	.word	0x20000144
 8000248:	20000000 	.word	0x20000000

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b09c      	sub	sp, #112	; 0x70
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f006 f998 	bl	8006590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2234      	movs	r2, #52	; 0x34
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f006 f98a 	bl	8006590 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028c:	2300      	movs	r3, #0
 800028e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000290:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000294:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fb86 	bl	80029ac <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002a6:	f000 fb17 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fa78 	bl	80037bc <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002d2:	f000 fb01 	bl	80008d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM17
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <SystemClock_Config+0xb8>)
 80002d8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002da:	2300      	movs	r3, #0
 80002dc:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80002de:	2300      	movs	r3, #0
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80002e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fc9c 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002f6:	f000 faef 	bl	80008d8 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3770      	adds	r7, #112	; 0x70
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	00101080 	.word	0x00101080

08000308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	463b      	mov	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800031e:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_ADC1_Init+0xb4>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_ADC1_Init+0xb4>)
 800033a:	2200      	movs	r2, #0
 800033c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000346:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000348:	2200      	movs	r2, #0
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_ADC1_Init+0xb4>)
 800034e:	2201      	movs	r2, #1
 8000350:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_ADC1_Init+0xb4>)
 800035a:	2201      	movs	r2, #1
 800035c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000368:	2204      	movs	r2, #4
 800036a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_ADC1_Init+0xb4>)
 800036e:	2200      	movs	r2, #0
 8000370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_ADC1_Init+0xb4>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <MX_ADC1_Init+0xb4>)
 800037a:	f000 ff4f 	bl	800121c <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000384:	f000 faa8 	bl	80008d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000388:	2301      	movs	r3, #1
 800038a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038c:	2301      	movs	r3, #1
 800038e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_ADC1_Init+0xb4>)
 80003a6:	f001 fb21 	bl	80019ec <HAL_ADC_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003b0:	f000 fa92 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000144 	.word	0x20000144

080003c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09e      	sub	sp, #120	; 0x78
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	222c      	movs	r2, #44	; 0x2c
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f006 f8c0 	bl	8006590 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000410:	4b51      	ldr	r3, [pc, #324]	; (8000558 <MX_TIM1_Init+0x198>)
 8000412:	4a52      	ldr	r2, [pc, #328]	; (800055c <MX_TIM1_Init+0x19c>)
 8000414:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000416:	4b50      	ldr	r3, [pc, #320]	; (8000558 <MX_TIM1_Init+0x198>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b4e      	ldr	r3, [pc, #312]	; (8000558 <MX_TIM1_Init+0x198>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000422:	4b4d      	ldr	r3, [pc, #308]	; (8000558 <MX_TIM1_Init+0x198>)
 8000424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000428:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <MX_TIM1_Init+0x198>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000430:	4b49      	ldr	r3, [pc, #292]	; (8000558 <MX_TIM1_Init+0x198>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000436:	4b48      	ldr	r3, [pc, #288]	; (8000558 <MX_TIM1_Init+0x198>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800043c:	4846      	ldr	r0, [pc, #280]	; (8000558 <MX_TIM1_Init+0x198>)
 800043e:	f003 fd85 	bl	8003f4c <HAL_TIM_Base_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000448:	f000 fa46 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000450:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000452:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000456:	4619      	mov	r1, r3
 8000458:	483f      	ldr	r0, [pc, #252]	; (8000558 <MX_TIM1_Init+0x198>)
 800045a:	f004 f877 	bl	800454c <HAL_TIM_ConfigClockSource>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000464:	f000 fa38 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000468:	483b      	ldr	r0, [pc, #236]	; (8000558 <MX_TIM1_Init+0x198>)
 800046a:	f003 fe1b 	bl	80040a4 <HAL_TIM_OC_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000474:	f000 fa30 	bl	80008d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800047c:	2300      	movs	r3, #0
 800047e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000484:	4619      	mov	r1, r3
 8000486:	4834      	ldr	r0, [pc, #208]	; (8000558 <MX_TIM1_Init+0x198>)
 8000488:	f004 f929 	bl	80046de <HAL_TIM_SlaveConfigSynchro>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000492:	f000 fa21 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004a6:	4619      	mov	r1, r3
 80004a8:	482b      	ldr	r0, [pc, #172]	; (8000558 <MX_TIM1_Init+0x198>)
 80004aa:	f004 fdc5 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004b4:	f000 fa10 	bl	80008d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c0:	2300      	movs	r3, #0
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004c4:	2300      	movs	r3, #0
 80004c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004d8:	2200      	movs	r2, #0
 80004da:	4619      	mov	r1, r3
 80004dc:	481e      	ldr	r0, [pc, #120]	; (8000558 <MX_TIM1_Init+0x198>)
 80004de:	f003 ffbb 	bl	8004458 <HAL_TIM_OC_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80004e8:	f000 f9f6 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004f0:	2204      	movs	r2, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4818      	ldr	r0, [pc, #96]	; (8000558 <MX_TIM1_Init+0x198>)
 80004f6:	f003 ffaf 	bl	8004458 <HAL_TIM_OC_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000500:	f000 f9ea 	bl	80008d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800052a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <MX_TIM1_Init+0x198>)
 800053a:	f004 fde3 	bl	8005104 <HAL_TIMEx_ConfigBreakDeadTime>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000544:	f000 f9c8 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <MX_TIM1_Init+0x198>)
 800054a:	f000 fb55 	bl	8000bf8 <HAL_TIM_MspPostInit>

}
 800054e:	bf00      	nop
 8000550:	3778      	adds	r7, #120	; 0x78
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200001d8 	.word	0x200001d8
 800055c:	40012c00 	.word	0x40012c00

08000560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_TIM2_Init+0xd8>)
 8000590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_TIM2_Init+0xd8>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_TIM2_Init+0xd8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_TIM2_Init+0xd8>)
 80005a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_TIM2_Init+0xd8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <MX_TIM2_Init+0xd8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005b6:	4820      	ldr	r0, [pc, #128]	; (8000638 <MX_TIM2_Init+0xd8>)
 80005b8:	f003 fcc8 	bl	8003f4c <HAL_TIM_Base_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80005c2:	f000 f989 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4619      	mov	r1, r3
 80005d2:	4819      	ldr	r0, [pc, #100]	; (8000638 <MX_TIM2_Init+0xd8>)
 80005d4:	f003 ffba 	bl	800454c <HAL_TIM_ConfigClockSource>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80005de:	f000 f97b 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80005e2:	2108      	movs	r1, #8
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_TIM2_Init+0xd8>)
 80005e6:	f003 fdbe 	bl	8004166 <HAL_TIM_OnePulse_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80005f0:	f000 f972 	bl	80008d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005f4:	2306      	movs	r3, #6
 80005f6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_TIM2_Init+0xd8>)
 8000604:	f004 f86b 	bl	80046de <HAL_TIM_SlaveConfigSynchro>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800060e:	f000 f963 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_TIM2_Init+0xd8>)
 8000620:	f004 fd0a 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800062a:	f000 f955 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000230 	.word	0x20000230

0800063c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_TIM17_Init+0x44>)
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <MX_TIM17_Init+0x48>)
 8000644:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 180;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_TIM17_Init+0x44>)
 8000648:	22b4      	movs	r2, #180	; 0xb4
 800064a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_TIM17_Init+0x44>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_TIM17_Init+0x44>)
 8000654:	2263      	movs	r2, #99	; 0x63
 8000656:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_TIM17_Init+0x44>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_TIM17_Init+0x44>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_TIM17_Init+0x44>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_TIM17_Init+0x44>)
 800066c:	f003 fc6e 	bl	8003f4c <HAL_TIM_Base_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000676:	f000 f92f 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000f8 	.word	0x200000f8
 8000684:	40014800 	.word	0x40014800

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_USART2_UART_Init+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 8000694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART2_UART_Init+0x58>)
 80006cc:	f004 fdb0 	bl	8005230 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 f8ff 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000027c 	.word	0x2000027c
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_DMA_Init+0x48>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_DMA_Init+0x48>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_DMA_Init+0x48>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2010      	movs	r0, #16
 800070c:	f001 fd65 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000710:	2010      	movs	r0, #16
 8000712:	f001 fd7e 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f001 fd5d 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000720:	2011      	movs	r0, #17
 8000722:	f001 fd76 	bl	8002212 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <MX_GPIO_Init+0x170>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a55      	ldr	r2, [pc, #340]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b53      	ldr	r3, [pc, #332]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a4f      	ldr	r2, [pc, #316]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000768:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b4d      	ldr	r3, [pc, #308]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b4a      	ldr	r3, [pc, #296]	; (80008a4 <MX_GPIO_Init+0x170>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a49      	ldr	r2, [pc, #292]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a43      	ldr	r2, [pc, #268]	; (80008a4 <MX_GPIO_Init+0x170>)
 8000798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <MX_GPIO_Init+0x170>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|tx_north_n_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2183      	movs	r1, #131	; 0x83
 80007ae:	483e      	ldr	r0, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x174>)
 80007b0:	f002 f8ca 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f240 7102 	movw	r1, #1794	; 0x702
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f002 f8c3 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_NORTH_P_Pin|LD2_Pin|GPIO_PIN_3|GPIO_PIN_4
 80007c2:	2200      	movs	r2, #0
 80007c4:	f242 4138 	movw	r1, #9272	; 0x2438
 80007c8:	4838      	ldr	r0, [pc, #224]	; (80008ac <MX_GPIO_Init+0x178>)
 80007ca:	f002 f8bd 	bl	8002948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4830      	ldr	r0, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x174>)
 80007e6:	f001 ff3d 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ea:	2303      	movs	r3, #3
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <MX_GPIO_Init+0x174>)
 8000802:	f001 ff2f 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000806:	2302      	movs	r3, #2
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 ff20 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_P_Pin PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = TX_NORTH_P_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000824:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800082e:	2302      	movs	r3, #2
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_GPIO_Init+0x178>)
 800083e:	f001 ff11 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_GPIO_Init+0x178>)
 800085c:	f001 ff02 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : tx_north_n_Pin */
  GPIO_InitStruct.Pin = tx_north_n_Pin;
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(tx_north_n_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0x174>)
 8000878:	f001 fef4 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_N_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10;
 800087c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f001 fee4 	bl	8002664 <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800
 80008ac:	48000400 	.word	0x48000400

080008b0 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <RetargetInit+0x28>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <RetargetInit+0x2c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6898      	ldr	r0, [r3, #8]
 80008f8:	2300      	movs	r3, #0
 80008fa:	2202      	movs	r2, #2
 80008fc:	2100      	movs	r1, #0
 80008fe:	f005 fec5 	bl	800668c <setvbuf>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000300 	.word	0x20000300
 8000910:	20000024 	.word	0x20000024

08000914 <_isatty>:

int _isatty(int fd) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db04      	blt.n	800092c <_isatty+0x18>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b02      	cmp	r3, #2
 8000926:	dc01      	bgt.n	800092c <_isatty+0x18>
    return 1;
 8000928:	2301      	movs	r3, #1
 800092a:	e005      	b.n	8000938 <_isatty+0x24>

  errno = EBADF;
 800092c:	f005 fe06 	bl	800653c <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	2209      	movs	r2, #9
 8000934:	601a      	str	r2, [r3, #0]
  return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_write>:

int _write(int fd, char* ptr, int len) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d002      	beq.n	8000958 <_write+0x18>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d111      	bne.n	800097c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <_write+0x54>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	b29a      	uxth	r2, r3
 8000960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	f004 fcb1 	bl	80052cc <HAL_UART_Transmit>
 800096a:	4603      	mov	r3, r0
 800096c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <_write+0x38>
      return len;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	e008      	b.n	800098a <_write+0x4a>
    else
      return EIO;
 8000978:	2305      	movs	r3, #5
 800097a:	e006      	b.n	800098a <_write+0x4a>
  }
  errno = EBADF;
 800097c:	f005 fdde 	bl	800653c <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	2209      	movs	r2, #9
 8000984:	601a      	str	r2, [r3, #0]
  return -1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000300 	.word	0x20000300

08000998 <_close>:

int _close(int fd) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db04      	blt.n	80009b0 <_close+0x18>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	dc01      	bgt.n	80009b0 <_close+0x18>
    return 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e006      	b.n	80009be <_close+0x26>

  errno = EBADF;
 80009b0:	f005 fdc4 	bl	800653c <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2209      	movs	r2, #9
 80009b8:	601a      	str	r2, [r3, #0]
  return -1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80009d2:	f005 fdb3 	bl	800653c <__errno>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2209      	movs	r2, #9
 80009da:	601a      	str	r2, [r3, #0]
  return -1;
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_read>:

int _read(int fd, char* ptr, int len) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d110      	bne.n	8000a1c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <_read+0x4c>)
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a02:	2201      	movs	r2, #1
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	f004 fcf5 	bl	80053f4 <HAL_UART_Receive>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <_read+0x30>
      return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e008      	b.n	8000a2a <_read+0x42>
    else
      return EIO;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	e006      	b.n	8000a2a <_read+0x42>
  }
  errno = EBADF;
 8000a1c:	f005 fd8e 	bl	800653c <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2209      	movs	r2, #9
 8000a24:	601a      	str	r2, [r3, #0]
  return -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000300 	.word	0x20000300

08000a38 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db08      	blt.n	8000a5a <_fstat+0x22>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	dc05      	bgt.n	8000a5a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a54:	605a      	str	r2, [r3, #4]
    return 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e005      	b.n	8000a66 <_fstat+0x2e>
  }

  errno = EBADF;
 8000a5a:	f005 fd6f 	bl	800653c <__errno>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2209      	movs	r2, #9
 8000a62:	601a      	str	r2, [r3, #0]
  return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f001 fb8c 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ad8:	d12c      	bne.n	8000b34 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_ADC_MspInit+0x84>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_ADC_MspInit+0x84>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6153      	str	r3, [r2, #20]
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_ADC_MspInit+0x84>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_ADC_MspInit+0x84>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_ADC_MspInit+0x84>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_ADC_MspInit+0x84>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 fda0 	bl	8002664 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2012      	movs	r0, #18
 8000b2a:	f001 fb56 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b2e:	2012      	movs	r0, #18
 8000b30:	f001 fb6f 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a27      	ldr	r2, [pc, #156]	; (8000bec <HAL_TIM_Base_MspInit+0xac>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d114      	bne.n	8000b7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	201a      	movs	r0, #26
 8000b70:	f001 fb33 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b74:	201a      	movs	r0, #26
 8000b76:	f001 fb4c 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b7a:	e032      	b.n	8000be2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d114      	bne.n	8000bb0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	201c      	movs	r0, #28
 8000ba4:	f001 fb19 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f001 fb32 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 8000bae:	e018      	b.n	8000be2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_TIM_Base_MspInit+0xb4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d113      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	201a      	movs	r0, #26
 8000bd8:	f001 faff 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000bdc:	201a      	movs	r0, #26
 8000bde:	f001 fb18 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40012c00 	.word	0x40012c00
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40014800 	.word	0x40014800

08000bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <HAL_TIM_MspPostInit+0x9c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d138      	bne.n	8000c8c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_TIM_MspPostInit+0xa0>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_TIM_MspPostInit+0xa0>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_TIM_MspPostInit+0xa0>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_TIM_MspPostInit+0xa0>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_TIM_MspPostInit+0xa0>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_TIM_MspPostInit+0xa0>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 fcfc 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_TIM_MspPostInit+0xa4>)
 8000c88:	f001 fcec 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40012c00 	.word	0x40012c00
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <HAL_UART_MspInit+0x124>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d17c      	bne.n	8000dbc <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <HAL_UART_MspInit+0x128>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_UART_MspInit+0x128>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <HAL_UART_MspInit+0x128>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <HAL_UART_MspInit+0x128>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a3a      	ldr	r2, [pc, #232]	; (8000dc8 <HAL_UART_MspInit+0x128>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <HAL_UART_MspInit+0x128>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f001 fca8 	bl	8002664 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d16:	4a2e      	ldr	r2, [pc, #184]	; (8000dd0 <HAL_UART_MspInit+0x130>)
 8000d18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d44:	4821      	ldr	r0, [pc, #132]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d46:	f001 fa7e 	bl	8002246 <HAL_DMA_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000d50:	f7ff fdc2 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d58:	671a      	str	r2, [r3, #112]	; 0x70
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_UART_MspInit+0x12c>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0x138>)
 8000d64:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d68:	2210      	movs	r2, #16
 8000d6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000d92:	f001 fa58 	bl	8002246 <HAL_DMA_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000d9c:	f7ff fd9c 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000da4:	66da      	str	r2, [r3, #108]	; 0x6c
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_UART_MspInit+0x134>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2026      	movs	r0, #38	; 0x26
 8000db2:	f001 fa12 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db6:	2026      	movs	r0, #38	; 0x26
 8000db8:	f001 fa2b 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	4002006c 	.word	0x4002006c
 8000dd4:	20000194 	.word	0x20000194
 8000dd8:	40020080 	.word	0x40020080

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f996 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <DMA1_Channel6_IRQHandler+0x10>)
 8000e36:	f001 fb23 	bl	8002480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000b4 	.word	0x200000b4

08000e44 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA1_Channel7_IRQHandler+0x10>)
 8000e4a:	f001 fb19 	bl	8002480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000194 	.word	0x20000194

08000e58 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <ADC1_IRQHandler+0x10>)
 8000e5e:	f000 fb63 	bl	8001528 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000144 	.word	0x20000144

08000e6c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000e72:	f003 f9d2 	bl	800421a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000e78:	f003 f9cf 	bl	800421a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200001d8 	.word	0x200001d8
 8000e84:	200000f8 	.word	0x200000f8

08000e88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <TIM2_IRQHandler+0x10>)
 8000e8e:	f003 f9c4 	bl	800421a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000230 	.word	0x20000230

08000e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <USART2_IRQHandler+0x10>)
 8000ea2:	f004 fc09 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000027c 	.word	0x2000027c

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f005 fb2c 	bl	800653c <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20004000 	.word	0x20004000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200000a4 	.word	0x200000a4
 8000f18:	20000330 	.word	0x20000330

08000f1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <issue_pulse>:

int _pulse_cnt;
const int num_edges = 10;

pulse_state issue_pulse(const tx_node node)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	printf("issue_pulse\n");
 8000f4a:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <issue_pulse+0x78>)
 8000f4c:	f005 fb96 	bl	800667c <puts>
	if(_pulse_state != PULSE_IDLE) return PULSE_ERROR;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <issue_pulse+0x7c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <issue_pulse+0x1c>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e028      	b.n	8000fae <issue_pulse+0x6e>
	_pulse_state = PULSE_BUSY;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <issue_pulse+0x7c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	_pulse_cnt = 0;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <issue_pulse+0x80>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
	// start the timer

	// TODO assign ch based on node argument
	pulse_p.bank = GPIOA; pulse_p.ch = GPIO_PIN_8;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <issue_pulse+0x84>)
 8000f6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <issue_pulse+0x84>)
 8000f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f76:	809a      	strh	r2, [r3, #4]
	pulse_n.bank = GPIOB; pulse_n.ch = GPIO_PIN_10;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <issue_pulse+0x88>)
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <issue_pulse+0x8c>)
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <issue_pulse+0x88>)
 8000f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f84:	809a      	strh	r2, [r3, #4]

	HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_SET);
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <issue_pulse+0x84>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <issue_pulse+0x84>)
 8000f8c:	8891      	ldrh	r1, [r2, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fcd9 	bl	8002948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <issue_pulse+0x88>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <issue_pulse+0x88>)
 8000f9c:	8891      	ldrh	r1, [r2, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fcd1 	bl	8002948 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim17);
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <issue_pulse+0x90>)
 8000fa8:	f003 f828 	bl	8003ffc <HAL_TIM_Base_Start_IT>

    return PULSE_OK;
 8000fac:	2302      	movs	r3, #2
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	080070e0 	.word	0x080070e0
 8000fbc:	200000a8 	.word	0x200000a8
 8000fc0:	20000304 	.word	0x20000304
 8000fc4:	20000308 	.word	0x20000308
 8000fc8:	20000310 	.word	0x20000310
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	200000f8 	.word	0x200000f8

08000fd4 <get_pulse_state>:

pulse_state get_pulse_state()
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
    return _pulse_state;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <get_pulse_state+0x14>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	200000a8 	.word	0x200000a8

08000fec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	if(htim == &htim17 && _pulse_state == PULSE_BUSY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d12f      	bne.n	800105c <HAL_TIM_PeriodElapsedCallback+0x70>
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d12b      	bne.n	800105c <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if(_pulse_cnt++ < num_edges)
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	4918      	ldr	r1, [pc, #96]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800100c:	600a      	str	r2, [r1, #0]
 800100e:	220a      	movs	r2, #10
 8001010:	4293      	cmp	r3, r2
 8001012:	da10      	bge.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_TogglePin(pulse_p.bank, pulse_p.ch);
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800101a:	8892      	ldrh	r2, [r2, #4]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fcaa 	bl	8002978 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(pulse_n.bank, pulse_n.ch);
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800102a:	8892      	ldrh	r2, [r2, #4]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fca2 	bl	8002978 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
			_pulse_state = PULSE_IDLE;
		}
	}
}
 8001034:	e012      	b.n	800105c <HAL_TIM_PeriodElapsedCallback+0x70>
			HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_RESET);
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800103c:	8891      	ldrh	r1, [r2, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fc81 	bl	8002948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800104c:	8891      	ldrh	r1, [r2, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fc79 	bl	8002948 <HAL_GPIO_WritePin>
			_pulse_state = PULSE_IDLE;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000f8 	.word	0x200000f8
 8001068:	200000a8 	.word	0x200000a8
 800106c:	20000304 	.word	0x20000304
 8001070:	20000308 	.word	0x20000308
 8001074:	20000310 	.word	0x20000310

08001078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010a2:	f7ff ff3b 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f005 fa4f 	bl	8006548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010aa:	f7ff f88d 	bl	80001c8 <main>

080010ae <LoopForever>:

LoopForever:
    b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010bc:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 80010c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010c4:	2000032c 	.word	0x2000032c

080010c8 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <CAN_RX1_IRQHandler>
	...

080010cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x28>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x28>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f001 f871 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fcc2 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f889 	bl	800222e <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	f001 f851 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000018 	.word	0x20000018
 8001150:	20000020 	.word	0x20000020
 8001154:	2000001c 	.word	0x2000001c

08001158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000020 	.word	0x20000020
 800117c:	20000318 	.word	0x20000318

08001180 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;  
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000318 	.word	0x20000318

08001198 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000020 	.word	0x20000020

080011e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09a      	sub	sp, #104	; 0x68
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e169      	b.n	8001510 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d176      	bne.n	800133c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d152      	bne.n	80012fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fc21 	bl	8000ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d13b      	bne.n	80012fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fe67 	bl	8001f58 <ADC_Disable>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	d12f      	bne.n	80012fc <HAL_ADC_Init+0xe0>
 800129c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12b      	bne.n	80012fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ac:	f023 0302 	bic.w	r3, r3, #2
 80012b0:	f043 0202 	orr.w	r2, r3, #2
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d8:	4b8f      	ldr	r3, [pc, #572]	; (8001518 <HAL_ADC_Init+0x2fc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a8f      	ldr	r2, [pc, #572]	; (800151c <HAL_ADC_Init+0x300>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ee:	e002      	b.n	80012f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001318:	d110      	bne.n	800133c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f023 0312 	bic.w	r3, r3, #18
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 80d6 	bne.w	80014f6 <HAL_ADC_Init+0x2da>
 800134a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 80d1 	bne.w	80014f6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 80c9 	bne.w	80014f6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800136c:	f043 0202 	orr.w	r2, r3, #2
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001374:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_ADC_Init+0x304>)
 8001376:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_ADC_Init+0x180>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_Init+0x180>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_ADC_Init+0x182>
 800139c:	2300      	movs	r3, #0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d11c      	bne.n	80013dc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013a2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_ADC_Init+0x1a8>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_Init+0x1a8>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_ADC_Init+0x1aa>
 80013c4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013da:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e5b      	ldrb	r3, [r3, #25]
 80013e0:	035b      	lsls	r3, r3, #13
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013e6:	2a01      	cmp	r2, #1
 80013e8:	d002      	beq.n	80013f0 <HAL_ADC_Init+0x1d4>
 80013ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ee:	e000      	b.n	80013f2 <HAL_ADC_Init+0x1d6>
 80013f0:	2200      	movs	r2, #0
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4313      	orrs	r3, r2
 8001400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001402:	4313      	orrs	r3, r2
 8001404:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d11b      	bne.n	8001448 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7e5b      	ldrb	r3, [r3, #25]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	3b01      	subs	r3, #1
 800141e:	045a      	lsls	r2, r3, #17
 8001420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001422:	4313      	orrs	r3, r2
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
 800142a:	e00d      	b.n	8001448 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	2b01      	cmp	r3, #1
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	4313      	orrs	r3, r2
 800145a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800145c:	4313      	orrs	r3, r2
 800145e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d114      	bne.n	8001498 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800147c:	f023 0302 	bic.w	r3, r3, #2
 8001480:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7e1b      	ldrb	r3, [r3, #24]
 8001486:	039a      	lsls	r2, r3, #14
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4313      	orrs	r3, r2
 8001492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001494:	4313      	orrs	r3, r2
 8001496:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_ADC_Init+0x308>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014a8:	430b      	orrs	r3, r1
 80014aa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10c      	bne.n	80014ce <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f023 010f 	bic.w	r1, r3, #15
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
 80014cc:	e007      	b.n	80014de <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 020f 	bic.w	r2, r2, #15
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
 80014f4:	e00a      	b.n	800150c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f023 0312 	bic.w	r3, r3, #18
 80014fe:	f043 0210 	orr.w	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001506:	2301      	movs	r3, #1
 8001508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800150c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001510:	4618      	mov	r0, r3
 8001512:	3768      	adds	r7, #104	; 0x68
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000018 	.word	0x20000018
 800151c:	431bde83 	.word	0x431bde83
 8001520:	50000300 	.word	0x50000300
 8001524:	fff0c007 	.word	0xfff0c007

08001528 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b04      	cmp	r3, #4
 8001548:	d106      	bne.n	8001558 <HAL_ADC_IRQHandler+0x30>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b04      	cmp	r3, #4
 8001556:	d00d      	beq.n	8001574 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001562:	2b08      	cmp	r3, #8
 8001564:	d15e      	bne.n	8001624 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b08      	cmp	r3, #8
 8001572:	d157      	bne.n	8001624 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d139      	bne.n	8001616 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d134      	bne.n	8001616 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d12d      	bne.n	8001616 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11a      	bne.n	80015fe <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020c 	bic.w	r2, r2, #12
 80015d6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d112      	bne.n	8001616 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
 80015fc:	e00b      	b.n	8001616 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fde2 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	220c      	movs	r2, #12
 8001622:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	2b20      	cmp	r3, #32
 8001630:	d106      	bne.n	8001640 <HAL_ADC_IRQHandler+0x118>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b20      	cmp	r3, #32
 800163e:	d00d      	beq.n	800165c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d16d      	bne.n	800172a <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	2b40      	cmp	r3, #64	; 0x40
 800165a:	d166      	bne.n	800172a <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d14e      	bne.n	800171c <HAL_ADC_IRQHandler+0x1f4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_ADC_IRQHandler+0x178>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001692:	2b00      	cmp	r3, #0
 8001694:	d142      	bne.n	800171c <HAL_ADC_IRQHandler+0x1f4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d13d      	bne.n	800171c <HAL_ADC_IRQHandler+0x1f4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	d136      	bne.n	800171c <HAL_ADC_IRQHandler+0x1f4>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d12d      	bne.n	800171c <HAL_ADC_IRQHandler+0x1f4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11a      	bne.n	8001704 <HAL_ADC_IRQHandler+0x1dc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016dc:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d112      	bne.n	800171c <HAL_ADC_IRQHandler+0x1f4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
 8001702:	e00b      	b.n	800171c <HAL_ADC_IRQHandler+0x1f4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f93d 	bl	800199c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2260      	movs	r2, #96	; 0x60
 8001728:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d113      	bne.n	8001760 <HAL_ADC_IRQHandler+0x238>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b80      	cmp	r3, #128	; 0x80
 8001744:	d10c      	bne.n	8001760 <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fd4e 	bl	80011f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176e:	d115      	bne.n	800179c <HAL_ADC_IRQHandler+0x274>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177e:	d10d      	bne.n	800179c <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f919 	bl	80019c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017aa:	d115      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2b0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ba:	d10d      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f905 	bl	80019d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d13d      	bne.n	8001862 <HAL_ADC_IRQHandler+0x33a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d136      	bne.n	8001862 <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d102      	bne.n	8001802 <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e019      	b.n	8001836 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <HAL_ADC_IRQHandler+0x38c>)
 8001804:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10a      	bne.n	8001836 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e007      	b.n	8001836 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001832:	2301      	movs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10e      	bne.n	800185a <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	f043 0202 	orr.w	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fcd7 	bl	8001208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2210      	movs	r2, #16
 8001860:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001870:	d11b      	bne.n	80018aa <HAL_ADC_IRQHandler+0x382>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001880:	d113      	bne.n	80018aa <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0208 	orr.w	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f883 	bl	80019b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	50000300 	.word	0x50000300

080018b8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e05f      	b.n	8001994 <HAL_ADCEx_Calibration_Start+0xdc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fb3b 	bl	8001f58 <ADC_Disable>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d14e      	bne.n	800198a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001900:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d107      	bne.n	8001918 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001916:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001926:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001928:	f7ff fc2a 	bl	8001180 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800192e:	e01c      	b.n	800196a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001930:	f7ff fc26 	bl	8001180 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d915      	bls.n	800196a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800194c:	d10d      	bne.n	800196a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f023 0312 	bic.w	r3, r3, #18
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e014      	b.n	8001994 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001978:	d0da      	beq.n	8001930 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b09b      	sub	sp, #108	; 0x6c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x22>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e299      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x556>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f040 827d 	bne.w	8001f20 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d81c      	bhi.n	8001a68 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	461a      	mov	r2, r3
 8001a42:	231f      	movs	r3, #31
 8001a44:	4093      	lsls	r3, r2
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4019      	ands	r1, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	e063      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d81e      	bhi.n	8001aae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	3b1e      	subs	r3, #30
 8001a84:	221f      	movs	r2, #31
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4019      	ands	r1, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	3b1e      	subs	r3, #30
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8001aac:	e040      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b0e      	cmp	r3, #14
 8001ab4:	d81e      	bhi.n	8001af4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	3b3c      	subs	r3, #60	; 0x3c
 8001aca:	221f      	movs	r2, #31
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4019      	ands	r1, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	3b3c      	subs	r3, #60	; 0x3c
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
 8001af2:	e01d      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	3b5a      	subs	r3, #90	; 0x5a
 8001b08:	221f      	movs	r2, #31
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4019      	ands	r1, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	3b5a      	subs	r3, #90	; 0x5a
 8001b24:	fa00 f203 	lsl.w	r2, r0, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80e5 	bne.w	8001d0a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d91c      	bls.n	8001b82 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6999      	ldr	r1, [r3, #24]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	3b1e      	subs	r3, #30
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4019      	ands	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6898      	ldr	r0, [r3, #8]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	3b1e      	subs	r3, #30
 8001b74:	fa00 f203 	lsl.w	r2, r0, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	e019      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6959      	ldr	r1, [r3, #20]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6898      	ldr	r0, [r3, #8]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d84f      	bhi.n	8001c78 <HAL_ADC_ConfigChannel+0x28c>
 8001bd8:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bde:	bf00      	nop
 8001be0:	08001bf1 	.word	0x08001bf1
 8001be4:	08001c13 	.word	0x08001c13
 8001be8:	08001c35 	.word	0x08001c35
 8001bec:	08001c57 	.word	0x08001c57
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bf6:	4b99      	ldr	r3, [pc, #612]	; (8001e5c <HAL_ADC_ConfigChannel+0x470>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	0691      	lsls	r1, r2, #26
 8001c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c02:	430a      	orrs	r2, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c0e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c10:	e07e      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c18:	4b90      	ldr	r3, [pc, #576]	; (8001e5c <HAL_ADC_ConfigChannel+0x470>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	0691      	lsls	r1, r2, #26
 8001c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c24:	430a      	orrs	r2, r1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c30:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c32:	e06d      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_ADC_ConfigChannel+0x470>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	0691      	lsls	r1, r2, #26
 8001c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c46:	430a      	orrs	r2, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c52:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c54:	e05c      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c5c:	4b7f      	ldr	r3, [pc, #508]	; (8001e5c <HAL_ADC_ConfigChannel+0x470>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	0691      	lsls	r1, r2, #26
 8001c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c74:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c76:	e04b      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c9a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cbe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	069b      	lsls	r3, r3, #26
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d107      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ce2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	069b      	lsls	r3, r3, #26
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10a      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d06:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d08:	e001      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d0a:	bf00      	nop
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d0e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x344>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x344>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x346>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80ff 	bne.w	8001f36 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d00f      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d5e:	e049      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b09      	cmp	r3, #9
 8001d80:	d91c      	bls.n	8001dbc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6999      	ldr	r1, [r3, #24]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	3b1b      	subs	r3, #27
 8001d94:	2207      	movs	r2, #7
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4019      	ands	r1, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6898      	ldr	r0, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	3b1b      	subs	r3, #27
 8001dae:	fa00 f203 	lsl.w	r2, r0, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	619a      	str	r2, [r3, #24]
 8001dba:	e01b      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6959      	ldr	r1, [r3, #20]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	2207      	movs	r2, #7
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4019      	ands	r1, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6898      	ldr	r0, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_ADC_ConfigChannel+0x474>)
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d014      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e10:	2b11      	cmp	r3, #17
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e24:	2b12      	cmp	r3, #18
 8001e26:	f040 8086 	bne.w	8001f36 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d17f      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10d      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x478>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d106      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x478>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e005      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x47a>
 8001e5a:	bf00      	nop
 8001e5c:	83fff000 	.word	0x83fff000
 8001e60:	50000300 	.word	0x50000300
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d150      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e6a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x4a0>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x4a0>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x4a2>
 8001e8c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d13c      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d11d      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x4ea>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea2:	d118      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eae:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_ADC_ConfigChannel+0x564>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_ADC_ConfigChannel+0x568>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9a      	lsrs	r2, r3, #18
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ed4:	e02e      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b11      	cmp	r3, #17
 8001edc:	d10b      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x50a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ef4:	e01e      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d11a      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f08:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f0a:	e013      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f1e:	e00a      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f34:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	376c      	adds	r7, #108	; 0x6c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000018 	.word	0x20000018
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <ADC_Disable+0x2c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <ADC_Disable+0x2c>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <ADC_Disable+0x2e>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d047      	beq.n	800201a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030d 	and.w	r3, r3, #13
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10f      	bne.n	8001fb8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0202 	orr.w	r2, r2, #2
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2203      	movs	r2, #3
 8001fae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff f8e6 	bl	8001180 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fb6:	e029      	b.n	800200c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e023      	b.n	800201c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fd4:	f7ff f8d4 	bl	8001180 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d914      	bls.n	800200c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10d      	bne.n	800200c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e007      	b.n	800201c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d0dc      	beq.n	8001fd4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e037      	b.n	80022cc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002272:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9b8 	bl	8002624 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}  
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_DMA_Start_IT+0x20>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e04a      	b.n	800238a <HAL_DMA_Start_IT+0xb6>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002302:	2b01      	cmp	r3, #1
 8002304:	d13a      	bne.n	800237c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f94b 	bl	80025c6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 020e 	orr.w	r2, r2, #14
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e00f      	b.n	800236a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 020a 	orr.w	r2, r2, #10
 8002358:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0204 	bic.w	r2, r2, #4
 8002368:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e005      	b.n	8002388 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002388:	7dfb      	ldrb	r3, [r7, #23]
} 
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2204      	movs	r2, #4
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e020      	b.n	80023f8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 020e 	bic.w	r2, r2, #14
 80023c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002416:	2b02      	cmp	r3, #2
 8002418:	d005      	beq.n	8002426 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2204      	movs	r2, #4
 800241e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e027      	b.n	8002476 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 020e 	bic.w	r2, r2, #14
 8002434:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f202 	lsl.w	r2, r1, r2
 8002454:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
    } 
  }
  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2204      	movs	r2, #4
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d024      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x72>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01f      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	2104      	movs	r1, #4
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d06a      	beq.n	80025be <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	e065      	b.n	80025be <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2202      	movs	r2, #2
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d02c      	beq.n	800255c <HAL_DMA_IRQHandler+0xdc>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d027      	beq.n	800255c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 020a 	bic.w	r2, r2, #10
 8002528:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	2102      	movs	r1, #2
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d035      	beq.n	80025be <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800255a:	e030      	b.n	80025be <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2208      	movs	r2, #8
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d028      	beq.n	80025be <HAL_DMA_IRQHandler+0x13e>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 020e 	bic.w	r2, r2, #14
 8002584:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    }
  }
}  
 80025bc:	e7ff      	b.n	80025be <HAL_DMA_IRQHandler+0x13e>
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d108      	bne.n	8002606 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002604:	e007      	b.n	8002616 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	60da      	str	r2, [r3, #12]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <DMA_CalcBaseAndBitshift+0x34>)
 8002634:	4413      	add	r3, r2
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <DMA_CalcBaseAndBitshift+0x38>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <DMA_CalcBaseAndBitshift+0x3c>)
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	bffdfff8 	.word	0xbffdfff8
 800265c:	cccccccd 	.word	0xcccccccd
 8002660:	40020000 	.word	0x40020000

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002672:	e14e      	b.n	8002912 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8140 	beq.w	800290c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d005      	beq.n	80026a4 <HAL_GPIO_Init+0x40>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d130      	bne.n	8002706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026da:	2201      	movs	r2, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0201 	and.w	r2, r3, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b03      	cmp	r3, #3
 8002710:	d017      	beq.n	8002742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d123      	bne.n	8002796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0203 	and.w	r2, r3, #3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 809a 	beq.w	800290c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d8:	4b55      	ldr	r3, [pc, #340]	; (8002930 <HAL_GPIO_Init+0x2cc>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_GPIO_Init+0x2cc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b52      	ldr	r3, [pc, #328]	; (8002930 <HAL_GPIO_Init+0x2cc>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f0:	4a50      	ldr	r2, [pc, #320]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800281a:	d013      	beq.n	8002844 <HAL_GPIO_Init+0x1e0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a46      	ldr	r2, [pc, #280]	; (8002938 <HAL_GPIO_Init+0x2d4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00d      	beq.n	8002840 <HAL_GPIO_Init+0x1dc>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_GPIO_Init+0x2d8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <HAL_GPIO_Init+0x1d8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a44      	ldr	r2, [pc, #272]	; (8002940 <HAL_GPIO_Init+0x2dc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_GPIO_Init+0x1d4>
 8002834:	2303      	movs	r3, #3
 8002836:	e006      	b.n	8002846 <HAL_GPIO_Init+0x1e2>
 8002838:	2305      	movs	r3, #5
 800283a:	e004      	b.n	8002846 <HAL_GPIO_Init+0x1e2>
 800283c:	2302      	movs	r3, #2
 800283e:	e002      	b.n	8002846 <HAL_GPIO_Init+0x1e2>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_GPIO_Init+0x1e2>
 8002844:	2300      	movs	r3, #0
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	f002 0203 	and.w	r2, r2, #3
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	4093      	lsls	r3, r2
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002856:	4937      	ldr	r1, [pc, #220]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002888:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028b2:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <HAL_GPIO_Init+0x2e0>)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f aea9 	bne.w	8002674 <HAL_GPIO_Init+0x10>
  }
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	48000400 	.word	0x48000400
 800293c:	48000800 	.word	0x48000800
 8002940:	48000c00 	.word	0x48000c00
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002964:	e002      	b.n	800296c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43d9      	mvns	r1, r3
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	400b      	ands	r3, r1
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f000 bef4 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 816a 	beq.w	8002caa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029d6:	4bb3      	ldr	r3, [pc, #716]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e2:	4bb0      	ldr	r3, [pc, #704]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d159      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
 80029ee:	4bad      	ldr	r3, [pc, #692]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d152      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
 80029fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a00:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_OscConfig+0x82>
 8002a28:	4b9e      	ldr	r3, [pc, #632]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0xae>
 8002a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a32:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a46:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a4a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a56:	4b93      	ldr	r3, [pc, #588]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a5e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 810c 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x2fc>
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 8106 	bne.w	8002ca8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f000 be86 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x110>
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7c      	ldr	r2, [pc, #496]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e030      	b.n	8002b1e <HAL_RCC_OscConfig+0x172>
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x134>
 8002ac6:	4b77      	ldr	r3, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a76      	ldr	r2, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b74      	ldr	r3, [pc, #464]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a73      	ldr	r2, [pc, #460]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01e      	b.n	8002b1e <HAL_RCC_OscConfig+0x172>
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x15a>
 8002aec:	4b6d      	ldr	r3, [pc, #436]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6c      	ldr	r2, [pc, #432]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a69      	ldr	r2, [pc, #420]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x172>
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a66      	ldr	r2, [pc, #408]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a63      	ldr	r2, [pc, #396]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	495d      	ldr	r1, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d059      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fb20 	bl	8001180 <HAL_GetTick>
 8002b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b46:	f7fe fb1b 	bl	8001180 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d902      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f000 be29 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_OscConfig+0x1e2>
 8002b88:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x20e>
 8002b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b92:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002baa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bbe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bc2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ab      	beq.n	8002b46 <HAL_RCC_OscConfig+0x19a>
 8002bee:	e05c      	b.n	8002caa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fac6 	bl	8001180 <HAL_GetTick>
 8002bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fac1 	bl	8001180 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d902      	bls.n	8002c10 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f000 bdcf 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>
 8002c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_OscConfig+0x296>
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x2c2>
 8002c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c5e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCC_OscConfig+0x2f8>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c7a:	fa92 f2a2 	rbit	r2, r2
 8002c7e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c82:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c86:	fab2 f282 	clz	r2, r2
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f042 0220 	orr.w	r2, r2, #32
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f002 021f 	and.w	r2, r2, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ab      	bne.n	8002bfa <HAL_RCC_OscConfig+0x24e>
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_OscConfig+0x2fe>
 8002ca4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 816f 	beq.w	8002f98 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cba:	4bd0      	ldr	r3, [pc, #832]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cc6:	4bcd      	ldr	r3, [pc, #820]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d16c      	bne.n	8002dac <HAL_RCC_OscConfig+0x400>
 8002cd2:	4bca      	ldr	r3, [pc, #808]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d166      	bne.n	8002dac <HAL_RCC_OscConfig+0x400>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cf0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_OscConfig+0x362>
 8002d08:	4bbc      	ldr	r3, [pc, #752]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	e013      	b.n	8002d36 <HAL_RCC_OscConfig+0x38a>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d20:	2302      	movs	r3, #2
 8002d22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d32:	4bb2      	ldr	r3, [pc, #712]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2202      	movs	r2, #2
 8002d38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d48:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3cc>
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f000 bd1b 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	21f8      	movs	r1, #248	; 0xf8
 8002d88:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d90:	fa91 f1a1 	rbit	r1, r1
 8002d94:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d98:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d9c:	fab1 f181 	clz	r1, r1
 8002da0:	b2c9      	uxtb	r1, r1
 8002da2:	408b      	lsls	r3, r1
 8002da4:	4995      	ldr	r1, [pc, #596]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e0f5      	b.n	8002f98 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8085 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x516>
 8002db8:	2301      	movs	r3, #1
 8002dba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002dca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	461a      	mov	r2, r3
 8002de0:	2301      	movs	r3, #1
 8002de2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe f9cc 	bl	8001180 <HAL_GetTick>
 8002de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fe f9c7 	bl	8001180 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	f000 bcd5 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>
 8002e04:	2302      	movs	r3, #2
 8002e06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCC_OscConfig+0x488>
 8002e2e:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	e013      	b.n	8002e5c <HAL_RCC_OscConfig+0x4b0>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e46:	2302      	movs	r3, #2
 8002e48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e58:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0220 	orr.w	r2, r2, #32
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0af      	beq.n	8002dee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b5b      	ldr	r3, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	21f8      	movs	r1, #248	; 0xf8
 8002e9e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ea6:	fa91 f1a1 	rbit	r1, r1
 8002eaa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002eae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002eb2:	fab1 f181 	clz	r1, r1
 8002eb6:	b2c9      	uxtb	r1, r1
 8002eb8:	408b      	lsls	r3, r1
 8002eba:	4950      	ldr	r1, [pc, #320]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e06a      	b.n	8002f98 <HAL_RCC_OscConfig+0x5ec>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ed4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2300      	movs	r3, #0
 8002eec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe f947 	bl	8001180 <HAL_GetTick>
 8002ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe f942 	bl	8001180 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d902      	bls.n	8002f0e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f000 bc50 	b.w	80037ae <HAL_RCC_OscConfig+0xe02>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_OscConfig+0x592>
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	e013      	b.n	8002f66 <HAL_RCC_OscConfig+0x5ba>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f50:	2302      	movs	r3, #2
 8002f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_RCC_OscConfig+0x650>)
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2202      	movs	r2, #2
 8002f68:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f70:	fa92 f2a2 	rbit	r2, r2
 8002f74:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f78:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1af      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80da 	beq.w	800315c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d069      	beq.n	8003086 <HAL_RCC_OscConfig+0x6da>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x654>)
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2301      	movs	r3, #1
 8002fda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe f8d0 	bl	8001180 <HAL_GetTick>
 8002fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe f8cb 	bl	8001180 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d906      	bls.n	8003004 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e3d9      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	10908120 	.word	0x10908120
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003016:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003044:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4ba5      	ldr	r3, [pc, #660]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800304e:	2102      	movs	r1, #2
 8003050:	6019      	str	r1, [r3, #0]
 8003052:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f1a3 	rbit	r1, r3
 800305c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003060:	6019      	str	r1, [r3, #0]
  return result;
 8003062:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0b0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x63a>
 8003084:	e06a      	b.n	800315c <HAL_RCC_OscConfig+0x7b0>
 8003086:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x934>)
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7fe f862 	bl	8001180 <HAL_GetTick>
 80030bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fe f85d 	bl	8001180 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e36b      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 80030d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030da:	2202      	movs	r2, #2
 80030dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800310a:	2202      	movs	r2, #2
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800311c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311e:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003122:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003126:	2102      	movs	r1, #2
 8003128:	6019      	str	r1, [r3, #0]
 800312a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f1a3 	rbit	r1, r3
 8003134:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003138:	6019      	str	r1, [r3, #0]
  return result;
 800313a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1b2      	bne.n	80030c2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8158 	beq.w	800341c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b57      	ldr	r3, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4a56      	ldr	r2, [pc, #344]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	61d3      	str	r3, [r2, #28]
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_RCC_OscConfig+0x938>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11a      	bne.n	80031e6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x938>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a4b      	ldr	r2, [pc, #300]	; (80032e4 <HAL_RCC_OscConfig+0x938>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031bc:	f7fd ffe0 	bl	8001180 <HAL_GetTick>
 80031c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e009      	b.n	80031da <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fd ffdb 	bl	8001180 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e2e9      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCC_OscConfig+0x938>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ef      	beq.n	80031c6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x852>
 80031f0:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a39      	ldr	r2, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e02f      	b.n	800325e <HAL_RCC_OscConfig+0x8b2>
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x876>
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a30      	ldr	r2, [pc, #192]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800321a:	f023 0304 	bic.w	r3, r3, #4
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e01d      	b.n	800325e <HAL_RCC_OscConfig+0x8b2>
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x89a>
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a27      	ldr	r2, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0x8b2>
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d06b      	beq.n	8003340 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003268:	f7fd ff8a 	bl	8001180 <HAL_GetTick>
 800326c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	e00b      	b.n	800328a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fd ff85 	bl	8001180 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e291      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 800328a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800328e:	2202      	movs	r2, #2
 8003290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032a6:	2202      	movs	r2, #2
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032b8:	601a      	str	r2, [r3, #0]
  return result;
 80032ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d109      	bne.n	80032e8 <HAL_RCC_OscConfig+0x93c>
 80032d4:	4b01      	ldr	r3, [pc, #4]	; (80032dc <HAL_RCC_OscConfig+0x930>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x958>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	10908120 	.word	0x10908120
 80032e4:	40007000 	.word	0x40007000
 80032e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4bbb      	ldr	r3, [pc, #748]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003308:	2102      	movs	r1, #2
 800330a:	6011      	str	r1, [r2, #0]
 800330c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	fa92 f1a2 	rbit	r1, r2
 8003316:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800331a:	6011      	str	r1, [r2, #0]
  return result;
 800331c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d099      	beq.n	8003272 <HAL_RCC_OscConfig+0x8c6>
 800333e:	e063      	b.n	8003408 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fd ff1e 	bl	8001180 <HAL_GetTick>
 8003344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd ff19 	bl	8001180 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e225      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 8003362:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800337e:	2202      	movs	r2, #2
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003390:	601a      	str	r2, [r3, #0]
  return result;
 8003392:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003396:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0xa06>
 80033ac:	4b90      	ldr	r3, [pc, #576]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	e00d      	b.n	80033ce <HAL_RCC_OscConfig+0xa22>
 80033b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033d2:	2102      	movs	r1, #2
 80033d4:	6011      	str	r1, [r2, #0]
 80033d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	fa92 f1a2 	rbit	r1, r2
 80033e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033e4:	6011      	str	r1, [r2, #0]
  return result;
 80033e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f002 021f 	and.w	r2, r2, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1a0      	bne.n	800334a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003408:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a76      	ldr	r2, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 81c2 	beq.w	80037ac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	f000 819c 	beq.w	800376e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	2b02      	cmp	r3, #2
 800343e:	f040 8114 	bne.w	800366a <HAL_RCC_OscConfig+0xcbe>
 8003442:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800344a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800345a:	601a      	str	r2, [r3, #0]
  return result;
 800345c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003460:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800346c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	461a      	mov	r2, r3
 8003474:	2300      	movs	r3, #0
 8003476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fd fe82 	bl	8001180 <HAL_GetTick>
 800347c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	e009      	b.n	8003496 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fd fe7d 	bl	8001180 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e18b      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 8003496:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800349a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_OscConfig+0xb24>
 80034ca:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e01b      	b.n	8003508 <HAL_RCC_OscConfig+0xb5c>
 80034d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800350c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003510:	6011      	str	r1, [r2, #0]
 8003512:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	fa92 f1a2 	rbit	r1, r2
 800351c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003520:	6011      	str	r1, [r2, #0]
  return result;
 8003522:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f002 021f 	and.w	r2, r2, #31
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d19e      	bne.n	8003482 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003544:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	430b      	orrs	r3, r1
 800355a:	4925      	ldr	r1, [pc, #148]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
 8003560:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003578:	601a      	str	r2, [r3, #0]
  return result;
 800357a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800357e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800358a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	461a      	mov	r2, r3
 8003592:	2301      	movs	r3, #1
 8003594:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd fdf3 	bl	8001180 <HAL_GetTick>
 800359a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359e:	e009      	b.n	80035b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fd fdee 	bl	8001180 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0fc      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 80035b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fa93 f2a3 	rbit	r2, r3
 80035c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035cc:	601a      	str	r2, [r3, #0]
  return result;
 80035ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0xc48>
 80035e8:	4b01      	ldr	r3, [pc, #4]	; (80035f0 <HAL_RCC_OscConfig+0xc44>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	e01e      	b.n	800362c <HAL_RCC_OscConfig+0xc80>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	fa93 f2a3 	rbit	r2, r3
 8003608:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f2a3 	rbit	r2, r3
 8003622:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <HAL_RCC_OscConfig+0xe0c>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003630:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003634:	6011      	str	r1, [r2, #0]
 8003636:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	fa92 f1a2 	rbit	r1, r2
 8003640:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003644:	6011      	str	r1, [r2, #0]
  return result;
 8003646:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	fab2 f282 	clz	r2, r2
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f042 0220 	orr.w	r2, r2, #32
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f002 021f 	and.w	r2, r2, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f202 	lsl.w	r2, r1, r2
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d09b      	beq.n	80035a0 <HAL_RCC_OscConfig+0xbf4>
 8003668:	e0a0      	b.n	80037ac <HAL_RCC_OscConfig+0xe00>
 800366a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800366e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	fa93 f2a3 	rbit	r2, r3
 800367e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003682:	601a      	str	r2, [r3, #0]
  return result;
 8003684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003688:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	461a      	mov	r2, r3
 800369c:	2300      	movs	r3, #0
 800369e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fd fd6e 	bl	8001180 <HAL_GetTick>
 80036a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	e009      	b.n	80036be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fd fd69 	bl	8001180 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e077      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
 80036be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d6:	601a      	str	r2, [r3, #0]
  return result;
 80036d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_RCC_OscConfig+0xd4c>
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCC_OscConfig+0xe0c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	e01b      	b.n	8003730 <HAL_RCC_OscConfig+0xd84>
 80036f8:	f107 0320 	add.w	r3, r7, #32
 80036fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f107 0320 	add.w	r3, r7, #32
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	fa93 f2a3 	rbit	r2, r3
 800370c:	f107 031c 	add.w	r3, r7, #28
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f107 0318 	add.w	r3, r7, #24
 8003716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f107 0318 	add.w	r3, r7, #24
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_OscConfig+0xe0c>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f107 0210 	add.w	r2, r7, #16
 8003734:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003738:	6011      	str	r1, [r2, #0]
 800373a:	f107 0210 	add.w	r2, r7, #16
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	fa92 f1a2 	rbit	r1, r2
 8003744:	f107 020c 	add.w	r2, r7, #12
 8003748:	6011      	str	r1, [r2, #0]
  return result;
 800374a:	f107 020c 	add.w	r2, r7, #12
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	fab2 f282 	clz	r2, r2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d19e      	bne.n	80036aa <HAL_RCC_OscConfig+0xcfe>
 800376c:	e01e      	b.n	80037ac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e018      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_RCC_OscConfig+0xe0c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003784:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	429a      	cmp	r2, r3
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003796:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800379a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b09e      	sub	sp, #120	; 0x78
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e162      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b90      	ldr	r3, [pc, #576]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d910      	bls.n	8003804 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b8d      	ldr	r3, [pc, #564]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 0207 	bic.w	r2, r3, #7
 80037ea:	498b      	ldr	r1, [pc, #556]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e14a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	497f      	ldr	r1, [pc, #508]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80dc 	beq.w	80039e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d13c      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xf6>
 8003838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800383c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d102      	bne.n	8003862 <HAL_RCC_ClockConfig+0xa6>
 800385c:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	e00f      	b.n	8003882 <HAL_RCC_ClockConfig+0xc6>
 8003862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003866:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	667b      	str	r3, [r7, #100]	; 0x64
 8003870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
 8003876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003886:	65ba      	str	r2, [r7, #88]	; 0x58
 8003888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388a:	fa92 f2a2 	rbit	r2, r2
 800388e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003892:	fab2 f282 	clz	r2, r2
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	f042 0220 	orr.w	r2, r2, #32
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f002 021f 	and.w	r2, r2, #31
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d17b      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0f3      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d13c      	bne.n	8003934 <HAL_RCC_ClockConfig+0x178>
 80038ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x128>
 80038de:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e00f      	b.n	8003904 <HAL_RCC_ClockConfig+0x148>
 80038e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
 80038f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
 80038f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003900:	4b46      	ldr	r3, [pc, #280]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003908:	63ba      	str	r2, [r7, #56]	; 0x38
 800390a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003914:	fab2 f282 	clz	r2, r2
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f042 0220 	orr.w	r2, r2, #32
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	f002 021f 	and.w	r2, r2, #31
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d13a      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0b2      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
 8003934:	2302      	movs	r3, #2
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_RCC_ClockConfig+0x1a0>
 8003956:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e00d      	b.n	8003978 <HAL_RCC_ClockConfig+0x1bc>
 800395c:	2302      	movs	r3, #2
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2202      	movs	r2, #2
 800397a:	61ba      	str	r2, [r7, #24]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	617a      	str	r2, [r7, #20]
  return result;
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f042 0220 	orr.w	r2, r2, #32
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f002 021f 	and.w	r2, r2, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e079      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	491a      	ldr	r1, [pc, #104]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b8:	f7fd fbe2 	bl	8001180 <HAL_GetTick>
 80039bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fd fbde 	bl	8001180 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e061      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_ClockConfig+0x260>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 020c 	and.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1eb      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d214      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	4906      	ldr	r1, [pc, #24]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e040      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2de>
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	491a      	ldr	r1, [pc, #104]	; (8003aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4912      	ldr	r1, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a5e:	f000 f829 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4601      	mov	r1, r0
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6c:	22f0      	movs	r2, #240	; 0xf0
 8003a6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	fa92 f2a2 	rbit	r2, r2
 8003a76:	60fa      	str	r2, [r7, #12]
  return result;
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	fab2 f282 	clz	r2, r2
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	40d3      	lsrs	r3, r2
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x2ec>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <HAL_RCC_ClockConfig+0x2f0>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_RCC_ClockConfig+0x2f4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fb30 	bl	80010f8 <HAL_InitTick>
  
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3778      	adds	r7, #120	; 0x78
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	080070ec 	.word	0x080070ec
 8003aac:	20000018 	.word	0x20000018
 8003ab0:	2000001c 	.word	0x2000001c

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b08b      	sub	sp, #44	; 0x2c
 8003ab8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x36>
 8003ae2:	e03c      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae6:	623b      	str	r3, [r7, #32]
      break;
 8003ae8:	e03c      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003af0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003af4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	fa92 f2a2 	rbit	r2, r2
 8003afc:	607a      	str	r2, [r7, #4]
  return result;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	40d3      	lsrs	r3, r2
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	220f      	movs	r2, #15
 8003b18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	fa92 f2a2 	rbit	r2, r2
 8003b20:	60fa      	str	r2, [r7, #12]
  return result;
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	40d3      	lsrs	r3, r2
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	e004      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	623b      	str	r3, [r7, #32]
      break;
 8003b5c:	e002      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b60:	623b      	str	r3, [r7, #32]
      break;
 8003b62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	372c      	adds	r7, #44	; 0x2c
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	08007104 	.word	0x08007104
 8003b80:	08007114 	.word	0x08007114
 8003b84:	003d0900 	.word	0x003d0900

08003b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000018 	.word	0x20000018

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ba6:	f7ff ffef 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003baa:	4601      	mov	r1, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	fa92 f2a2 	rbit	r2, r2
 8003bc0:	603a      	str	r2, [r7, #0]
  return result;
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	40d3      	lsrs	r3, r2
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	080070fc 	.word	0x080070fc

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bea:	f7ff ffcd 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bf8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003bfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	fa92 f2a2 	rbit	r2, r2
 8003c04:	603a      	str	r2, [r7, #0]
  return result;
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	fab2 f282 	clz	r2, r2
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	40d3      	lsrs	r3, r2
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	080070fc 	.word	0x080070fc

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b092      	sub	sp, #72	; 0x48
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80d4 	beq.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4c:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10e      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4a4a      	ldr	r2, [pc, #296]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c62:	61d3      	str	r3, [r2, #28]
 8003c64:	4b48      	ldr	r3, [pc, #288]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c82:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd fa77 	bl	8001180 <HAL_GetTick>
 8003c92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fd fa73 	bl	8001180 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e14b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cb4:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8084 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d07c      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2301      	movs	r3, #1
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	461a      	mov	r2, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d26:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04b      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd fa23 	bl	8001180 <HAL_GetTick>
 8003d3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fd fa1f 	bl	8001180 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0f5      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d54:	2302      	movs	r3, #2
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	61fb      	str	r3, [r7, #28]
  return result;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d108      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d82:	4b01      	ldr	r3, [pc, #4]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	e00d      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	10908100 	.word	0x10908100
 8003d94:	2302      	movs	r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2202      	movs	r2, #2
 8003da6:	613a      	str	r2, [r7, #16]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	fa92 f2a2 	rbit	r2, r2
 8003dae:	60fa      	str	r2, [r7, #12]
  return result;
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f002 021f 	and.w	r2, r2, #31
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0b7      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dce:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	495b      	ldr	r1, [pc, #364]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de8:	4b57      	ldr	r3, [pc, #348]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4a56      	ldr	r2, [pc, #344]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e00:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	f023 0203 	bic.w	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	494e      	ldr	r1, [pc, #312]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f023 0210 	bic.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4947      	ldr	r1, [pc, #284]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	493f      	ldr	r1, [pc, #252]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f023 0220 	bic.w	r2, r3, #32
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	4938      	ldr	r1, [pc, #224]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	4930      	ldr	r1, [pc, #192]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4929      	ldr	r1, [pc, #164]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4921      	ldr	r1, [pc, #132]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	491a      	ldr	r1, [pc, #104]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	4912      	ldr	r1, [pc, #72]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	490b      	ldr	r1, [pc, #44]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4903      	ldr	r1, [pc, #12]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3748      	adds	r7, #72	; 0x48
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000

08003f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e049      	b.n	8003ff2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fc fde4 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fc12 	bl	80047b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e03b      	b.n	800408c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_Base_Start_IT+0x9c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIM_Base_Start_IT+0x4e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d004      	beq.n	800404a <HAL_TIM_Base_Start_IT+0x4e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_TIM_Base_Start_IT+0xa0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d115      	bne.n	8004076 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004052:	4013      	ands	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b06      	cmp	r3, #6
 800405a:	d015      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x8c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004062:	d011      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	e008      	b.n	8004088 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e000      	b.n	800408a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40014000 	.word	0x40014000
 80040a0:	00010007 	.word	0x00010007

080040a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e049      	b.n	800414a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f841 	bl	8004152 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f000 fb66 	bl	80047b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e041      	b.n	80041fe <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f839 	bl	8004206 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 fb04 	bl	80047b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0208 	bic.w	r2, r2, #8
 80041ba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d122      	bne.n	8004276 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d11b      	bne.n	8004276 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f06f 0202 	mvn.w	r2, #2
 8004246:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa8a 	bl	8004776 <HAL_TIM_IC_CaptureCallback>
 8004262:	e005      	b.n	8004270 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa7c 	bl	8004762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa8d 	bl	800478a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d122      	bne.n	80042ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d11b      	bne.n	80042ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0204 	mvn.w	r2, #4
 800429a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa60 	bl	8004776 <HAL_TIM_IC_CaptureCallback>
 80042b6:	e005      	b.n	80042c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa52 	bl	8004762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa63 	bl	800478a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d122      	bne.n	800431e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d11b      	bne.n	800431e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0208 	mvn.w	r2, #8
 80042ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fa36 	bl	8004776 <HAL_TIM_IC_CaptureCallback>
 800430a:	e005      	b.n	8004318 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa28 	bl	8004762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa39 	bl	800478a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d122      	bne.n	8004372 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d11b      	bne.n	8004372 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f06f 0210 	mvn.w	r2, #16
 8004342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2208      	movs	r2, #8
 8004348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa0c 	bl	8004776 <HAL_TIM_IC_CaptureCallback>
 800435e:	e005      	b.n	800436c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9fe 	bl	8004762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa0f 	bl	800478a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10e      	bne.n	800439e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f06f 0201 	mvn.w	r2, #1
 8004396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fc fe27 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d10e      	bne.n	80043ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 ff1f 	bl	8005208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d107      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 ff12 	bl	800521c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d10e      	bne.n	8004424 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d107      	bne.n	8004424 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9bd 	bl	800479e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b20      	cmp	r3, #32
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b20      	cmp	r3, #32
 800443e:	d107      	bne.n	8004450 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0220 	mvn.w	r2, #32
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fed2 	bl	80051f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004472:	2302      	movs	r3, #2
 8004474:	e066      	b.n	8004544 <HAL_TIM_OC_ConfigChannel+0xec>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b14      	cmp	r3, #20
 8004482:	d857      	bhi.n	8004534 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044e1 	.word	0x080044e1
 8004490:	08004535 	.word	0x08004535
 8004494:	08004535 	.word	0x08004535
 8004498:	08004535 	.word	0x08004535
 800449c:	080044ef 	.word	0x080044ef
 80044a0:	08004535 	.word	0x08004535
 80044a4:	08004535 	.word	0x08004535
 80044a8:	08004535 	.word	0x08004535
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	08004535 	.word	0x08004535
 80044b4:	08004535 	.word	0x08004535
 80044b8:	08004535 	.word	0x08004535
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	08004535 	.word	0x08004535
 80044c4:	08004535 	.word	0x08004535
 80044c8:	08004535 	.word	0x08004535
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004535 	.word	0x08004535
 80044d4:	08004535 	.word	0x08004535
 80044d8:	08004535 	.word	0x08004535
 80044dc:	08004527 	.word	0x08004527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f9d2 	bl	8004890 <TIM_OC1_SetConfig>
      break;
 80044ec:	e025      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fa51 	bl	800499c <TIM_OC2_SetConfig>
      break;
 80044fa:	e01e      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 faca 	bl	8004a9c <TIM_OC3_SetConfig>
      break;
 8004508:	e017      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fb41 	bl	8004b98 <TIM_OC4_SetConfig>
      break;
 8004516:	e010      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fb9e 	bl	8004c60 <TIM_OC5_SetConfig>
      break;
 8004524:	e009      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fbf5 	bl	8004d1c <TIM_OC6_SetConfig>
      break;
 8004532:	e002      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIM_ConfigClockSource+0x1c>
 8004564:	2302      	movs	r3, #2
 8004566:	e0b6      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x18a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800458a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a4:	d03e      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0xd8>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	f200 8087 	bhi.w	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	f000 8086 	beq.w	80046c2 <HAL_TIM_ConfigClockSource+0x176>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d87f      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045bc:	2b70      	cmp	r3, #112	; 0x70
 80045be:	d01a      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xaa>
 80045c0:	2b70      	cmp	r3, #112	; 0x70
 80045c2:	d87b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d050      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x11e>
 80045c8:	2b60      	cmp	r3, #96	; 0x60
 80045ca:	d877      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d03c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xfe>
 80045d0:	2b50      	cmp	r3, #80	; 0x50
 80045d2:	d873      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d058      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x13e>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d86f      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d064      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15e>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d86b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d060      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15e>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d867      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d05c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15e>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d05a      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15e>
 80045f4:	e062      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f000 fcf6 	bl	8004ff6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	609a      	str	r2, [r3, #8]
      break;
 8004622:	e04f      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f000 fcdf 	bl	8004ff6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004646:	609a      	str	r2, [r3, #8]
      break;
 8004648:	e03c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	461a      	mov	r2, r3
 8004658:	f000 fc53 	bl	8004f02 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2150      	movs	r1, #80	; 0x50
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fcac 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004668:	e02c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fc72 	bl	8004f60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2160      	movs	r1, #96	; 0x60
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fc9c 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004688:	e01c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fc33 	bl	8004f02 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fc8c 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 80046a8:	e00c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fc83 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 80046ba:	e003      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      break;
 80046c0:	e000      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e031      	b.n	800475a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb67 	bl	8004ddc <TIM_SlaveTimer_SetConfig>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e018      	b.n	800475a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004746:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	; (8004880 <TIM_Base_SetConfig+0xcc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x20>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <TIM_Base_SetConfig+0xcc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <TIM_Base_SetConfig+0x5a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d00b      	beq.n	800480e <TIM_Base_SetConfig+0x5a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <TIM_Base_SetConfig+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0x5a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a21      	ldr	r2, [pc, #132]	; (8004888 <TIM_Base_SetConfig+0xd4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x5a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a20      	ldr	r2, [pc, #128]	; (800488c <TIM_Base_SetConfig+0xd8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <TIM_Base_SetConfig+0xcc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0xb0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <TIM_Base_SetConfig+0xd0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0xb0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <TIM_Base_SetConfig+0xd4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0xb0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <TIM_Base_SetConfig+0xd8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800

08004890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 0302 	bic.w	r3, r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a28      	ldr	r2, [pc, #160]	; (800498c <TIM_OC1_SetConfig+0xfc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_OC1_SetConfig+0x78>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <TIM_OC1_SetConfig+0x100>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_OC1_SetConfig+0x78>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a26      	ldr	r2, [pc, #152]	; (8004994 <TIM_OC1_SetConfig+0x104>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC1_SetConfig+0x78>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a25      	ldr	r2, [pc, #148]	; (8004998 <TIM_OC1_SetConfig+0x108>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10c      	bne.n	8004922 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0308 	bic.w	r3, r3, #8
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <TIM_OC1_SetConfig+0xfc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_OC1_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a18      	ldr	r2, [pc, #96]	; (8004990 <TIM_OC1_SetConfig+0x100>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_OC1_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <TIM_OC1_SetConfig+0x104>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_OC1_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <TIM_OC1_SetConfig+0x108>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d111      	bne.n	8004966 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	621a      	str	r2, [r3, #32]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <TIM_OC2_SetConfig+0xf0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <TIM_OC2_SetConfig+0xf0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_OC2_SetConfig+0xa0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <TIM_OC2_SetConfig+0xf4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_OC2_SetConfig+0xa0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <TIM_OC2_SetConfig+0xf8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC2_SetConfig+0xa0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <TIM_OC2_SetConfig+0xfc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d113      	bne.n	8004a64 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a42:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a4a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800

08004a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <TIM_OC3_SetConfig+0xec>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10d      	bne.n	8004b1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <TIM_OC3_SetConfig+0xec>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_OC3_SetConfig+0x9e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <TIM_OC3_SetConfig+0xf0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_OC3_SetConfig+0x9e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <TIM_OC3_SetConfig+0xf4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_OC3_SetConfig+0x9e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <TIM_OC3_SetConfig+0xf8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d113      	bne.n	8004b62 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <TIM_OC4_SetConfig+0xb8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC4_SetConfig+0x7c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <TIM_OC4_SetConfig+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC4_SetConfig+0x7c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <TIM_OC4_SetConfig+0xc0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC4_SetConfig+0x7c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <TIM_OC4_SetConfig+0xc4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d109      	bne.n	8004c28 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	019b      	lsls	r3, r3, #6
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC5_SetConfig+0xac>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_OC5_SetConfig+0x72>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <TIM_OC5_SetConfig+0xb0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_OC5_SetConfig+0x72>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <TIM_OC5_SetConfig+0xb4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC5_SetConfig+0x72>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <TIM_OC5_SetConfig+0xb8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d109      	bne.n	8004ce6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <TIM_OC6_SetConfig+0xb0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_OC6_SetConfig+0x74>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <TIM_OC6_SetConfig+0xb4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_OC6_SetConfig+0x74>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_OC6_SetConfig+0xb8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC6_SetConfig+0x74>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <TIM_OC6_SetConfig+0xbc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	f023 0307 	bic.w	r3, r3, #7
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b70      	cmp	r3, #112	; 0x70
 8004e28:	d01a      	beq.n	8004e60 <TIM_SlaveTimer_SetConfig+0x84>
 8004e2a:	2b70      	cmp	r3, #112	; 0x70
 8004e2c:	d860      	bhi.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
 8004e2e:	2b60      	cmp	r3, #96	; 0x60
 8004e30:	d054      	beq.n	8004edc <TIM_SlaveTimer_SetConfig+0x100>
 8004e32:	2b60      	cmp	r3, #96	; 0x60
 8004e34:	d85c      	bhi.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
 8004e36:	2b50      	cmp	r3, #80	; 0x50
 8004e38:	d046      	beq.n	8004ec8 <TIM_SlaveTimer_SetConfig+0xec>
 8004e3a:	2b50      	cmp	r3, #80	; 0x50
 8004e3c:	d858      	bhi.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d019      	beq.n	8004e76 <TIM_SlaveTimer_SetConfig+0x9a>
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d854      	bhi.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
 8004e46:	2b30      	cmp	r3, #48	; 0x30
 8004e48:	d055      	beq.n	8004ef6 <TIM_SlaveTimer_SetConfig+0x11a>
 8004e4a:	2b30      	cmp	r3, #48	; 0x30
 8004e4c:	d850      	bhi.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d051      	beq.n	8004ef6 <TIM_SlaveTimer_SetConfig+0x11a>
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d84c      	bhi.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04d      	beq.n	8004ef6 <TIM_SlaveTimer_SetConfig+0x11a>
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d04b      	beq.n	8004ef6 <TIM_SlaveTimer_SetConfig+0x11a>
 8004e5e:	e047      	b.n	8004ef0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68d9      	ldr	r1, [r3, #12]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f000 f8c1 	bl	8004ff6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004e74:	e040      	b.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d101      	bne.n	8004e82 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e03b      	b.n	8004efa <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]
      break;
 8004ec6:	e017      	b.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6899      	ldr	r1, [r3, #8]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f000 f814 	bl	8004f02 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004eda:	e00d      	b.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f000 f839 	bl	8004f60 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004eee:	e003      	b.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef4:	e000      	b.n	8004ef8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004ef6:	bf00      	nop
  }

  return status;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b087      	sub	sp, #28
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 0201 	bic.w	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 030a 	bic.w	r3, r3, #10
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f023 0210 	bic.w	r2, r3, #16
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	031b      	lsls	r3, r3, #12
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	621a      	str	r2, [r3, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f043 0307 	orr.w	r3, r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005010:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	021a      	lsls	r2, r3, #8
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	431a      	orrs	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4313      	orrs	r3, r2
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800504c:	2302      	movs	r3, #2
 800504e:	e04f      	b.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d004      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40014000 	.word	0x40014000

08005104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e060      	b.n	80051e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a14      	ldr	r2, [pc, #80]	; (80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d115      	bne.n	80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	051b      	lsls	r3, r3, #20
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40012c00 	.word	0x40012c00

080051f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e040      	b.n	80052c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb fd24 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fd16 	bl	8005ca0 <UART_SetConfig>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e022      	b.n	80052c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fe40 	bl	8005f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800529a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fec7 	bl	8006050 <UART_CheckIdleState>
 80052c2:	4603      	mov	r3, r0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	f040 8082 	bne.w	80053ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_UART_Transmit+0x26>
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07a      	b.n	80053ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Transmit+0x38>
 8005300:	2302      	movs	r3, #2
 8005302:	e073      	b.n	80053ec <HAL_UART_Transmit+0x120>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	; 0x21
 8005318:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fb ff31 	bl	8001180 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x80>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800535c:	e02d      	b.n	80053ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 feba 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e039      	b.n	80053ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538a:	b292      	uxth	r2, r2
 800538c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3302      	adds	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e008      	b.n	80053a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	b292      	uxth	r2, r2
 80053a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1cb      	bne.n	800535e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2140      	movs	r1, #64	; 0x40
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fe86 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e005      	b.n	80053ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053ea:	2302      	movs	r3, #2
  }
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005408:	2b20      	cmp	r3, #32
 800540a:	f040 80bf 	bne.w	800558c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_UART_Receive+0x26>
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0b7      	b.n	800558e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UART_Receive+0x38>
 8005428:	2302      	movs	r3, #2
 800542a:	e0b0      	b.n	800558e <HAL_UART_Receive+0x19a>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2222      	movs	r2, #34	; 0x22
 8005440:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005448:	f7fb fe9a 	bl	8001180 <HAL_GetTick>
 800544c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d10e      	bne.n	8005486 <HAL_UART_Receive+0x92>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <HAL_UART_Receive+0x88>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800547a:	e02d      	b.n	80054d8 <HAL_UART_Receive+0xe4>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	22ff      	movs	r2, #255	; 0xff
 8005480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005484:	e028      	b.n	80054d8 <HAL_UART_Receive+0xe4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <HAL_UART_Receive+0xb6>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Receive+0xac>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22ff      	movs	r2, #255	; 0xff
 800549a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800549e:	e01b      	b.n	80054d8 <HAL_UART_Receive+0xe4>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	227f      	movs	r2, #127	; 0x7f
 80054a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054a8:	e016      	b.n	80054d8 <HAL_UART_Receive+0xe4>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b2:	d10d      	bne.n	80054d0 <HAL_UART_Receive+0xdc>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d104      	bne.n	80054c6 <HAL_UART_Receive+0xd2>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	227f      	movs	r2, #127	; 0x7f
 80054c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054c4:	e008      	b.n	80054d8 <HAL_UART_Receive+0xe4>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	223f      	movs	r2, #63	; 0x3f
 80054ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ce:	e003      	b.n	80054d8 <HAL_UART_Receive+0xe4>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d108      	bne.n	80054fc <HAL_UART_Receive+0x108>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e003      	b.n	8005504 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800550c:	e033      	b.n	8005576 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2120      	movs	r1, #32
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fde2 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e032      	b.n	800558e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10c      	bne.n	8005548 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005534:	b29a      	uxth	r2, r3
 8005536:	8a7b      	ldrh	r3, [r7, #18]
 8005538:	4013      	ands	r3, r2
 800553a:	b29a      	uxth	r2, r3
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	3302      	adds	r3, #2
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	e00d      	b.n	8005564 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800554e:	b29b      	uxth	r3, r3
 8005550:	b2da      	uxtb	r2, r3
 8005552:	8a7b      	ldrh	r3, [r7, #18]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	4013      	ands	r3, r2
 8005558:	b2da      	uxtb	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3301      	adds	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1c5      	bne.n	800550e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	e000      	b.n	800558e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d178      	bne.n	80056a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_UART_Transmit_DMA+0x22>
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e071      	b.n	80056a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Transmit_DMA+0x34>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e06a      	b.n	80056a2 <HAL_UART_Transmit_DMA+0x10a>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2221      	movs	r2, #33	; 0x21
 80055f6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02b      	beq.n	8005658 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	4a29      	ldr	r2, [pc, #164]	; (80056ac <HAL_UART_Transmit_DMA+0x114>)
 8005606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560c:	4a28      	ldr	r2, [pc, #160]	; (80056b0 <HAL_UART_Transmit_DMA+0x118>)
 800560e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005614:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <HAL_UART_Transmit_DMA+0x11c>)
 8005616:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561c:	2200      	movs	r2, #0
 800561e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	4619      	mov	r1, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3328      	adds	r3, #40	; 0x28
 8005630:	461a      	mov	r2, r3
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	f7fc fe4e 	bl	80022d4 <HAL_DMA_Start_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2210      	movs	r2, #16
 8005642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e024      	b.n	80056a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2240      	movs	r2, #64	; 0x40
 800565e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	613b      	str	r3, [r7, #16]
   return(result);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3308      	adds	r3, #8
 8005686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005688:	623a      	str	r2, [r7, #32]
 800568a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	69f9      	ldr	r1, [r7, #28]
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	61bb      	str	r3, [r7, #24]
   return(result);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e5      	bne.n	8005668 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	e000      	b.n	80056a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80056a0:	2302      	movs	r3, #2
  }
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3728      	adds	r7, #40	; 0x28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	0800637d 	.word	0x0800637d
 80056b0:	08006411 	.word	0x08006411
 80056b4:	0800642d 	.word	0x0800642d

080056b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0ba      	sub	sp, #232	; 0xe8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80056e6:	4013      	ands	r3, r2
 80056e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d115      	bne.n	8005720 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00f      	beq.n	8005720 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 82a3 	beq.w	8005c5c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
      }
      return;
 800571e:	e29d      	b.n	8005c5c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8117 	beq.w	8005958 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800572a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005736:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800573a:	4b85      	ldr	r3, [pc, #532]	; (8005950 <HAL_UART_IRQHandler+0x298>)
 800573c:	4013      	ands	r3, r2
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 810a 	beq.w	8005958 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d011      	beq.n	8005774 <HAL_UART_IRQHandler+0xbc>
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576a:	f043 0201 	orr.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d011      	beq.n	80057a4 <HAL_UART_IRQHandler+0xec>
 8005780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2202      	movs	r2, #2
 8005792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_UART_IRQHandler+0x11c>
 80057b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2204      	movs	r2, #4
 80057c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ca:	f043 0202 	orr.w	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d017      	beq.n	8005810 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2208      	movs	r2, #8
 80057fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005806:	f043 0208 	orr.w	r2, r3, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <HAL_UART_IRQHandler+0x18a>
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8209 	beq.w	8005c60 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800585a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800588e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005892:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04f      	beq.n	800593a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fd0b 	bl	80062b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d141      	bne.n	8005932 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d9      	bne.n	80058ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d013      	beq.n	800592a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <HAL_UART_IRQHandler+0x29c>)
 8005908:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	4618      	mov	r0, r3
 8005910:	f7fc fd78 	bl	8002404 <HAL_DMA_Abort_IT>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d017      	beq.n	800594a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	e00f      	b.n	800594a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fa ffca 	bl	80008c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e00b      	b.n	800594a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fa ffc6 	bl	80008c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e007      	b.n	800594a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fa ffc2 	bl	80008c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005948:	e18a      	b.n	8005c60 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594a:	bf00      	nop
    return;
 800594c:	e188      	b.n	8005c60 <HAL_UART_IRQHandler+0x5a8>
 800594e:	bf00      	nop
 8005950:	04000120 	.word	0x04000120
 8005954:	080064a9 	.word	0x080064a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	2b01      	cmp	r3, #1
 800595e:	f040 8143 	bne.w	8005be8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 813c 	beq.w	8005be8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8135 	beq.w	8005be8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2210      	movs	r2, #16
 8005984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	f040 80b1 	bne.w	8005af8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 815c 	beq.w	8005c64 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059b6:	429a      	cmp	r2, r3
 80059b8:	f080 8154 	bcs.w	8005c64 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	f000 8085 	beq.w	8005adc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1da      	bne.n	80059d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e1      	bne.n	8005a1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e3      	bne.n	8005a58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ac0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e4      	bne.n	8005a9c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fc fc5b 	bl	8002392 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f8c9 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005af6:	e0b5      	b.n	8005c64 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80a7 	beq.w	8005c68 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80a2 	beq.w	8005c68 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
 8005b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e4      	bne.n	8005b24 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e3      	bne.n	8005b5a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0310 	bic.w	r3, r3, #16
 8005bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e4      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f851 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be6:	e03f      	b.n	8005c68 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00e      	beq.n	8005c12 <HAL_UART_IRQHandler+0x55a>
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fc8c 	bl	8006528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c10:	e02d      	b.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01c      	beq.n	8005c6c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
    }
    return;
 8005c3a:	e017      	b.n	8005c6c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d012      	beq.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00c      	beq.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fc3d 	bl	80064d4 <UART_EndTransmit_IT>
    return;
 8005c5a:	e008      	b.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c5c:	bf00      	nop
 8005c5e:	e006      	b.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005c60:	bf00      	nop
 8005c62:	e004      	b.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005c6c:	bf00      	nop
  }

}
 8005c6e:	37e8      	adds	r7, #232	; 0xe8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	4b8a      	ldr	r3, [pc, #552]	; (8005ef4 <UART_SetConfig+0x254>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a78      	ldr	r2, [pc, #480]	; (8005ef8 <UART_SetConfig+0x258>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d120      	bne.n	8005d5e <UART_SetConfig+0xbe>
 8005d1c:	4b77      	ldr	r3, [pc, #476]	; (8005efc <UART_SetConfig+0x25c>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d817      	bhi.n	8005d58 <UART_SetConfig+0xb8>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x90>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d4d 	.word	0x08005d4d
 8005d38:	08005d53 	.word	0x08005d53
 8005d3c:	08005d47 	.word	0x08005d47
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e01d      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d46:	2302      	movs	r3, #2
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e01a      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e017      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d52:	2308      	movs	r3, #8
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e014      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e011      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a67      	ldr	r2, [pc, #412]	; (8005f00 <UART_SetConfig+0x260>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d102      	bne.n	8005d6e <UART_SetConfig+0xce>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e009      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a64      	ldr	r2, [pc, #400]	; (8005f04 <UART_SetConfig+0x264>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d102      	bne.n	8005d7e <UART_SetConfig+0xde>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e001      	b.n	8005d82 <UART_SetConfig+0xe2>
 8005d7e:	2310      	movs	r3, #16
 8005d80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8a:	d15b      	bne.n	8005e44 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005d8c:	7ffb      	ldrb	r3, [r7, #31]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d827      	bhi.n	8005de2 <UART_SetConfig+0x142>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0xf8>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005de3 	.word	0x08005de3
 8005da8:	08005dd3 	.word	0x08005dd3
 8005dac:	08005de3 	.word	0x08005de3
 8005db0:	08005de3 	.word	0x08005de3
 8005db4:	08005de3 	.word	0x08005de3
 8005db8:	08005ddb 	.word	0x08005ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f7fd fef0 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8005dc0:	61b8      	str	r0, [r7, #24]
        break;
 8005dc2:	e013      	b.n	8005dec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc4:	f7fd ff0e 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8005dc8:	61b8      	str	r0, [r7, #24]
        break;
 8005dca:	e00f      	b.n	8005dec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dcc:	4b4e      	ldr	r3, [pc, #312]	; (8005f08 <UART_SetConfig+0x268>)
 8005dce:	61bb      	str	r3, [r7, #24]
        break;
 8005dd0:	e00c      	b.n	8005dec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd2:	f7fd fe6f 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8005dd6:	61b8      	str	r0, [r7, #24]
        break;
 8005dd8:	e008      	b.n	8005dec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dde:	61bb      	str	r3, [r7, #24]
        break;
 8005de0:	e004      	b.n	8005dec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d074      	beq.n	8005edc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	005a      	lsls	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b0f      	cmp	r3, #15
 8005e0e:	d916      	bls.n	8005e3e <UART_SetConfig+0x19e>
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e16:	d212      	bcs.n	8005e3e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f023 030f 	bic.w	r3, r3, #15
 8005e20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	89fb      	ldrh	r3, [r7, #14]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	89fa      	ldrh	r2, [r7, #14]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	e04e      	b.n	8005edc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	77bb      	strb	r3, [r7, #30]
 8005e42:	e04b      	b.n	8005edc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e44:	7ffb      	ldrb	r3, [r7, #31]
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d827      	bhi.n	8005e9a <UART_SetConfig+0x1fa>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x1b0>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e7d 	.word	0x08005e7d
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	08005e9b 	.word	0x08005e9b
 8005e60:	08005e8b 	.word	0x08005e8b
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005e9b 	.word	0x08005e9b
 8005e6c:	08005e9b 	.word	0x08005e9b
 8005e70:	08005e93 	.word	0x08005e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7fd fe94 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8005e78:	61b8      	str	r0, [r7, #24]
        break;
 8005e7a:	e013      	b.n	8005ea4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e7c:	f7fd feb2 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8005e80:	61b8      	str	r0, [r7, #24]
        break;
 8005e82:	e00f      	b.n	8005ea4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e84:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <UART_SetConfig+0x268>)
 8005e86:	61bb      	str	r3, [r7, #24]
        break;
 8005e88:	e00c      	b.n	8005ea4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7fd fe13 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8005e8e:	61b8      	str	r0, [r7, #24]
        break;
 8005e90:	e008      	b.n	8005ea4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e96:	61bb      	str	r3, [r7, #24]
        break;
 8005e98:	e004      	b.n	8005ea4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ea2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	085a      	lsrs	r2, r3, #1
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b0f      	cmp	r3, #15
 8005ec4:	d908      	bls.n	8005ed8 <UART_SetConfig+0x238>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d204      	bcs.n	8005ed8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e001      	b.n	8005edc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ee8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	efff69f3 	.word	0xefff69f3
 8005ef8:	40013800 	.word	0x40013800
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40004400 	.word	0x40004400
 8005f04:	40004800 	.word	0x40004800
 8005f08:	007a1200 	.word	0x007a1200

08005f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01a      	beq.n	8006022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600a:	d10a      	bne.n	8006022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006060:	f7fb f88e 	bl	8001180 <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d10e      	bne.n	8006092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f82d 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e023      	b.n	80060da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b04      	cmp	r3, #4
 800609e:	d10e      	bne.n	80060be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f817 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e00d      	b.n	80060da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b09c      	sub	sp, #112	; 0x70
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	e0a5      	b.n	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fa:	f000 80a1 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fe:	f7fb f83f 	bl	8001180 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800610a:	429a      	cmp	r2, r3
 800610c:	d302      	bcc.n	8006114 <UART_WaitOnFlagUntilTimeout+0x32>
 800610e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006110:	2b00      	cmp	r3, #0
 8006112:	d13e      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006128:	667b      	str	r3, [r7, #100]	; 0x64
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006134:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	663b      	str	r3, [r7, #96]	; 0x60
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006166:	64ba      	str	r2, [r7, #72]	; 0x48
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800616c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e067      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04f      	beq.n	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ae:	d147      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	613b      	str	r3, [r7, #16]
   return(result);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	66bb      	str	r3, [r7, #104]	; 0x68
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800620c:	623a      	str	r2, [r7, #32]
 800620e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	61bb      	str	r3, [r7, #24]
   return(result);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e5      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e010      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	429a      	cmp	r2, r3
 800625c:	f43f af4a 	beq.w	80060f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3770      	adds	r7, #112	; 0x70
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b089      	sub	sp, #36	; 0x24
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6979      	ldr	r1, [r7, #20]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	613b      	str	r3, [r7, #16]
   return(result);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e6      	bne.n	8006272 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	679a      	str	r2, [r3, #120]	; 0x78
}
 80062aa:	bf00      	nop
 80062ac:	3724      	adds	r7, #36	; 0x24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b095      	sub	sp, #84	; 0x54
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062dc:	643b      	str	r3, [r7, #64]	; 0x40
 80062de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e6      	bne.n	80062be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	64bb      	str	r3, [r7, #72]	; 0x48
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006310:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	2b01      	cmp	r3, #1
 800632a:	d118      	bne.n	800635e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	60bb      	str	r3, [r7, #8]
   return(result);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f023 0310 	bic.w	r3, r3, #16
 8006340:	647b      	str	r3, [r7, #68]	; 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	613b      	str	r3, [r7, #16]
   return(result);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e6      	bne.n	800632c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006370:	bf00      	nop
 8006372:	3754      	adds	r7, #84	; 0x54
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b090      	sub	sp, #64	; 0x40
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b20      	cmp	r3, #32
 8006390:	d037      	beq.n	8006402 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	2200      	movs	r2, #0
 8006396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	623b      	str	r3, [r7, #32]
   return(result);
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ba:	633a      	str	r2, [r7, #48]	; 0x30
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	60fb      	str	r3, [r7, #12]
   return(result);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	69b9      	ldr	r1, [r7, #24]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	617b      	str	r3, [r7, #20]
   return(result);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e6      	bne.n	80063ce <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006400:	e002      	b.n	8006408 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8006402:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006404:	f7fa fa54 	bl	80008b0 <HAL_UART_TxCpltCallback>
}
 8006408:	bf00      	nop
 800640a:	3740      	adds	r7, #64	; 0x40
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fc28 	bl	8005c74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800643e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006444:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d109      	bne.n	8006468 <UART_DMAError+0x3c>
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b21      	cmp	r3, #33	; 0x21
 8006458:	d106      	bne.n	8006468 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2200      	movs	r2, #0
 800645e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f7ff ff01 	bl	800626a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d109      	bne.n	800648a <UART_DMAError+0x5e>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b22      	cmp	r3, #34	; 0x22
 800647a:	d106      	bne.n	800648a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006484:	6978      	ldr	r0, [r7, #20]
 8006486:	f7ff ff16 	bl	80062b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006490:	f043 0210 	orr.w	r2, r3, #16
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649a:	6978      	ldr	r0, [r7, #20]
 800649c:	f7fa fa12 	bl	80008c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a0:	bf00      	nop
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7fa f9fc 	bl	80008c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e6      	bne.n	80064dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fa f9c8 	bl	80008b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006520:	bf00      	nop
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <__errno>:
 800653c:	4b01      	ldr	r3, [pc, #4]	; (8006544 <__errno+0x8>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000024 	.word	0x20000024

08006548 <__libc_init_array>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	4d0d      	ldr	r5, [pc, #52]	; (8006580 <__libc_init_array+0x38>)
 800654c:	4c0d      	ldr	r4, [pc, #52]	; (8006584 <__libc_init_array+0x3c>)
 800654e:	1b64      	subs	r4, r4, r5
 8006550:	10a4      	asrs	r4, r4, #2
 8006552:	2600      	movs	r6, #0
 8006554:	42a6      	cmp	r6, r4
 8006556:	d109      	bne.n	800656c <__libc_init_array+0x24>
 8006558:	4d0b      	ldr	r5, [pc, #44]	; (8006588 <__libc_init_array+0x40>)
 800655a:	4c0c      	ldr	r4, [pc, #48]	; (800658c <__libc_init_array+0x44>)
 800655c:	f000 fdb4 	bl	80070c8 <_init>
 8006560:	1b64      	subs	r4, r4, r5
 8006562:	10a4      	asrs	r4, r4, #2
 8006564:	2600      	movs	r6, #0
 8006566:	42a6      	cmp	r6, r4
 8006568:	d105      	bne.n	8006576 <__libc_init_array+0x2e>
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006570:	4798      	blx	r3
 8006572:	3601      	adds	r6, #1
 8006574:	e7ee      	b.n	8006554 <__libc_init_array+0xc>
 8006576:	f855 3b04 	ldr.w	r3, [r5], #4
 800657a:	4798      	blx	r3
 800657c:	3601      	adds	r6, #1
 800657e:	e7f2      	b.n	8006566 <__libc_init_array+0x1e>
 8006580:	08007188 	.word	0x08007188
 8006584:	08007188 	.word	0x08007188
 8006588:	08007188 	.word	0x08007188
 800658c:	0800718c 	.word	0x0800718c

08006590 <memset>:
 8006590:	4402      	add	r2, r0
 8006592:	4603      	mov	r3, r0
 8006594:	4293      	cmp	r3, r2
 8006596:	d100      	bne.n	800659a <memset+0xa>
 8006598:	4770      	bx	lr
 800659a:	f803 1b01 	strb.w	r1, [r3], #1
 800659e:	e7f9      	b.n	8006594 <memset+0x4>

080065a0 <_puts_r>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	460e      	mov	r6, r1
 80065a4:	4605      	mov	r5, r0
 80065a6:	b118      	cbz	r0, 80065b0 <_puts_r+0x10>
 80065a8:	6983      	ldr	r3, [r0, #24]
 80065aa:	b90b      	cbnz	r3, 80065b0 <_puts_r+0x10>
 80065ac:	f000 fb0e 	bl	8006bcc <__sinit>
 80065b0:	69ab      	ldr	r3, [r5, #24]
 80065b2:	68ac      	ldr	r4, [r5, #8]
 80065b4:	b913      	cbnz	r3, 80065bc <_puts_r+0x1c>
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 fb08 	bl	8006bcc <__sinit>
 80065bc:	4b2c      	ldr	r3, [pc, #176]	; (8006670 <_puts_r+0xd0>)
 80065be:	429c      	cmp	r4, r3
 80065c0:	d120      	bne.n	8006604 <_puts_r+0x64>
 80065c2:	686c      	ldr	r4, [r5, #4]
 80065c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d405      	bmi.n	80065d6 <_puts_r+0x36>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	0598      	lsls	r0, r3, #22
 80065ce:	d402      	bmi.n	80065d6 <_puts_r+0x36>
 80065d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d2:	f000 fb99 	bl	8006d08 <__retarget_lock_acquire_recursive>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	0719      	lsls	r1, r3, #28
 80065da:	d51d      	bpl.n	8006618 <_puts_r+0x78>
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	b1db      	cbz	r3, 8006618 <_puts_r+0x78>
 80065e0:	3e01      	subs	r6, #1
 80065e2:	68a3      	ldr	r3, [r4, #8]
 80065e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065e8:	3b01      	subs	r3, #1
 80065ea:	60a3      	str	r3, [r4, #8]
 80065ec:	bb39      	cbnz	r1, 800663e <_puts_r+0x9e>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da38      	bge.n	8006664 <_puts_r+0xc4>
 80065f2:	4622      	mov	r2, r4
 80065f4:	210a      	movs	r1, #10
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 f90e 	bl	8006818 <__swbuf_r>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d011      	beq.n	8006624 <_puts_r+0x84>
 8006600:	250a      	movs	r5, #10
 8006602:	e011      	b.n	8006628 <_puts_r+0x88>
 8006604:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <_puts_r+0xd4>)
 8006606:	429c      	cmp	r4, r3
 8006608:	d101      	bne.n	800660e <_puts_r+0x6e>
 800660a:	68ac      	ldr	r4, [r5, #8]
 800660c:	e7da      	b.n	80065c4 <_puts_r+0x24>
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <_puts_r+0xd8>)
 8006610:	429c      	cmp	r4, r3
 8006612:	bf08      	it	eq
 8006614:	68ec      	ldreq	r4, [r5, #12]
 8006616:	e7d5      	b.n	80065c4 <_puts_r+0x24>
 8006618:	4621      	mov	r1, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f94e 	bl	80068bc <__swsetup_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	d0dd      	beq.n	80065e0 <_puts_r+0x40>
 8006624:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800662a:	07da      	lsls	r2, r3, #31
 800662c:	d405      	bmi.n	800663a <_puts_r+0x9a>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	059b      	lsls	r3, r3, #22
 8006632:	d402      	bmi.n	800663a <_puts_r+0x9a>
 8006634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006636:	f000 fb68 	bl	8006d0a <__retarget_lock_release_recursive>
 800663a:	4628      	mov	r0, r5
 800663c:	bd70      	pop	{r4, r5, r6, pc}
 800663e:	2b00      	cmp	r3, #0
 8006640:	da04      	bge.n	800664c <_puts_r+0xac>
 8006642:	69a2      	ldr	r2, [r4, #24]
 8006644:	429a      	cmp	r2, r3
 8006646:	dc06      	bgt.n	8006656 <_puts_r+0xb6>
 8006648:	290a      	cmp	r1, #10
 800664a:	d004      	beq.n	8006656 <_puts_r+0xb6>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	6022      	str	r2, [r4, #0]
 8006652:	7019      	strb	r1, [r3, #0]
 8006654:	e7c5      	b.n	80065e2 <_puts_r+0x42>
 8006656:	4622      	mov	r2, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f000 f8dd 	bl	8006818 <__swbuf_r>
 800665e:	3001      	adds	r0, #1
 8006660:	d1bf      	bne.n	80065e2 <_puts_r+0x42>
 8006662:	e7df      	b.n	8006624 <_puts_r+0x84>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	250a      	movs	r5, #10
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	701d      	strb	r5, [r3, #0]
 800666e:	e7db      	b.n	8006628 <_puts_r+0x88>
 8006670:	08007148 	.word	0x08007148
 8006674:	08007168 	.word	0x08007168
 8006678:	08007128 	.word	0x08007128

0800667c <puts>:
 800667c:	4b02      	ldr	r3, [pc, #8]	; (8006688 <puts+0xc>)
 800667e:	4601      	mov	r1, r0
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	f7ff bf8d 	b.w	80065a0 <_puts_r>
 8006686:	bf00      	nop
 8006688:	20000024 	.word	0x20000024

0800668c <setvbuf>:
 800668c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006690:	461d      	mov	r5, r3
 8006692:	4b5d      	ldr	r3, [pc, #372]	; (8006808 <setvbuf+0x17c>)
 8006694:	681f      	ldr	r7, [r3, #0]
 8006696:	4604      	mov	r4, r0
 8006698:	460e      	mov	r6, r1
 800669a:	4690      	mov	r8, r2
 800669c:	b127      	cbz	r7, 80066a8 <setvbuf+0x1c>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	b913      	cbnz	r3, 80066a8 <setvbuf+0x1c>
 80066a2:	4638      	mov	r0, r7
 80066a4:	f000 fa92 	bl	8006bcc <__sinit>
 80066a8:	4b58      	ldr	r3, [pc, #352]	; (800680c <setvbuf+0x180>)
 80066aa:	429c      	cmp	r4, r3
 80066ac:	d167      	bne.n	800677e <setvbuf+0xf2>
 80066ae:	687c      	ldr	r4, [r7, #4]
 80066b0:	f1b8 0f02 	cmp.w	r8, #2
 80066b4:	d006      	beq.n	80066c4 <setvbuf+0x38>
 80066b6:	f1b8 0f01 	cmp.w	r8, #1
 80066ba:	f200 809f 	bhi.w	80067fc <setvbuf+0x170>
 80066be:	2d00      	cmp	r5, #0
 80066c0:	f2c0 809c 	blt.w	80067fc <setvbuf+0x170>
 80066c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066c6:	07db      	lsls	r3, r3, #31
 80066c8:	d405      	bmi.n	80066d6 <setvbuf+0x4a>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	0598      	lsls	r0, r3, #22
 80066ce:	d402      	bmi.n	80066d6 <setvbuf+0x4a>
 80066d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d2:	f000 fb19 	bl	8006d08 <__retarget_lock_acquire_recursive>
 80066d6:	4621      	mov	r1, r4
 80066d8:	4638      	mov	r0, r7
 80066da:	f000 f9e3 	bl	8006aa4 <_fflush_r>
 80066de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e0:	b141      	cbz	r1, 80066f4 <setvbuf+0x68>
 80066e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e6:	4299      	cmp	r1, r3
 80066e8:	d002      	beq.n	80066f0 <setvbuf+0x64>
 80066ea:	4638      	mov	r0, r7
 80066ec:	f000 fb7a 	bl	8006de4 <_free_r>
 80066f0:	2300      	movs	r3, #0
 80066f2:	6363      	str	r3, [r4, #52]	; 0x34
 80066f4:	2300      	movs	r3, #0
 80066f6:	61a3      	str	r3, [r4, #24]
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	0619      	lsls	r1, r3, #24
 80066fe:	d503      	bpl.n	8006708 <setvbuf+0x7c>
 8006700:	6921      	ldr	r1, [r4, #16]
 8006702:	4638      	mov	r0, r7
 8006704:	f000 fb6e 	bl	8006de4 <_free_r>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	f1b8 0f02 	cmp.w	r8, #2
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	d06c      	beq.n	80067f4 <setvbuf+0x168>
 800671a:	ab01      	add	r3, sp, #4
 800671c:	466a      	mov	r2, sp
 800671e:	4621      	mov	r1, r4
 8006720:	4638      	mov	r0, r7
 8006722:	f000 faf3 	bl	8006d0c <__swhatbuf_r>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	4318      	orrs	r0, r3
 800672a:	81a0      	strh	r0, [r4, #12]
 800672c:	2d00      	cmp	r5, #0
 800672e:	d130      	bne.n	8006792 <setvbuf+0x106>
 8006730:	9d00      	ldr	r5, [sp, #0]
 8006732:	4628      	mov	r0, r5
 8006734:	f000 fb4e 	bl	8006dd4 <malloc>
 8006738:	4606      	mov	r6, r0
 800673a:	2800      	cmp	r0, #0
 800673c:	d155      	bne.n	80067ea <setvbuf+0x15e>
 800673e:	f8dd 9000 	ldr.w	r9, [sp]
 8006742:	45a9      	cmp	r9, r5
 8006744:	d14a      	bne.n	80067dc <setvbuf+0x150>
 8006746:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800674a:	2200      	movs	r2, #0
 800674c:	60a2      	str	r2, [r4, #8]
 800674e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006752:	6022      	str	r2, [r4, #0]
 8006754:	6122      	str	r2, [r4, #16]
 8006756:	2201      	movs	r2, #1
 8006758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800675c:	6162      	str	r2, [r4, #20]
 800675e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006760:	f043 0302 	orr.w	r3, r3, #2
 8006764:	07d2      	lsls	r2, r2, #31
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	d405      	bmi.n	8006776 <setvbuf+0xea>
 800676a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800676e:	d102      	bne.n	8006776 <setvbuf+0xea>
 8006770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006772:	f000 faca 	bl	8006d0a <__retarget_lock_release_recursive>
 8006776:	4628      	mov	r0, r5
 8006778:	b003      	add	sp, #12
 800677a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800677e:	4b24      	ldr	r3, [pc, #144]	; (8006810 <setvbuf+0x184>)
 8006780:	429c      	cmp	r4, r3
 8006782:	d101      	bne.n	8006788 <setvbuf+0xfc>
 8006784:	68bc      	ldr	r4, [r7, #8]
 8006786:	e793      	b.n	80066b0 <setvbuf+0x24>
 8006788:	4b22      	ldr	r3, [pc, #136]	; (8006814 <setvbuf+0x188>)
 800678a:	429c      	cmp	r4, r3
 800678c:	bf08      	it	eq
 800678e:	68fc      	ldreq	r4, [r7, #12]
 8006790:	e78e      	b.n	80066b0 <setvbuf+0x24>
 8006792:	2e00      	cmp	r6, #0
 8006794:	d0cd      	beq.n	8006732 <setvbuf+0xa6>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	b913      	cbnz	r3, 80067a0 <setvbuf+0x114>
 800679a:	4638      	mov	r0, r7
 800679c:	f000 fa16 	bl	8006bcc <__sinit>
 80067a0:	f1b8 0f01 	cmp.w	r8, #1
 80067a4:	bf08      	it	eq
 80067a6:	89a3      	ldrheq	r3, [r4, #12]
 80067a8:	6026      	str	r6, [r4, #0]
 80067aa:	bf04      	itt	eq
 80067ac:	f043 0301 	orreq.w	r3, r3, #1
 80067b0:	81a3      	strheq	r3, [r4, #12]
 80067b2:	89a2      	ldrh	r2, [r4, #12]
 80067b4:	f012 0308 	ands.w	r3, r2, #8
 80067b8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80067bc:	d01c      	beq.n	80067f8 <setvbuf+0x16c>
 80067be:	07d3      	lsls	r3, r2, #31
 80067c0:	bf41      	itttt	mi
 80067c2:	2300      	movmi	r3, #0
 80067c4:	426d      	negmi	r5, r5
 80067c6:	60a3      	strmi	r3, [r4, #8]
 80067c8:	61a5      	strmi	r5, [r4, #24]
 80067ca:	bf58      	it	pl
 80067cc:	60a5      	strpl	r5, [r4, #8]
 80067ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80067d0:	f015 0501 	ands.w	r5, r5, #1
 80067d4:	d115      	bne.n	8006802 <setvbuf+0x176>
 80067d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80067da:	e7c8      	b.n	800676e <setvbuf+0xe2>
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 faf9 	bl	8006dd4 <malloc>
 80067e2:	4606      	mov	r6, r0
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d0ae      	beq.n	8006746 <setvbuf+0xba>
 80067e8:	464d      	mov	r5, r9
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	e7d0      	b.n	8006796 <setvbuf+0x10a>
 80067f4:	2500      	movs	r5, #0
 80067f6:	e7a8      	b.n	800674a <setvbuf+0xbe>
 80067f8:	60a3      	str	r3, [r4, #8]
 80067fa:	e7e8      	b.n	80067ce <setvbuf+0x142>
 80067fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006800:	e7b9      	b.n	8006776 <setvbuf+0xea>
 8006802:	2500      	movs	r5, #0
 8006804:	e7b7      	b.n	8006776 <setvbuf+0xea>
 8006806:	bf00      	nop
 8006808:	20000024 	.word	0x20000024
 800680c:	08007148 	.word	0x08007148
 8006810:	08007168 	.word	0x08007168
 8006814:	08007128 	.word	0x08007128

08006818 <__swbuf_r>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	460e      	mov	r6, r1
 800681c:	4614      	mov	r4, r2
 800681e:	4605      	mov	r5, r0
 8006820:	b118      	cbz	r0, 800682a <__swbuf_r+0x12>
 8006822:	6983      	ldr	r3, [r0, #24]
 8006824:	b90b      	cbnz	r3, 800682a <__swbuf_r+0x12>
 8006826:	f000 f9d1 	bl	8006bcc <__sinit>
 800682a:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <__swbuf_r+0x98>)
 800682c:	429c      	cmp	r4, r3
 800682e:	d12b      	bne.n	8006888 <__swbuf_r+0x70>
 8006830:	686c      	ldr	r4, [r5, #4]
 8006832:	69a3      	ldr	r3, [r4, #24]
 8006834:	60a3      	str	r3, [r4, #8]
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	071a      	lsls	r2, r3, #28
 800683a:	d52f      	bpl.n	800689c <__swbuf_r+0x84>
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	b36b      	cbz	r3, 800689c <__swbuf_r+0x84>
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	1ac0      	subs	r0, r0, r3
 8006846:	6963      	ldr	r3, [r4, #20]
 8006848:	b2f6      	uxtb	r6, r6
 800684a:	4283      	cmp	r3, r0
 800684c:	4637      	mov	r7, r6
 800684e:	dc04      	bgt.n	800685a <__swbuf_r+0x42>
 8006850:	4621      	mov	r1, r4
 8006852:	4628      	mov	r0, r5
 8006854:	f000 f926 	bl	8006aa4 <_fflush_r>
 8006858:	bb30      	cbnz	r0, 80068a8 <__swbuf_r+0x90>
 800685a:	68a3      	ldr	r3, [r4, #8]
 800685c:	3b01      	subs	r3, #1
 800685e:	60a3      	str	r3, [r4, #8]
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	6022      	str	r2, [r4, #0]
 8006866:	701e      	strb	r6, [r3, #0]
 8006868:	6963      	ldr	r3, [r4, #20]
 800686a:	3001      	adds	r0, #1
 800686c:	4283      	cmp	r3, r0
 800686e:	d004      	beq.n	800687a <__swbuf_r+0x62>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	07db      	lsls	r3, r3, #31
 8006874:	d506      	bpl.n	8006884 <__swbuf_r+0x6c>
 8006876:	2e0a      	cmp	r6, #10
 8006878:	d104      	bne.n	8006884 <__swbuf_r+0x6c>
 800687a:	4621      	mov	r1, r4
 800687c:	4628      	mov	r0, r5
 800687e:	f000 f911 	bl	8006aa4 <_fflush_r>
 8006882:	b988      	cbnz	r0, 80068a8 <__swbuf_r+0x90>
 8006884:	4638      	mov	r0, r7
 8006886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006888:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <__swbuf_r+0x9c>)
 800688a:	429c      	cmp	r4, r3
 800688c:	d101      	bne.n	8006892 <__swbuf_r+0x7a>
 800688e:	68ac      	ldr	r4, [r5, #8]
 8006890:	e7cf      	b.n	8006832 <__swbuf_r+0x1a>
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <__swbuf_r+0xa0>)
 8006894:	429c      	cmp	r4, r3
 8006896:	bf08      	it	eq
 8006898:	68ec      	ldreq	r4, [r5, #12]
 800689a:	e7ca      	b.n	8006832 <__swbuf_r+0x1a>
 800689c:	4621      	mov	r1, r4
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 f80c 	bl	80068bc <__swsetup_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d0cb      	beq.n	8006840 <__swbuf_r+0x28>
 80068a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068ac:	e7ea      	b.n	8006884 <__swbuf_r+0x6c>
 80068ae:	bf00      	nop
 80068b0:	08007148 	.word	0x08007148
 80068b4:	08007168 	.word	0x08007168
 80068b8:	08007128 	.word	0x08007128

080068bc <__swsetup_r>:
 80068bc:	4b32      	ldr	r3, [pc, #200]	; (8006988 <__swsetup_r+0xcc>)
 80068be:	b570      	push	{r4, r5, r6, lr}
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	4606      	mov	r6, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	b125      	cbz	r5, 80068d2 <__swsetup_r+0x16>
 80068c8:	69ab      	ldr	r3, [r5, #24]
 80068ca:	b913      	cbnz	r3, 80068d2 <__swsetup_r+0x16>
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 f97d 	bl	8006bcc <__sinit>
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <__swsetup_r+0xd0>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d10f      	bne.n	80068f8 <__swsetup_r+0x3c>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e0:	0719      	lsls	r1, r3, #28
 80068e2:	d42c      	bmi.n	800693e <__swsetup_r+0x82>
 80068e4:	06dd      	lsls	r5, r3, #27
 80068e6:	d411      	bmi.n	800690c <__swsetup_r+0x50>
 80068e8:	2309      	movs	r3, #9
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f6:	e03e      	b.n	8006976 <__swsetup_r+0xba>
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <__swsetup_r+0xd4>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d101      	bne.n	8006902 <__swsetup_r+0x46>
 80068fe:	68ac      	ldr	r4, [r5, #8]
 8006900:	e7eb      	b.n	80068da <__swsetup_r+0x1e>
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <__swsetup_r+0xd8>)
 8006904:	429c      	cmp	r4, r3
 8006906:	bf08      	it	eq
 8006908:	68ec      	ldreq	r4, [r5, #12]
 800690a:	e7e6      	b.n	80068da <__swsetup_r+0x1e>
 800690c:	0758      	lsls	r0, r3, #29
 800690e:	d512      	bpl.n	8006936 <__swsetup_r+0x7a>
 8006910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006912:	b141      	cbz	r1, 8006926 <__swsetup_r+0x6a>
 8006914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006918:	4299      	cmp	r1, r3
 800691a:	d002      	beq.n	8006922 <__swsetup_r+0x66>
 800691c:	4630      	mov	r0, r6
 800691e:	f000 fa61 	bl	8006de4 <_free_r>
 8006922:	2300      	movs	r3, #0
 8006924:	6363      	str	r3, [r4, #52]	; 0x34
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	2300      	movs	r3, #0
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f043 0308 	orr.w	r3, r3, #8
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	b94b      	cbnz	r3, 8006956 <__swsetup_r+0x9a>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694c:	d003      	beq.n	8006956 <__swsetup_r+0x9a>
 800694e:	4621      	mov	r1, r4
 8006950:	4630      	mov	r0, r6
 8006952:	f000 f9ff 	bl	8006d54 <__smakebuf_r>
 8006956:	89a0      	ldrh	r0, [r4, #12]
 8006958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800695c:	f010 0301 	ands.w	r3, r0, #1
 8006960:	d00a      	beq.n	8006978 <__swsetup_r+0xbc>
 8006962:	2300      	movs	r3, #0
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	425b      	negs	r3, r3
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	b943      	cbnz	r3, 8006982 <__swsetup_r+0xc6>
 8006970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006974:	d1ba      	bne.n	80068ec <__swsetup_r+0x30>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	0781      	lsls	r1, r0, #30
 800697a:	bf58      	it	pl
 800697c:	6963      	ldrpl	r3, [r4, #20]
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	e7f4      	b.n	800696c <__swsetup_r+0xb0>
 8006982:	2000      	movs	r0, #0
 8006984:	e7f7      	b.n	8006976 <__swsetup_r+0xba>
 8006986:	bf00      	nop
 8006988:	20000024 	.word	0x20000024
 800698c:	08007148 	.word	0x08007148
 8006990:	08007168 	.word	0x08007168
 8006994:	08007128 	.word	0x08007128

08006998 <__sflush_r>:
 8006998:	898a      	ldrh	r2, [r1, #12]
 800699a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699e:	4605      	mov	r5, r0
 80069a0:	0710      	lsls	r0, r2, #28
 80069a2:	460c      	mov	r4, r1
 80069a4:	d458      	bmi.n	8006a58 <__sflush_r+0xc0>
 80069a6:	684b      	ldr	r3, [r1, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dc05      	bgt.n	80069b8 <__sflush_r+0x20>
 80069ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc02      	bgt.n	80069b8 <__sflush_r+0x20>
 80069b2:	2000      	movs	r0, #0
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d0f9      	beq.n	80069b2 <__sflush_r+0x1a>
 80069be:	2300      	movs	r3, #0
 80069c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c4:	682f      	ldr	r7, [r5, #0]
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	d032      	beq.n	8006a30 <__sflush_r+0x98>
 80069ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	075a      	lsls	r2, r3, #29
 80069d0:	d505      	bpl.n	80069de <__sflush_r+0x46>
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	1ac0      	subs	r0, r0, r3
 80069d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069d8:	b10b      	cbz	r3, 80069de <__sflush_r+0x46>
 80069da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069dc:	1ac0      	subs	r0, r0, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	4602      	mov	r2, r0
 80069e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b0      	blx	r6
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	d106      	bne.n	80069fe <__sflush_r+0x66>
 80069f0:	6829      	ldr	r1, [r5, #0]
 80069f2:	291d      	cmp	r1, #29
 80069f4:	d82c      	bhi.n	8006a50 <__sflush_r+0xb8>
 80069f6:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <__sflush_r+0x108>)
 80069f8:	40ca      	lsrs	r2, r1
 80069fa:	07d6      	lsls	r6, r2, #31
 80069fc:	d528      	bpl.n	8006a50 <__sflush_r+0xb8>
 80069fe:	2200      	movs	r2, #0
 8006a00:	6062      	str	r2, [r4, #4]
 8006a02:	04d9      	lsls	r1, r3, #19
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	6022      	str	r2, [r4, #0]
 8006a08:	d504      	bpl.n	8006a14 <__sflush_r+0x7c>
 8006a0a:	1c42      	adds	r2, r0, #1
 8006a0c:	d101      	bne.n	8006a12 <__sflush_r+0x7a>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	b903      	cbnz	r3, 8006a14 <__sflush_r+0x7c>
 8006a12:	6560      	str	r0, [r4, #84]	; 0x54
 8006a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a16:	602f      	str	r7, [r5, #0]
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	d0ca      	beq.n	80069b2 <__sflush_r+0x1a>
 8006a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a20:	4299      	cmp	r1, r3
 8006a22:	d002      	beq.n	8006a2a <__sflush_r+0x92>
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f9dd 	bl	8006de4 <_free_r>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a2e:	e7c1      	b.n	80069b4 <__sflush_r+0x1c>
 8006a30:	6a21      	ldr	r1, [r4, #32]
 8006a32:	2301      	movs	r3, #1
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	1c41      	adds	r1, r0, #1
 8006a3a:	d1c7      	bne.n	80069cc <__sflush_r+0x34>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0c4      	beq.n	80069cc <__sflush_r+0x34>
 8006a42:	2b1d      	cmp	r3, #29
 8006a44:	d001      	beq.n	8006a4a <__sflush_r+0xb2>
 8006a46:	2b16      	cmp	r3, #22
 8006a48:	d101      	bne.n	8006a4e <__sflush_r+0xb6>
 8006a4a:	602f      	str	r7, [r5, #0]
 8006a4c:	e7b1      	b.n	80069b2 <__sflush_r+0x1a>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	e7ad      	b.n	80069b4 <__sflush_r+0x1c>
 8006a58:	690f      	ldr	r7, [r1, #16]
 8006a5a:	2f00      	cmp	r7, #0
 8006a5c:	d0a9      	beq.n	80069b2 <__sflush_r+0x1a>
 8006a5e:	0793      	lsls	r3, r2, #30
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	bf08      	it	eq
 8006a64:	694b      	ldreq	r3, [r1, #20]
 8006a66:	600f      	str	r7, [r1, #0]
 8006a68:	bf18      	it	ne
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	eba6 0807 	sub.w	r8, r6, r7
 8006a70:	608b      	str	r3, [r1, #8]
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	dd9c      	ble.n	80069b2 <__sflush_r+0x1a>
 8006a78:	6a21      	ldr	r1, [r4, #32]
 8006a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a7c:	4643      	mov	r3, r8
 8006a7e:	463a      	mov	r2, r7
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b0      	blx	r6
 8006a84:	2800      	cmp	r0, #0
 8006a86:	dc06      	bgt.n	8006a96 <__sflush_r+0xfe>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a94:	e78e      	b.n	80069b4 <__sflush_r+0x1c>
 8006a96:	4407      	add	r7, r0
 8006a98:	eba8 0800 	sub.w	r8, r8, r0
 8006a9c:	e7e9      	b.n	8006a72 <__sflush_r+0xda>
 8006a9e:	bf00      	nop
 8006aa0:	20400001 	.word	0x20400001

08006aa4 <_fflush_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	690b      	ldr	r3, [r1, #16]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b913      	cbnz	r3, 8006ab4 <_fflush_r+0x10>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	b118      	cbz	r0, 8006abe <_fflush_r+0x1a>
 8006ab6:	6983      	ldr	r3, [r0, #24]
 8006ab8:	b90b      	cbnz	r3, 8006abe <_fflush_r+0x1a>
 8006aba:	f000 f887 	bl	8006bcc <__sinit>
 8006abe:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <_fflush_r+0x6c>)
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	d11b      	bne.n	8006afc <_fflush_r+0x58>
 8006ac4:	686c      	ldr	r4, [r5, #4]
 8006ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0ef      	beq.n	8006aae <_fflush_r+0xa>
 8006ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ad0:	07d0      	lsls	r0, r2, #31
 8006ad2:	d404      	bmi.n	8006ade <_fflush_r+0x3a>
 8006ad4:	0599      	lsls	r1, r3, #22
 8006ad6:	d402      	bmi.n	8006ade <_fflush_r+0x3a>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ada:	f000 f915 	bl	8006d08 <__retarget_lock_acquire_recursive>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	f7ff ff59 	bl	8006998 <__sflush_r>
 8006ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae8:	07da      	lsls	r2, r3, #31
 8006aea:	4605      	mov	r5, r0
 8006aec:	d4e0      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	d4dd      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af6:	f000 f908 	bl	8006d0a <__retarget_lock_release_recursive>
 8006afa:	e7d9      	b.n	8006ab0 <_fflush_r+0xc>
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <_fflush_r+0x70>)
 8006afe:	429c      	cmp	r4, r3
 8006b00:	d101      	bne.n	8006b06 <_fflush_r+0x62>
 8006b02:	68ac      	ldr	r4, [r5, #8]
 8006b04:	e7df      	b.n	8006ac6 <_fflush_r+0x22>
 8006b06:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <_fflush_r+0x74>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	bf08      	it	eq
 8006b0c:	68ec      	ldreq	r4, [r5, #12]
 8006b0e:	e7da      	b.n	8006ac6 <_fflush_r+0x22>
 8006b10:	08007148 	.word	0x08007148
 8006b14:	08007168 	.word	0x08007168
 8006b18:	08007128 	.word	0x08007128

08006b1c <std>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	e9c0 3300 	strd	r3, r3, [r0]
 8006b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2a:	6083      	str	r3, [r0, #8]
 8006b2c:	8181      	strh	r1, [r0, #12]
 8006b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b30:	81c2      	strh	r2, [r0, #14]
 8006b32:	6183      	str	r3, [r0, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2208      	movs	r2, #8
 8006b38:	305c      	adds	r0, #92	; 0x5c
 8006b3a:	f7ff fd29 	bl	8006590 <memset>
 8006b3e:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <std+0x38>)
 8006b40:	6263      	str	r3, [r4, #36]	; 0x24
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <std+0x3c>)
 8006b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <std+0x40>)
 8006b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <std+0x44>)
 8006b4c:	6224      	str	r4, [r4, #32]
 8006b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b50:	bd10      	pop	{r4, pc}
 8006b52:	bf00      	nop
 8006b54:	08006f59 	.word	0x08006f59
 8006b58:	08006f7b 	.word	0x08006f7b
 8006b5c:	08006fb3 	.word	0x08006fb3
 8006b60:	08006fd7 	.word	0x08006fd7

08006b64 <_cleanup_r>:
 8006b64:	4901      	ldr	r1, [pc, #4]	; (8006b6c <_cleanup_r+0x8>)
 8006b66:	f000 b8af 	b.w	8006cc8 <_fwalk_reent>
 8006b6a:	bf00      	nop
 8006b6c:	08006aa5 	.word	0x08006aa5

08006b70 <__sfmoreglue>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	1e4a      	subs	r2, r1, #1
 8006b74:	2568      	movs	r5, #104	; 0x68
 8006b76:	4355      	muls	r5, r2
 8006b78:	460e      	mov	r6, r1
 8006b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b7e:	f000 f981 	bl	8006e84 <_malloc_r>
 8006b82:	4604      	mov	r4, r0
 8006b84:	b140      	cbz	r0, 8006b98 <__sfmoreglue+0x28>
 8006b86:	2100      	movs	r1, #0
 8006b88:	e9c0 1600 	strd	r1, r6, [r0]
 8006b8c:	300c      	adds	r0, #12
 8006b8e:	60a0      	str	r0, [r4, #8]
 8006b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b94:	f7ff fcfc 	bl	8006590 <memset>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}

08006b9c <__sfp_lock_acquire>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sfp_lock_acquire+0x8>)
 8006b9e:	f000 b8b3 	b.w	8006d08 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000324 	.word	0x20000324

08006ba8 <__sfp_lock_release>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sfp_lock_release+0x8>)
 8006baa:	f000 b8ae 	b.w	8006d0a <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000324 	.word	0x20000324

08006bb4 <__sinit_lock_acquire>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__sinit_lock_acquire+0x8>)
 8006bb6:	f000 b8a7 	b.w	8006d08 <__retarget_lock_acquire_recursive>
 8006bba:	bf00      	nop
 8006bbc:	2000031f 	.word	0x2000031f

08006bc0 <__sinit_lock_release>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__sinit_lock_release+0x8>)
 8006bc2:	f000 b8a2 	b.w	8006d0a <__retarget_lock_release_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	2000031f 	.word	0x2000031f

08006bcc <__sinit>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	4604      	mov	r4, r0
 8006bd0:	f7ff fff0 	bl	8006bb4 <__sinit_lock_acquire>
 8006bd4:	69a3      	ldr	r3, [r4, #24]
 8006bd6:	b11b      	cbz	r3, 8006be0 <__sinit+0x14>
 8006bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bdc:	f7ff bff0 	b.w	8006bc0 <__sinit_lock_release>
 8006be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006be4:	6523      	str	r3, [r4, #80]	; 0x50
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <__sinit+0x68>)
 8006be8:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <__sinit+0x6c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	bf04      	itt	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	61a3      	streq	r3, [r4, #24]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f820 	bl	8006c3c <__sfp>
 8006bfc:	6060      	str	r0, [r4, #4]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 f81c 	bl	8006c3c <__sfp>
 8006c04:	60a0      	str	r0, [r4, #8]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f818 	bl	8006c3c <__sfp>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	60e0      	str	r0, [r4, #12]
 8006c10:	2104      	movs	r1, #4
 8006c12:	6860      	ldr	r0, [r4, #4]
 8006c14:	f7ff ff82 	bl	8006b1c <std>
 8006c18:	68a0      	ldr	r0, [r4, #8]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	2109      	movs	r1, #9
 8006c1e:	f7ff ff7d 	bl	8006b1c <std>
 8006c22:	68e0      	ldr	r0, [r4, #12]
 8006c24:	2202      	movs	r2, #2
 8006c26:	2112      	movs	r1, #18
 8006c28:	f7ff ff78 	bl	8006b1c <std>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	61a3      	str	r3, [r4, #24]
 8006c30:	e7d2      	b.n	8006bd8 <__sinit+0xc>
 8006c32:	bf00      	nop
 8006c34:	08007124 	.word	0x08007124
 8006c38:	08006b65 	.word	0x08006b65

08006c3c <__sfp>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	4607      	mov	r7, r0
 8006c40:	f7ff ffac 	bl	8006b9c <__sfp_lock_acquire>
 8006c44:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <__sfp+0x84>)
 8006c46:	681e      	ldr	r6, [r3, #0]
 8006c48:	69b3      	ldr	r3, [r6, #24]
 8006c4a:	b913      	cbnz	r3, 8006c52 <__sfp+0x16>
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff ffbd 	bl	8006bcc <__sinit>
 8006c52:	3648      	adds	r6, #72	; 0x48
 8006c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	d503      	bpl.n	8006c64 <__sfp+0x28>
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	b30b      	cbz	r3, 8006ca4 <__sfp+0x68>
 8006c60:	6836      	ldr	r6, [r6, #0]
 8006c62:	e7f7      	b.n	8006c54 <__sfp+0x18>
 8006c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c68:	b9d5      	cbnz	r5, 8006ca0 <__sfp+0x64>
 8006c6a:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <__sfp+0x88>)
 8006c6c:	60e3      	str	r3, [r4, #12]
 8006c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c72:	6665      	str	r5, [r4, #100]	; 0x64
 8006c74:	f000 f847 	bl	8006d06 <__retarget_lock_init_recursive>
 8006c78:	f7ff ff96 	bl	8006ba8 <__sfp_lock_release>
 8006c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c84:	6025      	str	r5, [r4, #0]
 8006c86:	61a5      	str	r5, [r4, #24]
 8006c88:	2208      	movs	r2, #8
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c90:	f7ff fc7e 	bl	8006590 <memset>
 8006c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca0:	3468      	adds	r4, #104	; 0x68
 8006ca2:	e7d9      	b.n	8006c58 <__sfp+0x1c>
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	f7ff ff62 	bl	8006b70 <__sfmoreglue>
 8006cac:	4604      	mov	r4, r0
 8006cae:	6030      	str	r0, [r6, #0]
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d1d5      	bne.n	8006c60 <__sfp+0x24>
 8006cb4:	f7ff ff78 	bl	8006ba8 <__sfp_lock_release>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	e7ee      	b.n	8006c9c <__sfp+0x60>
 8006cbe:	bf00      	nop
 8006cc0:	08007124 	.word	0x08007124
 8006cc4:	ffff0001 	.word	0xffff0001

08006cc8 <_fwalk_reent>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	4606      	mov	r6, r0
 8006cce:	4688      	mov	r8, r1
 8006cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cd4:	2700      	movs	r7, #0
 8006cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cda:	f1b9 0901 	subs.w	r9, r9, #1
 8006cde:	d505      	bpl.n	8006cec <_fwalk_reent+0x24>
 8006ce0:	6824      	ldr	r4, [r4, #0]
 8006ce2:	2c00      	cmp	r4, #0
 8006ce4:	d1f7      	bne.n	8006cd6 <_fwalk_reent+0xe>
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cec:	89ab      	ldrh	r3, [r5, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d907      	bls.n	8006d02 <_fwalk_reent+0x3a>
 8006cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	d003      	beq.n	8006d02 <_fwalk_reent+0x3a>
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	47c0      	blx	r8
 8006d00:	4307      	orrs	r7, r0
 8006d02:	3568      	adds	r5, #104	; 0x68
 8006d04:	e7e9      	b.n	8006cda <_fwalk_reent+0x12>

08006d06 <__retarget_lock_init_recursive>:
 8006d06:	4770      	bx	lr

08006d08 <__retarget_lock_acquire_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <__retarget_lock_release_recursive>:
 8006d0a:	4770      	bx	lr

08006d0c <__swhatbuf_r>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	460e      	mov	r6, r1
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	2900      	cmp	r1, #0
 8006d16:	b096      	sub	sp, #88	; 0x58
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	da07      	bge.n	8006d2e <__swhatbuf_r+0x22>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	89b3      	ldrh	r3, [r6, #12]
 8006d24:	061a      	lsls	r2, r3, #24
 8006d26:	d410      	bmi.n	8006d4a <__swhatbuf_r+0x3e>
 8006d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2c:	e00e      	b.n	8006d4c <__swhatbuf_r+0x40>
 8006d2e:	466a      	mov	r2, sp
 8006d30:	f000 f978 	bl	8007024 <_fstat_r>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	dbf2      	blt.n	8006d1e <__swhatbuf_r+0x12>
 8006d38:	9a01      	ldr	r2, [sp, #4]
 8006d3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d42:	425a      	negs	r2, r3
 8006d44:	415a      	adcs	r2, r3
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	e7ee      	b.n	8006d28 <__swhatbuf_r+0x1c>
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	b016      	add	sp, #88	; 0x58
 8006d52:	bd70      	pop	{r4, r5, r6, pc}

08006d54 <__smakebuf_r>:
 8006d54:	898b      	ldrh	r3, [r1, #12]
 8006d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d58:	079d      	lsls	r5, r3, #30
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	d507      	bpl.n	8006d70 <__smakebuf_r+0x1c>
 8006d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	6163      	str	r3, [r4, #20]
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	ab01      	add	r3, sp, #4
 8006d72:	466a      	mov	r2, sp
 8006d74:	f7ff ffca 	bl	8006d0c <__swhatbuf_r>
 8006d78:	9900      	ldr	r1, [sp, #0]
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f000 f881 	bl	8006e84 <_malloc_r>
 8006d82:	b948      	cbnz	r0, 8006d98 <__smakebuf_r+0x44>
 8006d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d88:	059a      	lsls	r2, r3, #22
 8006d8a:	d4ef      	bmi.n	8006d6c <__smakebuf_r+0x18>
 8006d8c:	f023 0303 	bic.w	r3, r3, #3
 8006d90:	f043 0302 	orr.w	r3, r3, #2
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	e7e3      	b.n	8006d60 <__smakebuf_r+0xc>
 8006d98:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <__smakebuf_r+0x7c>)
 8006d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	6020      	str	r0, [r4, #0]
 8006da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	9b00      	ldr	r3, [sp, #0]
 8006da8:	6163      	str	r3, [r4, #20]
 8006daa:	9b01      	ldr	r3, [sp, #4]
 8006dac:	6120      	str	r0, [r4, #16]
 8006dae:	b15b      	cbz	r3, 8006dc8 <__smakebuf_r+0x74>
 8006db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db4:	4630      	mov	r0, r6
 8006db6:	f000 f947 	bl	8007048 <_isatty_r>
 8006dba:	b128      	cbz	r0, 8006dc8 <__smakebuf_r+0x74>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	81a3      	strh	r3, [r4, #12]
 8006dc8:	89a0      	ldrh	r0, [r4, #12]
 8006dca:	4305      	orrs	r5, r0
 8006dcc:	81a5      	strh	r5, [r4, #12]
 8006dce:	e7cd      	b.n	8006d6c <__smakebuf_r+0x18>
 8006dd0:	08006b65 	.word	0x08006b65

08006dd4 <malloc>:
 8006dd4:	4b02      	ldr	r3, [pc, #8]	; (8006de0 <malloc+0xc>)
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f000 b853 	b.w	8006e84 <_malloc_r>
 8006dde:	bf00      	nop
 8006de0:	20000024 	.word	0x20000024

08006de4 <_free_r>:
 8006de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d048      	beq.n	8006e7c <_free_r+0x98>
 8006dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dee:	9001      	str	r0, [sp, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f1a1 0404 	sub.w	r4, r1, #4
 8006df6:	bfb8      	it	lt
 8006df8:	18e4      	addlt	r4, r4, r3
 8006dfa:	f000 f947 	bl	800708c <__malloc_lock>
 8006dfe:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <_free_r+0x9c>)
 8006e00:	9801      	ldr	r0, [sp, #4]
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	4615      	mov	r5, r2
 8006e06:	b933      	cbnz	r3, 8006e16 <_free_r+0x32>
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	6014      	str	r4, [r2, #0]
 8006e0c:	b003      	add	sp, #12
 8006e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e12:	f000 b941 	b.w	8007098 <__malloc_unlock>
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	d90b      	bls.n	8006e32 <_free_r+0x4e>
 8006e1a:	6821      	ldr	r1, [r4, #0]
 8006e1c:	1862      	adds	r2, r4, r1
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bf04      	itt	eq
 8006e22:	681a      	ldreq	r2, [r3, #0]
 8006e24:	685b      	ldreq	r3, [r3, #4]
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	bf04      	itt	eq
 8006e2a:	1852      	addeq	r2, r2, r1
 8006e2c:	6022      	streq	r2, [r4, #0]
 8006e2e:	602c      	str	r4, [r5, #0]
 8006e30:	e7ec      	b.n	8006e0c <_free_r+0x28>
 8006e32:	461a      	mov	r2, r3
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b10b      	cbz	r3, 8006e3c <_free_r+0x58>
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d9fa      	bls.n	8006e32 <_free_r+0x4e>
 8006e3c:	6811      	ldr	r1, [r2, #0]
 8006e3e:	1855      	adds	r5, r2, r1
 8006e40:	42a5      	cmp	r5, r4
 8006e42:	d10b      	bne.n	8006e5c <_free_r+0x78>
 8006e44:	6824      	ldr	r4, [r4, #0]
 8006e46:	4421      	add	r1, r4
 8006e48:	1854      	adds	r4, r2, r1
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	d1dd      	bne.n	8006e0c <_free_r+0x28>
 8006e50:	681c      	ldr	r4, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	6053      	str	r3, [r2, #4]
 8006e56:	4421      	add	r1, r4
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	e7d7      	b.n	8006e0c <_free_r+0x28>
 8006e5c:	d902      	bls.n	8006e64 <_free_r+0x80>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	e7d3      	b.n	8006e0c <_free_r+0x28>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf04      	itt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	bf04      	itt	eq
 8006e74:	1949      	addeq	r1, r1, r5
 8006e76:	6021      	streq	r1, [r4, #0]
 8006e78:	6054      	str	r4, [r2, #4]
 8006e7a:	e7c7      	b.n	8006e0c <_free_r+0x28>
 8006e7c:	b003      	add	sp, #12
 8006e7e:	bd30      	pop	{r4, r5, pc}
 8006e80:	200000ac 	.word	0x200000ac

08006e84 <_malloc_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	1ccd      	adds	r5, r1, #3
 8006e88:	f025 0503 	bic.w	r5, r5, #3
 8006e8c:	3508      	adds	r5, #8
 8006e8e:	2d0c      	cmp	r5, #12
 8006e90:	bf38      	it	cc
 8006e92:	250c      	movcc	r5, #12
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	4606      	mov	r6, r0
 8006e98:	db01      	blt.n	8006e9e <_malloc_r+0x1a>
 8006e9a:	42a9      	cmp	r1, r5
 8006e9c:	d903      	bls.n	8006ea6 <_malloc_r+0x22>
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea6:	f000 f8f1 	bl	800708c <__malloc_lock>
 8006eaa:	4921      	ldr	r1, [pc, #132]	; (8006f30 <_malloc_r+0xac>)
 8006eac:	680a      	ldr	r2, [r1, #0]
 8006eae:	4614      	mov	r4, r2
 8006eb0:	b99c      	cbnz	r4, 8006eda <_malloc_r+0x56>
 8006eb2:	4f20      	ldr	r7, [pc, #128]	; (8006f34 <_malloc_r+0xb0>)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	b923      	cbnz	r3, 8006ec2 <_malloc_r+0x3e>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f000 f83c 	bl	8006f38 <_sbrk_r>
 8006ec0:	6038      	str	r0, [r7, #0]
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f837 	bl	8006f38 <_sbrk_r>
 8006eca:	1c43      	adds	r3, r0, #1
 8006ecc:	d123      	bne.n	8006f16 <_malloc_r+0x92>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f8e0 	bl	8007098 <__malloc_unlock>
 8006ed8:	e7e3      	b.n	8006ea2 <_malloc_r+0x1e>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	1b5b      	subs	r3, r3, r5
 8006ede:	d417      	bmi.n	8006f10 <_malloc_r+0x8c>
 8006ee0:	2b0b      	cmp	r3, #11
 8006ee2:	d903      	bls.n	8006eec <_malloc_r+0x68>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	441c      	add	r4, r3
 8006ee8:	6025      	str	r5, [r4, #0]
 8006eea:	e004      	b.n	8006ef6 <_malloc_r+0x72>
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	bf0c      	ite	eq
 8006ef2:	600b      	streq	r3, [r1, #0]
 8006ef4:	6053      	strne	r3, [r2, #4]
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f8ce 	bl	8007098 <__malloc_unlock>
 8006efc:	f104 000b 	add.w	r0, r4, #11
 8006f00:	1d23      	adds	r3, r4, #4
 8006f02:	f020 0007 	bic.w	r0, r0, #7
 8006f06:	1ac2      	subs	r2, r0, r3
 8006f08:	d0cc      	beq.n	8006ea4 <_malloc_r+0x20>
 8006f0a:	1a1b      	subs	r3, r3, r0
 8006f0c:	50a3      	str	r3, [r4, r2]
 8006f0e:	e7c9      	b.n	8006ea4 <_malloc_r+0x20>
 8006f10:	4622      	mov	r2, r4
 8006f12:	6864      	ldr	r4, [r4, #4]
 8006f14:	e7cc      	b.n	8006eb0 <_malloc_r+0x2c>
 8006f16:	1cc4      	adds	r4, r0, #3
 8006f18:	f024 0403 	bic.w	r4, r4, #3
 8006f1c:	42a0      	cmp	r0, r4
 8006f1e:	d0e3      	beq.n	8006ee8 <_malloc_r+0x64>
 8006f20:	1a21      	subs	r1, r4, r0
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 f808 	bl	8006f38 <_sbrk_r>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d1dd      	bne.n	8006ee8 <_malloc_r+0x64>
 8006f2c:	e7cf      	b.n	8006ece <_malloc_r+0x4a>
 8006f2e:	bf00      	nop
 8006f30:	200000ac 	.word	0x200000ac
 8006f34:	200000b0 	.word	0x200000b0

08006f38 <_sbrk_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d06      	ldr	r5, [pc, #24]	; (8006f54 <_sbrk_r+0x1c>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7f9 ffb4 	bl	8000eb0 <_sbrk>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_sbrk_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_sbrk_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20000328 	.word	0x20000328

08006f58 <__sread>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 f8a0 	bl	80070a4 <_read_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	bfab      	itete	ge
 8006f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f6c:	181b      	addge	r3, r3, r0
 8006f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f72:	bfac      	ite	ge
 8006f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f76:	81a3      	strhlt	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__swrite>:
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	461f      	mov	r7, r3
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	05db      	lsls	r3, r3, #23
 8006f84:	4605      	mov	r5, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	4616      	mov	r6, r2
 8006f8a:	d505      	bpl.n	8006f98 <__swrite+0x1e>
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	2302      	movs	r3, #2
 8006f92:	2200      	movs	r2, #0
 8006f94:	f000 f868 	bl	8007068 <_lseek_r>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	4628      	mov	r0, r5
 8006faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	f000 b817 	b.w	8006fe0 <_write_r>

08006fb2 <__sseek>:
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 f855 	bl	8007068 <_lseek_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	bf15      	itete	ne
 8006fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fce:	81a3      	strheq	r3, [r4, #12]
 8006fd0:	bf18      	it	ne
 8006fd2:	81a3      	strhne	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__sclose>:
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 b813 	b.w	8007004 <_close_r>
	...

08006fe0 <_write_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_write_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7f9 fca6 	bl	8000940 <_write>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_write_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_write_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000328 	.word	0x20000328

08007004 <_close_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d06      	ldr	r5, [pc, #24]	; (8007020 <_close_r+0x1c>)
 8007008:	2300      	movs	r3, #0
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7f9 fcc2 	bl	8000998 <_close>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_close_r+0x1a>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_close_r+0x1a>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000328 	.word	0x20000328

08007024 <_fstat_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	; (8007044 <_fstat_r+0x20>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f7f9 fd01 	bl	8000a38 <_fstat>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d102      	bne.n	8007040 <_fstat_r+0x1c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b103      	cbz	r3, 8007040 <_fstat_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000328 	.word	0x20000328

08007048 <_isatty_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_isatty_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7f9 fc5e 	bl	8000914 <_isatty>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_isatty_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_isatty_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000328 	.word	0x20000328

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	; (8007088 <_lseek_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7f9 fca5 	bl	80009c6 <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000328 	.word	0x20000328

0800708c <__malloc_lock>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__malloc_lock+0x8>)
 800708e:	f7ff be3b 	b.w	8006d08 <__retarget_lock_acquire_recursive>
 8007092:	bf00      	nop
 8007094:	20000320 	.word	0x20000320

08007098 <__malloc_unlock>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__malloc_unlock+0x8>)
 800709a:	f7ff be36 	b.w	8006d0a <__retarget_lock_release_recursive>
 800709e:	bf00      	nop
 80070a0:	20000320 	.word	0x20000320

080070a4 <_read_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	; (80070c4 <_read_r+0x20>)
 80070a8:	4604      	mov	r4, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7f9 fc98 	bl	80009e8 <_read>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_read_r+0x1e>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_read_r+0x1e>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000328 	.word	0x20000328

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
