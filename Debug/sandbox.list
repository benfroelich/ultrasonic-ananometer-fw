
sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007100  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007330  08007330  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007330  08007330  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000088  080073c0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  080073c0  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164b5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a32  00000000  00000000  0003656d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00038fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00039f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3ad  00000000  00000000  0003ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147ef  00000000  00000000  00059215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae672  00000000  00000000  0006da04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  0011c0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007270 	.word	0x08007270

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08007270 	.word	0x08007270

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  for(int i = 0; i < ADC_BUFF_SZ; i++) adc_buffer[i] = 69;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e007      	b.n	80001e4 <main+0x1c>
 80001d4:	4a3f      	ldr	r2, [pc, #252]	; (80002d4 <main+0x10c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2145      	movs	r1, #69	; 0x45
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3301      	adds	r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001ea:	dbf3      	blt.n	80001d4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f001 f824 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f87c 	bl	80002ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80001f4:	f000 faf4 	bl	80007e0 <MX_DMA_Init>
  MX_GPIO_Init();
 80001f8:	f000 fb20 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001fc:	f000 fac0 	bl	8000780 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000200:	f000 f8d6 	bl	80003b0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000204:	f000 f912 	bl	800042c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000208:	f000 f9ec 	bl	80005e4 <MX_TIM2_Init>
  MX_TIM17_Init();
 800020c:	f000 fa40 	bl	8000690 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2); // point stdio at uart2
 8000210:	4831      	ldr	r0, [pc, #196]	; (80002d8 <main+0x110>)
 8000212:	f000 fbff 	bl	8000a14 <RetargetInit>
  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) Error_Handler();
 8000216:	2100      	movs	r1, #0
 8000218:	4830      	ldr	r0, [pc, #192]	; (80002dc <main+0x114>)
 800021a:	f001 facf 	bl	80017bc <HAL_ADCEx_Calibration_Start>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <main+0x60>
 8000224:	f000 fbf0 	bl	8000a08 <Error_Handler>
  while(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY));
 8000228:	bf00      	nop
 800022a:	482c      	ldr	r0, [pc, #176]	; (80002dc <main+0x114>)
 800022c:	f001 f898 	bl	8001360 <HAL_ADC_GetState>
 8000230:	4603      	mov	r3, r0
 8000232:	f003 0302 	and.w	r3, r3, #2
 8000236:	2b02      	cmp	r3, #2
 8000238:	d0f7      	beq.n	800022a <main+0x62>

  if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFF_SZ) != HAL_OK) Error_Handler();
 800023a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800023e:	4925      	ldr	r1, [pc, #148]	; (80002d4 <main+0x10c>)
 8000240:	4826      	ldr	r0, [pc, #152]	; (80002dc <main+0x114>)
 8000242:	f001 fa1f 	bl	8001684 <HAL_ADC_Start_DMA>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <main+0x88>
 800024c:	f000 fbdc 	bl	8000a08 <Error_Handler>
  //if(HAL_ADC_Start(&hadc1) != HAL_OK) Error_Handler();
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000250:	2100      	movs	r1, #0
 8000252:	4823      	ldr	r0, [pc, #140]	; (80002e0 <main+0x118>)
 8000254:	f003 fe24 	bl	8003ea0 <HAL_TIM_PWM_Start>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <main+0x9a>
 800025e:	f000 fbd3 	bl	8000a08 <Error_Handler>
  //if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK) Error_Handler();
  if(HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000262:	2100      	movs	r1, #0
 8000264:	481f      	ldr	r0, [pc, #124]	; (80002e4 <main+0x11c>)
 8000266:	f003 fcd3 	bl	8003c10 <HAL_TIM_OC_Start>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0xac>
 8000270:	f000 fbca 	bl	8000a08 <Error_Handler>
  if(HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8000274:	2108      	movs	r1, #8
 8000276:	481a      	ldr	r0, [pc, #104]	; (80002e0 <main+0x118>)
 8000278:	f003 fcca 	bl	8003c10 <HAL_TIM_OC_Start>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <main+0xbe>
 8000282:	f000 fbc1 	bl	8000a08 <Error_Handler>

  /* User start transmission data through "TxBuffer" buffer */
  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 8000286:	2217      	movs	r2, #23
 8000288:	4917      	ldr	r1, [pc, #92]	; (80002e8 <main+0x120>)
 800028a:	4813      	ldr	r0, [pc, #76]	; (80002d8 <main+0x110>)
 800028c:	f005 fa58 	bl	8005740 <HAL_UART_Transmit_DMA>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <main+0xd4>
  {
	/* Transfer error in transmission process */
	Error_Handler();
 8000296:	f000 fbb7 	bl	8000a08 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(HAL_TIM_PWM_GetState(&htim1) != HAL_TIM_STATE_READY);
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	4810      	ldr	r0, [pc, #64]	; (80002e0 <main+0x118>)
 80002a0:	f004 fb29 	bl	80048f6 <HAL_TIM_PWM_GetState>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d1f9      	bne.n	800029e <main+0xd6>
	  HAL_Delay(20);
 80002aa:	2014      	movs	r0, #20
 80002ac:	f001 f82a 	bl	8001304 <HAL_Delay>
	  //if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
	  if(issue_pulse(0) != PULSE_OK) Error_Handler();
 80002b0:	2000      	movs	r0, #0
 80002b2:	f000 ff41 	bl	8001138 <issue_pulse>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d001      	beq.n	80002c0 <main+0xf8>
 80002bc:	f000 fba4 	bl	8000a08 <Error_Handler>
	  while(get_pulse_state() == PULSE_BUSY)
 80002c0:	bf00      	nop
 80002c2:	f000 ff83 	bl	80011cc <get_pulse_state>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d0fa      	beq.n	80002c2 <main+0xfa>
	  {

	  }
	  HAL_Delay(20);
 80002cc:	2014      	movs	r0, #20
 80002ce:	f001 f819 	bl	8001304 <HAL_Delay>
	  while(HAL_TIM_PWM_GetState(&htim1) != HAL_TIM_STATE_READY);
 80002d2:	e7e3      	b.n	800029c <main+0xd4>
 80002d4:	2000021c 	.word	0x2000021c
 80002d8:	20000a90 	.word	0x20000a90
 80002dc:	20000144 	.word	0x20000144
 80002e0:	200009ec 	.word	0x200009ec
 80002e4:	200000f8 	.word	0x200000f8
 80002e8:	20000000 	.word	0x20000000

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09c      	sub	sp, #112	; 0x70
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f006 fa1c 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2234      	movs	r2, #52	; 0x34
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f006 fa0e 	bl	8006738 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031c:	2301      	movs	r3, #1
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000320:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000324:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000326:	2301      	movs	r3, #1
 8000328:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000336:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000338:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800033c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000342:	4618      	mov	r0, r3
 8000344:	f002 f886 	bl	8002454 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800034e:	f000 fb5b 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f002 ff78 	bl	8003264 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800037a:	f000 fb45 	bl	8000a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM17
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <SystemClock_Config+0xc0>)
 8000380:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000386:	2300      	movs	r3, #0
 8000388:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800038a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f003 f99c 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800039e:	f000 fb33 	bl	8000a08 <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3770      	adds	r7, #112	; 0x70
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	00101080 	.word	0x00101080

080003b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_ADC1_Init+0x78>)
 80003b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_ADC1_Init+0x78>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_ADC1_Init+0x78>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_ADC1_Init+0x78>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003ce:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_ADC1_Init+0x78>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_ADC1_Init+0x78>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_ADC1_Init+0x78>)
 80003de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80003e4:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_ADC1_Init+0x78>)
 80003e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_ADC1_Init+0x78>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <MX_ADC1_Init+0x78>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_ADC1_Init+0x78>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_ADC1_Init+0x78>)
 8000402:	2204      	movs	r2, #4
 8000404:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_ADC1_Init+0x78>)
 8000408:	2200      	movs	r2, #0
 800040a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_ADC1_Init+0x78>)
 800040e:	2200      	movs	r2, #0
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_ADC1_Init+0x78>)
 8000414:	f000 ffb0 	bl	8001378 <HAL_ADC_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800041e:	f000 faf3 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000144 	.word	0x20000144

0800042c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b09e      	sub	sp, #120	; 0x78
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000470:	463b      	mov	r3, r7
 8000472:	222c      	movs	r2, #44	; 0x2c
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f006 f95e 	bl	8006738 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800047c:	4b57      	ldr	r3, [pc, #348]	; (80005dc <MX_TIM1_Init+0x1b0>)
 800047e:	4a58      	ldr	r2, [pc, #352]	; (80005e0 <MX_TIM1_Init+0x1b4>)
 8000480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000482:	4b56      	ldr	r3, [pc, #344]	; (80005dc <MX_TIM1_Init+0x1b0>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b54      	ldr	r3, [pc, #336]	; (80005dc <MX_TIM1_Init+0x1b0>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23;
 800048e:	4b53      	ldr	r3, [pc, #332]	; (80005dc <MX_TIM1_Init+0x1b0>)
 8000490:	2217      	movs	r2, #23
 8000492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	4b51      	ldr	r3, [pc, #324]	; (80005dc <MX_TIM1_Init+0x1b0>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 8000;
 800049a:	4b50      	ldr	r3, [pc, #320]	; (80005dc <MX_TIM1_Init+0x1b0>)
 800049c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80004a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a2:	4b4e      	ldr	r3, [pc, #312]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a8:	484c      	ldr	r0, [pc, #304]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80004aa:	f003 faa3 	bl	80039f4 <HAL_TIM_Base_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80004b4:	f000 faa8 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004bc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80004c2:	4619      	mov	r1, r3
 80004c4:	4845      	ldr	r0, [pc, #276]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80004c6:	f004 f8d9 	bl	800467c <HAL_TIM_ConfigClockSource>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80004d0:	f000 fa9a 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d4:	4841      	ldr	r0, [pc, #260]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80004d6:	f003 fc81 	bl	8003ddc <HAL_TIM_PWM_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80004e0:	f000 fa92 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80004e4:	483d      	ldr	r0, [pc, #244]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80004e6:	f003 fb31 	bl	8003b4c <HAL_TIM_OC_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80004f0:	f000 fa8a 	bl	8000a08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80004fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000500:	4619      	mov	r1, r3
 8000502:	4836      	ldr	r0, [pc, #216]	; (80005dc <MX_TIM1_Init+0x1b0>)
 8000504:	f004 f983 	bl	800480e <HAL_TIM_SlaveConfigSynchro>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800050e:	f000 fa7b 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000512:	2320      	movs	r3, #32
 8000514:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800051e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000522:	4619      	mov	r1, r3
 8000524:	482d      	ldr	r0, [pc, #180]	; (80005dc <MX_TIM1_Init+0x1b0>)
 8000526:	f004 fe5b 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000530:	f000 fa6a 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000534:	2360      	movs	r3, #96	; 0x60
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800053c:	2300      	movs	r3, #0
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000540:	2300      	movs	r3, #0
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000548:	2300      	movs	r3, #0
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800054c:	2300      	movs	r3, #0
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	4820      	ldr	r0, [pc, #128]	; (80005dc <MX_TIM1_Init+0x1b0>)
 800055a:	f003 ff7b 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000564:	f000 fa50 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000568:	2330      	movs	r3, #48	; 0x30
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 10;
 800056c:	230a      	movs	r3, #10
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000574:	2208      	movs	r2, #8
 8000576:	4619      	mov	r1, r3
 8000578:	4818      	ldr	r0, [pc, #96]	; (80005dc <MX_TIM1_Init+0x1b0>)
 800057a:	f003 fef1 	bl	8004360 <HAL_TIM_OC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000584:	f000 fa40 	bl	8000a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80005be:	f004 fe75 	bl	80052ac <HAL_TIMEx_ConfigBreakDeadTime>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 80005c8:	f000 fa1e 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <MX_TIM1_Init+0x1b0>)
 80005ce:	f000 fbe9 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 80005d2:	bf00      	nop
 80005d4:	3778      	adds	r7, #120	; 0x78
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200009ec 	.word	0x200009ec
 80005e0:	40012c00 	.word	0x40012c00

080005e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_TIM2_Init+0xa8>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_TIM2_Init+0xa8>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_TIM2_Init+0xa8>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_TIM2_Init+0xa8>)
 8000618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800061c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_TIM2_Init+0xa8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_TIM2_Init+0xa8>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <MX_TIM2_Init+0xa8>)
 800062c:	f003 f9e2 	bl	80039f4 <HAL_TIM_Base_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000636:	f000 f9e7 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_TIM2_Init+0xa8>)
 8000648:	f004 f818 	bl	800467c <HAL_TIM_ConfigClockSource>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000652:	f000 f9d9 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000656:	2108      	movs	r1, #8
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_TIM2_Init+0xa8>)
 800065a:	f003 fd07 	bl	800406c <HAL_TIM_OnePulse_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000664:	f000 f9d0 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_TIM2_Init+0xa8>)
 8000676:	f004 fdb3 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000680:	f000 f9c2 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000a44 	.word	0x20000a44

08000690 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b092      	sub	sp, #72	; 0x48
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	222c      	movs	r2, #44	; 0x2c
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 f841 	bl	8006738 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006b8:	4a30      	ldr	r2, [pc, #192]	; (800077c <MX_TIM17_Init+0xec>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 18;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006be:	2212      	movs	r2, #18
 80006c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006ca:	2231      	movs	r2, #49	; 0x31
 80006cc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006e2:	f003 f987 	bl	80039f4 <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f98c 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80006f0:	4821      	ldr	r0, [pc, #132]	; (8000778 <MX_TIM17_Init+0xe8>)
 80006f2:	f003 fa2b 	bl	8003b4c <HAL_TIM_OC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f984 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000700:	2330      	movs	r3, #48	; 0x30
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 10;
 8000704:	230a      	movs	r3, #10
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000708:	2300      	movs	r3, #0
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_TIM17_Init+0xe8>)
 8000726:	f003 fe1b 	bl	8004360 <HAL_TIM_OC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000730:	f000 f96a 	bl	8000a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <MX_TIM17_Init+0xe8>)
 800075c:	f004 fda6 	bl	80052ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000766:	f000 f94f 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <MX_TIM17_Init+0xe8>)
 800076c:	f000 fb1a 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 8000770:	bf00      	nop
 8000772:	3748      	adds	r7, #72	; 0x48
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000f8 	.word	0x200000f8
 800077c:	40014800 	.word	0x40014800

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f004 fe08 	bl	80053d8 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f91b 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000a90 	.word	0x20000a90
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_DMA_Init+0x58>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_DMA_Init+0x58>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_DMA_Init+0x58>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200b      	movs	r0, #11
 8000804:	f001 fa57 	bl	8001cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000808:	200b      	movs	r0, #11
 800080a:	f001 fa70 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2010      	movs	r0, #16
 8000814:	f001 fa4f 	bl	8001cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000818:	2010      	movs	r0, #16
 800081a:	f001 fa68 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2011      	movs	r0, #17
 8000824:	f001 fa47 	bl	8001cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000828:	2011      	movs	r0, #17
 800082a:	f001 fa60 	bl	8001cee <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b56      	ldr	r3, [pc, #344]	; (80009ac <MX_GPIO_Init+0x170>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a55      	ldr	r2, [pc, #340]	; (80009ac <MX_GPIO_Init+0x170>)
 8000858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <MX_GPIO_Init+0x170>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	4b50      	ldr	r3, [pc, #320]	; (80009ac <MX_GPIO_Init+0x170>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <MX_GPIO_Init+0x170>)
 8000870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <MX_GPIO_Init+0x170>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <MX_GPIO_Init+0x170>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a49      	ldr	r2, [pc, #292]	; (80009ac <MX_GPIO_Init+0x170>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b47      	ldr	r3, [pc, #284]	; (80009ac <MX_GPIO_Init+0x170>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_GPIO_Init+0x170>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a43      	ldr	r2, [pc, #268]	; (80009ac <MX_GPIO_Init+0x170>)
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_GPIO_Init+0x170>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|tx_north_n_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2183      	movs	r1, #131	; 0x83
 80008b6:	483e      	ldr	r0, [pc, #248]	; (80009b0 <MX_GPIO_Init+0x174>)
 80008b8:	f001 fdb4 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f240 7102 	movw	r1, #1794	; 0x702
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f001 fdad 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_NORTH_P_Pin|LD2_Pin|GPIO_PIN_3|GPIO_PIN_4
 80008ca:	2200      	movs	r2, #0
 80008cc:	f242 4138 	movw	r1, #9272	; 0x2438
 80008d0:	4838      	ldr	r0, [pc, #224]	; (80009b4 <MX_GPIO_Init+0x178>)
 80008d2:	f001 fda7 	bl	8002424 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4830      	ldr	r0, [pc, #192]	; (80009b0 <MX_GPIO_Init+0x174>)
 80008ee:	f001 fc27 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 tx_north_n_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|tx_north_n_Pin;
 80008f2:	2381      	movs	r3, #129	; 0x81
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4829      	ldr	r0, [pc, #164]	; (80009b0 <MX_GPIO_Init+0x174>)
 800090a:	f001 fc19 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4822      	ldr	r0, [pc, #136]	; (80009b0 <MX_GPIO_Init+0x174>)
 8000926:	f001 fc0b 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800092a:	2302      	movs	r3, #2
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f001 fbfc 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_P_Pin PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = TX_NORTH_P_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000948:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x178>)
 8000962:	f001 fbed 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_GPIO_Init+0x178>)
 8000980:	f001 fbde 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_NORTH_N_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = TX_NORTH_N_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8000984:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800098e:	2302      	movs	r3, #2
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f001 fbce 	bl	8002140 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800
 80009b4:	48000400 	.word	0x48000400

080009b8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    Error_Handler();
 80009d4:	f000 f818 	bl	8000a08 <Error_Handler>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <RetargetInit+0x28>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <RetargetInit+0x2c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6898      	ldr	r0, [r3, #8]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f005 ff01 	bl	8006834 <setvbuf>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000b14 	.word	0x20000b14
 8000a40:	20000024 	.word	0x20000024

08000a44 <_isatty>:

int _isatty(int fd) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db04      	blt.n	8000a5c <_isatty+0x18>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	dc01      	bgt.n	8000a5c <_isatty+0x18>
    return 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e005      	b.n	8000a68 <_isatty+0x24>

  errno = EBADF;
 8000a5c:	f005 fe42 	bl	80066e4 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2209      	movs	r2, #9
 8000a64:	601a      	str	r2, [r3, #0]
  return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <_write>:

int _write(int fd, char* ptr, int len) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d002      	beq.n	8000a88 <_write+0x18>
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d111      	bne.n	8000aac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <_write+0x54>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	f004 fced 	bl	8005474 <HAL_UART_Transmit>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <_write+0x38>
      return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	e008      	b.n	8000aba <_write+0x4a>
    else
      return EIO;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	e006      	b.n	8000aba <_write+0x4a>
  }
  errno = EBADF;
 8000aac:	f005 fe1a 	bl	80066e4 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2209      	movs	r2, #9
 8000ab4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000b14 	.word	0x20000b14

08000ac8 <_close>:

int _close(int fd) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db04      	blt.n	8000ae0 <_close+0x18>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	dc01      	bgt.n	8000ae0 <_close+0x18>
    return 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e006      	b.n	8000aee <_close+0x26>

  errno = EBADF;
 8000ae0:	f005 fe00 	bl	80066e4 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	601a      	str	r2, [r3, #0]
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b02:	f005 fdef 	bl	80066e4 <__errno>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2209      	movs	r2, #9
 8000b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d110      	bne.n	8000b4c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <_read+0x4c>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b32:	2201      	movs	r2, #1
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	f004 fd31 	bl	800559c <HAL_UART_Receive>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <_read+0x30>
      return 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e008      	b.n	8000b5a <_read+0x42>
    else
      return EIO;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e006      	b.n	8000b5a <_read+0x42>
  }
  errno = EBADF;
 8000b4c:	f005 fdca 	bl	80066e4 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2209      	movs	r2, #9
 8000b54:	601a      	str	r2, [r3, #0]
  return -1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000b14 	.word	0x20000b14

08000b68 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db08      	blt.n	8000b8a <_fstat+0x22>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	dc05      	bgt.n	8000b8a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b84:	605a      	str	r2, [r3, #4]
    return 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e005      	b.n	8000b96 <_fstat+0x2e>
  }

  errno = EBADF;
 8000b8a:	f005 fdab 	bl	80066e4 <__errno>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2209      	movs	r2, #9
 8000b92:	601a      	str	r2, [r3, #0]
  return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f001 f862 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c08:	d14d      	bne.n	8000ca6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <HAL_ADC_MspInit+0xc8>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <HAL_ADC_MspInit+0xc8>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <HAL_ADC_MspInit+0xc8>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_ADC_MspInit+0xc8>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <HAL_ADC_MspInit+0xc8>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_ADC_MspInit+0xc8>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f001 fa76 	bl	8002140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_ADC_MspInit+0xd0>)
 8000c58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c8a:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c8c:	f001 f849 	bl	8001d22 <HAL_DMA_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000c96:	f7ff feb7 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_ADC_MspInit+0xcc>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	200001d8 	.word	0x200001d8
 8000cb8:	40020008 	.word	0x40020008

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a33      	ldr	r2, [pc, #204]	; (8000d98 <HAL_TIM_Base_MspInit+0xdc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12c      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a32      	ldr	r2, [pc, #200]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2018      	movs	r0, #24
 8000cec:	f000 ffe3 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000cf0:	2018      	movs	r0, #24
 8000cf2:	f000 fffc 	bl	8001cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 ffdb 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d00:	2019      	movs	r0, #25
 8000d02:	f000 fff4 	bl	8001cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201a      	movs	r0, #26
 8000d0c:	f000 ffd3 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d10:	201a      	movs	r0, #26
 8000d12:	f000 ffec 	bl	8001cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201b      	movs	r0, #27
 8000d1c:	f000 ffcb 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d20:	201b      	movs	r0, #27
 8000d22:	f000 ffe4 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d26:	e032      	b.n	8000d8e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d30:	d114      	bne.n	8000d5c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201c      	movs	r0, #28
 8000d50:	f000 ffb1 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d54:	201c      	movs	r0, #28
 8000d56:	f000 ffca 	bl	8001cee <HAL_NVIC_EnableIRQ>
}
 8000d5a:	e018      	b.n	8000d8e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM17)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_TIM_Base_MspInit+0xe4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d113      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_TIM_Base_MspInit+0xe0>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	201a      	movs	r0, #26
 8000d84:	f000 ff97 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d88:	201a      	movs	r0, #26
 8000d8a:	f000 ffb0 	bl	8001cee <HAL_NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40012c00 	.word	0x40012c00
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40014800 	.word	0x40014800

08000da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d11c      	bne.n	8000e00 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dee:	2302      	movs	r3, #2
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4816      	ldr	r0, [pc, #88]	; (8000e54 <HAL_TIM_MspPostInit+0xb0>)
 8000dfa:	f001 f9a1 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000dfe:	e021      	b.n	8000e44 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM17)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_TIM_MspPostInit+0xb4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11c      	bne.n	8000e44 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000e32:	2301      	movs	r3, #1
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 f97e 	bl	8002140 <HAL_GPIO_Init>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800
 8000e58:	40014800 	.word	0x40014800

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a41      	ldr	r2, [pc, #260]	; (8000f80 <HAL_UART_MspInit+0x124>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d17c      	bne.n	8000f78 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <HAL_UART_MspInit+0x128>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a40      	ldr	r2, [pc, #256]	; (8000f84 <HAL_UART_MspInit+0x128>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <HAL_UART_MspInit+0x128>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <HAL_UART_MspInit+0x128>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	; (8000f84 <HAL_UART_MspInit+0x128>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <HAL_UART_MspInit+0x128>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 f938 	bl	8002140 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000ed2:	4a2e      	ldr	r2, [pc, #184]	; (8000f8c <HAL_UART_MspInit+0x130>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000f02:	f000 ff0e 	bl	8001d22 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000f0c:	f7ff fd7c 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000f14:	671a      	str	r2, [r3, #112]	; 0x70
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <HAL_UART_MspInit+0x12c>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <HAL_UART_MspInit+0x138>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f24:	2210      	movs	r2, #16
 8000f26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f4e:	f000 fee8 	bl	8001d22 <HAL_DMA_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000f58:	f7ff fd56 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f60:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_UART_MspInit+0x134>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2026      	movs	r0, #38	; 0x26
 8000f6e:	f000 fea2 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f72:	2026      	movs	r0, #38	; 0x26
 8000f74:	f000 febb 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	200000b4 	.word	0x200000b4
 8000f8c:	4002006c 	.word	0x4002006c
 8000f90:	20000194 	.word	0x20000194
 8000f94:	40020080 	.word	0x40020080

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f96e 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DMA1_Channel1_IRQHandler+0x10>)
 8000ff2:	f000 ffb3 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001d8 	.word	0x200001d8

08001000 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA1_Channel6_IRQHandler+0x10>)
 8001006:	f000 ffa9 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000b4 	.word	0x200000b4

08001014 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DMA1_Channel7_IRQHandler+0x10>)
 800101a:	f000 ff9f 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000194 	.word	0x20000194

08001028 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800102e:	f003 f877 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200009ec 	.word	0x200009ec

0800103c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001042:	f003 f86d 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200009ec 	.word	0x200009ec

08001050 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001056:	f003 f863 	bl	8004120 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800105c:	f003 f860 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200009ec 	.word	0x200009ec
 8001068:	200000f8 	.word	0x200000f8

0800106c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM1_CC_IRQHandler+0x10>)
 8001072:	f003 f855 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200009ec 	.word	0x200009ec

08001080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM2_IRQHandler+0x10>)
 8001086:	f003 f84b 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000a44 	.word	0x20000a44

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f004 fbe1 	bl	8005860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000a90 	.word	0x20000a90

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f005 fb04 	bl	80066e4 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20004000 	.word	0x20004000
 8001108:	00000400 	.word	0x00000400
 800110c:	200000a4 	.word	0x200000a4
 8001110:	20000b40 	.word	0x20000b40

08001114 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <issue_pulse>:

int _pulse_cnt;
const int num_edges = 10;

pulse_state issue_pulse(const tx_node node)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	printf("issue_pulse\n");
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <issue_pulse+0x78>)
 8001144:	f005 fb6e 	bl	8006824 <puts>
	if(_pulse_state != PULSE_IDLE) return PULSE_ERROR;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <issue_pulse+0x7c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <issue_pulse+0x1c>
 8001150:	2303      	movs	r3, #3
 8001152:	e028      	b.n	80011a6 <issue_pulse+0x6e>
	_pulse_state = PULSE_BUSY;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <issue_pulse+0x7c>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
	_pulse_cnt = 0;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <issue_pulse+0x80>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
	// start the timer

	// TODO assign ch based on node argument
	pulse_p.bank = GPIOA; pulse_p.ch = GPIO_PIN_8;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <issue_pulse+0x84>)
 8001162:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <issue_pulse+0x84>)
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	809a      	strh	r2, [r3, #4]
	pulse_n.bank = GPIOB; pulse_n.ch = GPIO_PIN_10;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <issue_pulse+0x88>)
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <issue_pulse+0x8c>)
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <issue_pulse+0x88>)
 8001178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117c:	809a      	strh	r2, [r3, #4]

	HAL_GPIO_WritePin(pulse_p.bank, pulse_p.ch, GPIO_PIN_SET);
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <issue_pulse+0x84>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <issue_pulse+0x84>)
 8001184:	8891      	ldrh	r1, [r2, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f94b 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pulse_n.bank, pulse_n.ch, GPIO_PIN_RESET);
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <issue_pulse+0x88>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <issue_pulse+0x88>)
 8001194:	8891      	ldrh	r1, [r2, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f943 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim17);
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <issue_pulse+0x90>)
 80011a0:	f002 fc80 	bl	8003aa4 <HAL_TIM_Base_Start_IT>

    return PULSE_OK;
 80011a4:	2302      	movs	r3, #2
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08007288 	.word	0x08007288
 80011b4:	200000a8 	.word	0x200000a8
 80011b8:	20000b18 	.word	0x20000b18
 80011bc:	20000b1c 	.word	0x20000b1c
 80011c0:	20000b24 	.word	0x20000b24
 80011c4:	48000400 	.word	0x48000400
 80011c8:	200000f8 	.word	0x200000f8

080011cc <get_pulse_state>:

pulse_state get_pulse_state()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    return _pulse_state;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <get_pulse_state+0x14>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200000a8 	.word	0x200000a8

080011e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ea:	490e      	ldr	r1, [pc, #56]	; (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ec:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001200:	4c0b      	ldr	r4, [pc, #44]	; (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800120e:	f7ff ff81 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001212:	f005 fa6d 	bl	80066f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001216:	f7fe ffd7 	bl	80001c8 <main>

0800121a <LoopForever>:

LoopForever:
    b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800121c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001228:	08007338 	.word	0x08007338
  ldr r2, =_sbss
 800122c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001230:	20000b40 	.word	0x20000b40

08001234 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_IRQHandler>
	...

08001238 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 fd29 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fca4 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fd41 	bl	8001d0a <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	f000 fd09 	bl	8001cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000018 	.word	0x20000018
 80012bc:	20000020 	.word	0x20000020
 80012c0:	2000001c 	.word	0x2000001c

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000020 	.word	0x20000020
 80012e8:	20000b2c 	.word	0x20000b2c

080012ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000b2c 	.word	0x20000b2c

08001304 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000020 	.word	0x20000020

0800134c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b09a      	sub	sp, #104	; 0x68
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e169      	b.n	800166c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d176      	bne.n	8001498 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d152      	bne.n	8001458 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fc0b 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d13b      	bne.n	8001458 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fb27 	bl	8001a34 <ADC_Disable>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d12f      	bne.n	8001458 <HAL_ADC_Init+0xe0>
 80013f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12b      	bne.n	8001458 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001408:	f023 0302 	bic.w	r3, r3, #2
 800140c:	f043 0202 	orr.w	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001422:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001432:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001434:	4b8f      	ldr	r3, [pc, #572]	; (8001674 <HAL_ADC_Init+0x2fc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a8f      	ldr	r2, [pc, #572]	; (8001678 <HAL_ADC_Init+0x300>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9a      	lsrs	r2, r3, #18
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144a:	e002      	b.n	8001452 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3b01      	subs	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f9      	bne.n	800144c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001474:	d110      	bne.n	8001498 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f023 0312 	bic.w	r3, r3, #18
 800147e:	f043 0210 	orr.w	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f040 80d6 	bne.w	8001652 <HAL_ADC_Init+0x2da>
 80014a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 80d1 	bne.w	8001652 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 80c9 	bne.w	8001652 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014c8:	f043 0202 	orr.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_ADC_Init+0x304>)
 80014d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_ADC_Init+0x180>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_ADC_Init+0x180>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_ADC_Init+0x182>
 80014f8:	2300      	movs	r3, #0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11c      	bne.n	8001538 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014fe:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d010      	beq.n	8001526 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_ADC_Init+0x1a8>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_Init+0x1a8>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_ADC_Init+0x1aa>
 8001520:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	431a      	orrs	r2, r3
 8001534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001536:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e5b      	ldrb	r3, [r3, #25]
 800153c:	035b      	lsls	r3, r3, #13
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001542:	2a01      	cmp	r2, #1
 8001544:	d002      	beq.n	800154c <HAL_ADC_Init+0x1d4>
 8001546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800154a:	e000      	b.n	800154e <HAL_ADC_Init+0x1d6>
 800154c:	2200      	movs	r2, #0
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4313      	orrs	r3, r2
 800155c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800155e:	4313      	orrs	r3, r2
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d11b      	bne.n	80015a4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e5b      	ldrb	r3, [r3, #25]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	3b01      	subs	r3, #1
 800157a:	045a      	lsls	r2, r3, #17
 800157c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800157e:	4313      	orrs	r3, r2
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	663b      	str	r3, [r7, #96]	; 0x60
 8001586:	e00d      	b.n	80015a4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001590:	f043 0220 	orr.w	r2, r3, #32
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d007      	beq.n	80015bc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	4313      	orrs	r3, r2
 80015b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015b8:	4313      	orrs	r3, r2
 80015ba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d114      	bne.n	80015f4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d8:	f023 0302 	bic.w	r3, r3, #2
 80015dc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7e1b      	ldrb	r3, [r3, #24]
 80015e2:	039a      	lsls	r2, r3, #14
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4313      	orrs	r3, r2
 80015ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015f0:	4313      	orrs	r3, r2
 80015f2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_ADC_Init+0x308>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10c      	bne.n	800162a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f023 010f 	bic.w	r1, r3, #15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
 8001628:	e007      	b.n	800163a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 020f 	bic.w	r2, r2, #15
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f023 0303 	bic.w	r3, r3, #3
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
 8001650:	e00a      	b.n	8001668 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f023 0312 	bic.w	r3, r3, #18
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001662:	2301      	movs	r3, #1
 8001664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001668:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800166c:	4618      	mov	r0, r3
 800166e:	3768      	adds	r7, #104	; 0x68
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000018 	.word	0x20000018
 8001678:	431bde83 	.word	0x431bde83
 800167c:	50000300 	.word	0x50000300
 8001680:	fff0c007 	.word	0xfff0c007

08001684 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d17e      	bne.n	80017a0 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_ADC_Start_DMA+0x2c>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e07a      	b.n	80017a6 <HAL_ADC_Start_DMA+0x122>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f957 	bl	800196c <ADC_Enable>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d166      	bne.n	8001796 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001712:	d106      	bne.n	8001722 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f023 0206 	bic.w	r2, r3, #6
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
 8001720:	e002      	b.n	8001728 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_ADC_Start_DMA+0x12c>)
 8001736:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_ADC_Start_DMA+0x130>)
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_ADC_Start_DMA+0x134>)
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	221c      	movs	r2, #28
 800174e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0210 	orr.w	r2, r2, #16
 800175e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3340      	adds	r3, #64	; 0x40
 800177a:	4619      	mov	r1, r3
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f000 fb16 	bl	8001db0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0204 	orr.w	r2, r2, #4
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e006      	b.n	80017a4 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800179e:	e001      	b.n	80017a4 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a0:	2302      	movs	r3, #2
 80017a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	080018a1 	.word	0x080018a1
 80017b4:	0800191b 	.word	0x0800191b
 80017b8:	08001937 	.word	0x08001937

080017bc <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e05f      	b.n	8001898 <HAL_ADCEx_Calibration_Start+0xdc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f927 	bl	8001a34 <ADC_Disable>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d14e      	bne.n	800188e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001804:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800181a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800182a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800182c:	f7ff fd5e 	bl	80012ec <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001832:	e01c      	b.n	800186e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001834:	f7ff fd5a 	bl	80012ec <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b0a      	cmp	r3, #10
 8001840:	d915      	bls.n	800186e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800184c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001850:	d10d      	bne.n	800186e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f023 0312 	bic.w	r3, r3, #18
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e014      	b.n	8001898 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800187c:	d0da      	beq.n	8001834 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f023 0303 	bic.w	r3, r3, #3
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d126      	bne.n	8001908 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d115      	bne.n	8001900 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d111      	bne.n	8001900 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff f859 	bl	80009b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001906:	e004      	b.n	8001912 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fd0f 	bl	800134c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f043 0204 	orr.w	r2, r3, #4
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff f835 	bl	80009cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <ADC_Enable+0x2c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <ADC_Enable+0x2c>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <ADC_Enable+0x2e>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d143      	bne.n	8001a26 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <ADC_Enable+0xc4>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00d      	beq.n	80019c8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f043 0210 	orr.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e02f      	b.n	8001a28 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80019d8:	f7ff fc88 	bl	80012ec <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019de:	e01b      	b.n	8001a18 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019e0:	f7ff fc84 	bl	80012ec <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d914      	bls.n	8001a18 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d00d      	beq.n	8001a18 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f043 0210 	orr.w	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e007      	b.n	8001a28 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d1dc      	bne.n	80019e0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	8000003f 	.word	0x8000003f

08001a34 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d108      	bne.n	8001a60 <ADC_Disable+0x2c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <ADC_Disable+0x2c>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <ADC_Disable+0x2e>
 8001a60:	2300      	movs	r3, #0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d047      	beq.n	8001af6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030d 	and.w	r3, r3, #13
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10f      	bne.n	8001a94 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0202 	orr.w	r2, r2, #2
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fc2e 	bl	80012ec <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a92:	e029      	b.n	8001ae8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e023      	b.n	8001af8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ab0:	f7ff fc1c 	bl	80012ec <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d914      	bls.n	8001ae8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10d      	bne.n	8001ae8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f043 0210 	orr.w	r2, r3, #16
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e007      	b.n	8001af8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d0dc      	beq.n	8001ab0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <__NVIC_EnableIRQ+0x38>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c6c:	d301      	bcc.n	8001c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <SysTick_Config+0x40>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c80:	f7ff ff8e 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SysTick_Config+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SysTick_Config+0x40>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff29 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff3e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff8e 	bl	8001bf4 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5d 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff31 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa2 	bl	8001c5c <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e037      	b.n	8001da8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f9b8 	bl	8002100 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}  
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_DMA_Start_IT+0x20>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e04a      	b.n	8001e66 <HAL_DMA_Start_IT+0xb6>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d13a      	bne.n	8001e58 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f94b 	bl	80020a2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 020e 	orr.w	r2, r2, #14
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e00f      	b.n	8001e46 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 020a 	orr.w	r2, r2, #10
 8001e34:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0204 	bic.w	r2, r2, #4
 8001e44:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e005      	b.n	8001e64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
 8001e62:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e020      	b.n	8001ed4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 020e 	bic.w	r2, r2, #14
 8001ea0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d005      	beq.n	8001f02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e027      	b.n	8001f52 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 020e 	bic.w	r2, r2, #14
 8001f10:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
    } 
  }
  return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2204      	movs	r2, #4
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d024      	beq.n	8001fce <HAL_DMA_IRQHandler+0x72>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01f      	beq.n	8001fce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d06a      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fcc:	e065      	b.n	800209a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d02c      	beq.n	8002038 <HAL_DMA_IRQHandler+0xdc>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d027      	beq.n	8002038 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020a 	bic.w	r2, r2, #10
 8002004:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2102      	movs	r1, #2
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d035      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002036:	e030      	b.n	800209a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2208      	movs	r2, #8
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d028      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d023      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 020e 	bic.w	r2, r2, #14
 8002060:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
    }
  }
}  
 8002098:	e7ff      	b.n	800209a <HAL_DMA_IRQHandler+0x13e>
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d108      	bne.n	80020e2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020e0:	e007      	b.n	80020f2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	60da      	str	r2, [r3, #12]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <DMA_CalcBaseAndBitshift+0x34>)
 8002110:	4413      	add	r3, r2
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <DMA_CalcBaseAndBitshift+0x38>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	009a      	lsls	r2, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a06      	ldr	r2, [pc, #24]	; (800213c <DMA_CalcBaseAndBitshift+0x3c>)
 8002124:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	bffdfff8 	.word	0xbffdfff8
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	40020000 	.word	0x40020000

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e14e      	b.n	80023ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8140 	beq.w	80023e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d005      	beq.n	8002180 <HAL_GPIO_Init+0x40>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d130      	bne.n	80021e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b6:	2201      	movs	r2, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f003 0201 	and.w	r2, r3, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d017      	beq.n	800221e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d123      	bne.n	8002272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	6939      	ldr	r1, [r7, #16]
 800226e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0203 	and.w	r2, r3, #3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 809a 	beq.w	80023e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b52      	ldr	r3, [pc, #328]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022cc:	4a50      	ldr	r2, [pc, #320]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022f6:	d013      	beq.n	8002320 <HAL_GPIO_Init+0x1e0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a46      	ldr	r2, [pc, #280]	; (8002414 <HAL_GPIO_Init+0x2d4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00d      	beq.n	800231c <HAL_GPIO_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a45      	ldr	r2, [pc, #276]	; (8002418 <HAL_GPIO_Init+0x2d8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x1d8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_GPIO_Init+0x2dc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_GPIO_Init+0x1d4>
 8002310:	2303      	movs	r3, #3
 8002312:	e006      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002314:	2305      	movs	r3, #5
 8002316:	e004      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002318:	2302      	movs	r3, #2
 800231a:	e002      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002320:	2300      	movs	r3, #0
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	f002 0203 	and.w	r2, r2, #3
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	4093      	lsls	r3, r2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002332:	4937      	ldr	r1, [pc, #220]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002364:	4a2e      	ldr	r2, [pc, #184]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800238e:	4a24      	ldr	r2, [pc, #144]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023e2:	4a0f      	ldr	r2, [pc, #60]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3301      	adds	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f47f aea9 	bne.w	8002150 <HAL_GPIO_Init+0x10>
  }
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000
 8002414:	48000400 	.word	0x48000400
 8002418:	48000800 	.word	0x48000800
 800241c:	48000c00 	.word	0x48000c00
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002440:	e002      	b.n	8002448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800245a:	af00      	add	r7, sp, #0
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f000 bef4 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 816a 	beq.w	8002752 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800247e:	4bb3      	ldr	r3, [pc, #716]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d00c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800248a:	4bb0      	ldr	r3, [pc, #704]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	d159      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 8002496:	4bad      	ldr	r3, [pc, #692]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d152      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0x82>
 80024d0:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0xae>
 80024d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002506:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800250a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002516:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 810c 	beq.w	8002750 <HAL_RCC_OscConfig+0x2fc>
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8106 	bne.w	8002750 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f000 be86 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x110>
 8002556:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e030      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x134>
 800256e:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a76      	ldr	r2, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b74      	ldr	r3, [pc, #464]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a73      	ldr	r2, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x15a>
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6c      	ldr	r2, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800259a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	495d      	ldr	r1, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d059      	beq.n	8002698 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fe82 	bl	80012ec <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ee:	f7fe fe7d 	bl	80012ec <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d902      	bls.n	8002604 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	f000 be29 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 8002604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002608:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002618:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_RCC_OscConfig+0x1e2>
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x20e>
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800264a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002652:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002666:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800266a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002676:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ab      	beq.n	80025ee <HAL_RCC_OscConfig+0x19a>
 8002696:	e05c      	b.n	8002752 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fe28 	bl	80012ec <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a2:	f7fe fe23 	bl	80012ec <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d902      	bls.n	80026b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f000 bdcf 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80026b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x2c2>
 80026ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002702:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002706:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800271a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800271e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800272a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ab      	bne.n	80026a2 <HAL_RCC_OscConfig+0x24e>
 800274a:	e002      	b.n	8002752 <HAL_RCC_OscConfig+0x2fe>
 800274c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 816f 	beq.w	8002a40 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002762:	4bd0      	ldr	r3, [pc, #832]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800276e:	4bcd      	ldr	r3, [pc, #820]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d16c      	bne.n	8002854 <HAL_RCC_OscConfig+0x400>
 800277a:	4bca      	ldr	r3, [pc, #808]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d166      	bne.n	8002854 <HAL_RCC_OscConfig+0x400>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002798:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_RCC_OscConfig+0x362>
 80027b0:	4bbc      	ldr	r3, [pc, #752]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e013      	b.n	80027de <HAL_RCC_OscConfig+0x38a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027da:	4bb2      	ldr	r3, [pc, #712]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2202      	movs	r2, #2
 80027e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x3cc>
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f000 bd1b 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4ba0      	ldr	r3, [pc, #640]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	21f8      	movs	r1, #248	; 0xf8
 8002830:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002838:	fa91 f1a1 	rbit	r1, r1
 800283c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002840:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002844:	fab1 f181 	clz	r1, r1
 8002848:	b2c9      	uxtb	r1, r1
 800284a:	408b      	lsls	r3, r1
 800284c:	4995      	ldr	r1, [pc, #596]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e0f5      	b.n	8002a40 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8085 	beq.w	800296a <HAL_RCC_OscConfig+0x516>
 8002860:	2301      	movs	r3, #1
 8002862:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002872:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fd2e 	bl	80012ec <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fd29 	bl	80012ec <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f000 bcd5 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x488>
 80028d6:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e013      	b.n	8002904 <HAL_RCC_OscConfig+0x4b0>
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2202      	movs	r2, #2
 8002906:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800290a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002916:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0af      	beq.n	8002896 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	21f8      	movs	r1, #248	; 0xf8
 8002946:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800294e:	fa91 f1a1 	rbit	r1, r1
 8002952:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002956:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800295a:	fab1 f181 	clz	r1, r1
 800295e:	b2c9      	uxtb	r1, r1
 8002960:	408b      	lsls	r3, r1
 8002962:	4950      	ldr	r1, [pc, #320]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e06a      	b.n	8002a40 <HAL_RCC_OscConfig+0x5ec>
 800296a:	2301      	movs	r3, #1
 800296c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800297c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800298a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	2300      	movs	r3, #0
 8002994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fca9 	bl	80012ec <HAL_GetTick>
 800299a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe fca4 	bl	80012ec <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bc50 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80029b6:	2302      	movs	r3, #2
 80029b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0x592>
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x5ba>
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1af      	bne.n	80029a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80da 	beq.w	8002c04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d069      	beq.n	8002b2e <HAL_RCC_OscConfig+0x6da>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x654>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fc32 	bl	80012ec <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	e00e      	b.n	8002aac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fc2d 	bl	80012ec <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d906      	bls.n	8002aac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e3d9      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	10908120 	.word	0x10908120
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002abe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002aec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4ba5      	ldr	r3, [pc, #660]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002af6:	2102      	movs	r1, #2
 8002af8:	6019      	str	r1, [r3, #0]
 8002afa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f1a3 	rbit	r1, r3
 8002b04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b08:	6019      	str	r1, [r3, #0]
  return result;
 8002b0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0b0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x63a>
 8002b2c:	e06a      	b.n	8002c04 <HAL_RCC_OscConfig+0x7b0>
 8002b2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b44:	601a      	str	r2, [r3, #0]
  return result;
 8002b46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_RCC_OscConfig+0x934>)
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe fbc4 	bl	80012ec <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7fe fbbf 	bl	80012ec <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e36b      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002b7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b82:	2202      	movs	r2, #2
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bce:	2102      	movs	r1, #2
 8002bd0:	6019      	str	r1, [r3, #0]
 8002bd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f1a3 	rbit	r1, r3
 8002bdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be0:	6019      	str	r1, [r3, #0]
  return result;
 8002be2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1b2      	bne.n	8002b6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8158 	beq.w	8002ec4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11a      	bne.n	8002c8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fb42 	bl	80012ec <HAL_GetTick>
 8002c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e009      	b.n	8002c82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe fb3d 	bl	80012ec <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2e9      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ef      	beq.n	8002c6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x852>
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a39      	ldr	r2, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02f      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x876>
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e01d      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x89a>
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fe faec 	bl	80012ec <HAL_GetTick>
 8002d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00b      	b.n	8002d32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe fae7 	bl	80012ec <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e291      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002d32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d60:	601a      	str	r2, [r3, #0]
  return result;
 8002d62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_OscConfig+0x93c>
 8002d7c:	4b01      	ldr	r3, [pc, #4]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x958>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	10908120 	.word	0x10908120
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4bbb      	ldr	r3, [pc, #748]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db0:	2102      	movs	r1, #2
 8002db2:	6011      	str	r1, [r2, #0]
 8002db4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	fa92 f1a2 	rbit	r1, r2
 8002dbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc2:	6011      	str	r1, [r2, #0]
  return result;
 8002dc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d099      	beq.n	8002d1a <HAL_RCC_OscConfig+0x8c6>
 8002de6:	e063      	b.n	8002eb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fe fa80 	bl	80012ec <HAL_GetTick>
 8002dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fa7b 	bl	80012ec <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e225      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e38:	601a      	str	r2, [r3, #0]
  return result;
 8002e3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0xa06>
 8002e54:	4b90      	ldr	r3, [pc, #576]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	e00d      	b.n	8002e76 <HAL_RCC_OscConfig+0xa22>
 8002e5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e5e:	2202      	movs	r2, #2
 8002e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	4b89      	ldr	r3, [pc, #548]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	fa92 f1a2 	rbit	r1, r2
 8002e88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e8c:	6011      	str	r1, [r2, #0]
  return result;
 8002e8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1a0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b77      	ldr	r3, [pc, #476]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a76      	ldr	r2, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 81c2 	beq.w	8003254 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b71      	ldr	r3, [pc, #452]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f000 819c 	beq.w	8003216 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	f040 8114 	bne.w	8003112 <HAL_RCC_OscConfig+0xcbe>
 8002eea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f02:	601a      	str	r2, [r3, #0]
  return result;
 8002f04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe f9e4 	bl	80012ec <HAL_GetTick>
 8002f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	e009      	b.n	8002f3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe f9df 	bl	80012ec <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e18b      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002f3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f56:	601a      	str	r2, [r3, #0]
  return result;
 8002f58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_OscConfig+0xb24>
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e01b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb5c>
 8002f78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fb8:	6011      	str	r1, [r2, #0]
 8002fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fa92 f1a2 	rbit	r1, r2
 8002fc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f002 021f 	and.w	r2, r2, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d19e      	bne.n	8002f2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	430b      	orrs	r3, r1
 8003002:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800300c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003020:	601a      	str	r2, [r3, #0]
  return result;
 8003022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003026:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	461a      	mov	r2, r3
 800303a:	2301      	movs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe f955 	bl	80012ec <HAL_GetTick>
 8003042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003046:	e009      	b.n	800305c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe f950 	bl	80012ec <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0fc      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 800305c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003074:	601a      	str	r2, [r3, #0]
  return result;
 8003076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800307a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0xc48>
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e01e      	b.n	80030d4 <HAL_RCC_OscConfig+0xc80>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	fa92 f1a2 	rbit	r1, r2
 80030e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ec:	6011      	str	r1, [r2, #0]
  return result;
 80030ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d09b      	beq.n	8003048 <HAL_RCC_OscConfig+0xbf4>
 8003110:	e0a0      	b.n	8003254 <HAL_RCC_OscConfig+0xe00>
 8003112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003116:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003130:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800313c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	461a      	mov	r2, r3
 8003144:	2300      	movs	r3, #0
 8003146:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe f8d0 	bl	80012ec <HAL_GetTick>
 800314c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	e009      	b.n	8003166 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003152:	f7fe f8cb 	bl	80012ec <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e077      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8003166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	601a      	str	r2, [r3, #0]
  return result;
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0xd4c>
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e01b      	b.n	80031d8 <HAL_RCC_OscConfig+0xd84>
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f107 0320 	add.w	r3, r7, #32
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 0318 	add.w	r3, r7, #24
 80031be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f107 0318 	add.w	r3, r7, #24
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f107 0210 	add.w	r2, r7, #16
 80031dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f107 0210 	add.w	r2, r7, #16
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fa92 f1a2 	rbit	r1, r2
 80031ec:	f107 020c 	add.w	r2, r7, #12
 80031f0:	6011      	str	r1, [r2, #0]
  return result;
 80031f2:	f107 020c 	add.w	r2, r7, #12
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d19e      	bne.n	8003152 <HAL_RCC_OscConfig+0xcfe>
 8003214:	e01e      	b.n	8003254 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e018      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800322c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	429a      	cmp	r2, r3
 800323c:	d108      	bne.n	8003250 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800323e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b09e      	sub	sp, #120	; 0x78
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e162      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	498b      	ldr	r1, [pc, #556]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e14a      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	497f      	ldr	r1, [pc, #508]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80dc 	beq.w	8003490 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d13c      	bne.n	800335a <HAL_RCC_ClockConfig+0xf6>
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_RCC_ClockConfig+0xa6>
 8003304:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e00f      	b.n	800332a <HAL_RCC_ClockConfig+0xc6>
 800330a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	667b      	str	r3, [r7, #100]	; 0x64
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800332e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d17b      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f3      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d13c      	bne.n	80033dc <HAL_RCC_ClockConfig+0x178>
 8003362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_ClockConfig+0x128>
 8003386:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e00f      	b.n	80033ac <HAL_RCC_ClockConfig+0x148>
 800338c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
 800339a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80033b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0220 	orr.w	r2, r2, #32
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13a      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b2      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80033dc:	2302      	movs	r3, #2
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	e00d      	b.n	8003420 <HAL_RCC_ClockConfig+0x1bc>
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	61ba      	str	r2, [r7, #24]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	617a      	str	r2, [r7, #20]
  return result;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e079      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fd ff44 	bl	80012ec <HAL_GetTick>
 8003464:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd ff40 	bl	80012ec <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e061      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d214      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e040      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003506:	f000 f829 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	22f0      	movs	r2, #240	; 0xf0
 8003516:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	60fa      	str	r2, [r7, #12]
  return result;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	40d3      	lsrs	r3, r2
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x2ec>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	fa21 f303 	lsr.w	r3, r1, r3
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_ClockConfig+0x2f0>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCC_ClockConfig+0x2f4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fe92 	bl	8001264 <HAL_InitTick>
  
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3778      	adds	r7, #120	; 0x78
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08007294 	.word	0x08007294
 8003554:	20000018 	.word	0x20000018
 8003558:	2000001c 	.word	0x2000001c

0800355c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x30>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x36>
 800358a:	e03c      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 800358e:	623b      	str	r3, [r7, #32]
      break;
 8003590:	e03c      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003598:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800359c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	fa92 f2a2 	rbit	r2, r2
 80035a4:	607a      	str	r2, [r7, #4]
  return result;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	40d3      	lsrs	r3, r2
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	220f      	movs	r2, #15
 80035c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	60fa      	str	r2, [r7, #12]
  return result;
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	40d3      	lsrs	r3, r2
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e004      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	623b      	str	r3, [r7, #32]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003608:	623b      	str	r3, [r7, #32]
      break;
 800360a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360c:	6a3b      	ldr	r3, [r7, #32]
}
 800360e:	4618      	mov	r0, r3
 8003610:	372c      	adds	r7, #44	; 0x2c
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	080072ac 	.word	0x080072ac
 8003628:	080072bc 	.word	0x080072bc
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000018 	.word	0x20000018

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800364e:	f7ff ffef 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003652:	4601      	mov	r1, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003660:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	fa92 f2a2 	rbit	r2, r2
 8003668:	603a      	str	r2, [r7, #0]
  return result;
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	fab2 f282 	clz	r2, r2
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	40d3      	lsrs	r3, r2
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	080072a4 	.word	0x080072a4

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003692:	f7ff ffcd 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	fa92 f2a2 	rbit	r2, r2
 80036ac:	603a      	str	r2, [r7, #0]
  return result;
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	40d3      	lsrs	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	080072a4 	.word	0x080072a4

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b092      	sub	sp, #72	; 0x48
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80d4 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10e      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
 800370c:	4b48      	ldr	r3, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b45      	ldr	r3, [pc, #276]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a41      	ldr	r2, [pc, #260]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fd fdd9 	bl	80012ec <HAL_GetTick>
 800373a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd fdd5 	bl	80012ec <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	; 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e14b      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8084 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003778:	429a      	cmp	r2, r3
 800377a:	d07c      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800377c:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	461a      	mov	r2, r3
 80037a6:	2301      	movs	r3, #1
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	461a      	mov	r2, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd fd85 	bl	80012ec <HAL_GetTick>
 80037e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd fd81 	bl	80012ec <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0f5      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
  return result;
 8003814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d108      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800382a:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	e00d      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	10908100 	.word	0x10908100
 800383c:	2302      	movs	r3, #2
 800383e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	4b69      	ldr	r3, [pc, #420]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	613a      	str	r2, [r7, #16]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	60fa      	str	r2, [r7, #12]
  return result;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0b7      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003876:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	495b      	ldr	r1, [pc, #364]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003884:	4313      	orrs	r3, r2
 8003886:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b57      	ldr	r3, [pc, #348]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a8:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f023 0203 	bic.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494e      	ldr	r1, [pc, #312]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f023 0210 	bic.w	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4947      	ldr	r1, [pc, #284]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	493f      	ldr	r1, [pc, #252]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f023 0220 	bic.w	r2, r3, #32
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	4938      	ldr	r1, [pc, #224]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003910:	4313      	orrs	r3, r2
 8003912:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	4930      	ldr	r1, [pc, #192]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800392e:	4313      	orrs	r3, r2
 8003930:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4929      	ldr	r1, [pc, #164]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800395c:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	4921      	ldr	r1, [pc, #132]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800396a:	4313      	orrs	r3, r2
 800396c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	491a      	ldr	r1, [pc, #104]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	4912      	ldr	r1, [pc, #72]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	490b      	ldr	r1, [pc, #44]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4903      	ldr	r1, [pc, #12]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3748      	adds	r7, #72	; 0x48
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e049      	b.n	8003a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd f94e 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 ff6e 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e03b      	b.n	8003b34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x4e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x4e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <HAL_TIM_Base_Start_IT+0xa0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d115      	bne.n	8003b1e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_TIM_Base_Start_IT+0xa4>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d015      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x8c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0a:	d011      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	e008      	b.n	8003b30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e000      	b.n	8003b32 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40014000 	.word	0x40014000
 8003b48:	00010007 	.word	0x00010007

08003b4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e049      	b.n	8003bf2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f841 	bl	8003bfa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 fec2 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_TIM_OC_Start+0x24>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e03c      	b.n	8003cae <HAL_TIM_OC_Start+0x9e>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d109      	bne.n	8003c4e <HAL_TIM_OC_Start+0x3e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e02f      	b.n	8003cae <HAL_TIM_OC_Start+0x9e>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d109      	bne.n	8003c68 <HAL_TIM_OC_Start+0x58>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e022      	b.n	8003cae <HAL_TIM_OC_Start+0x9e>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d109      	bne.n	8003c82 <HAL_TIM_OC_Start+0x72>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e015      	b.n	8003cae <HAL_TIM_OC_Start+0x9e>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d109      	bne.n	8003c9c <HAL_TIM_OC_Start+0x8c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e008      	b.n	8003cae <HAL_TIM_OC_Start+0x9e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e083      	b.n	8003dbe <HAL_TIM_OC_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_OC_Start+0xb6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc4:	e023      	b.n	8003d0e <HAL_TIM_OC_Start+0xfe>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_OC_Start+0xc6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	e01b      	b.n	8003d0e <HAL_TIM_OC_Start+0xfe>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_OC_Start+0xd6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce4:	e013      	b.n	8003d0e <HAL_TIM_OC_Start+0xfe>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_OC_Start+0xe6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf4:	e00b      	b.n	8003d0e <HAL_TIM_OC_Start+0xfe>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_OC_Start+0xf6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d04:	e003      	b.n	8003d0e <HAL_TIM_OC_Start+0xfe>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2201      	movs	r2, #1
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fa3d 	bl	8005196 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <HAL_TIM_OC_Start+0x1b8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00e      	beq.n	8003d44 <HAL_TIM_OC_Start+0x134>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <HAL_TIM_OC_Start+0x1bc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_TIM_OC_Start+0x134>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <HAL_TIM_OC_Start+0x1c0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_OC_Start+0x134>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <HAL_TIM_OC_Start+0x1c4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_OC_Start+0x138>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_TIM_OC_Start+0x13a>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_TIM_OC_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_TIM_OC_Start+0x1b8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_TIM_OC_Start+0x16c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d004      	beq.n	8003d7c <HAL_TIM_OC_Start+0x16c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_TIM_OC_Start+0x1bc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d115      	bne.n	8003da8 <HAL_TIM_OC_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_TIM_OC_Start+0x1c8>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d015      	beq.n	8003dba <HAL_TIM_OC_Start+0x1aa>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d011      	beq.n	8003dba <HAL_TIM_OC_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	e008      	b.n	8003dba <HAL_TIM_OC_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e000      	b.n	8003dbc <HAL_TIM_OC_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800
 8003dd8:	00010007 	.word	0x00010007

08003ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e049      	b.n	8003e82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f841 	bl	8003e8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 fd7a 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x24>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e03c      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d109      	bne.n	8003ede <HAL_TIM_PWM_Start+0x3e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e02f      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d109      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0x58>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e022      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d109      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e015      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d109      	bne.n	8003f2c <HAL_TIM_PWM_Start+0x8c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e008      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e083      	b.n	800404e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start+0xb6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	e023      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0xc6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f64:	e01b      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start+0xd6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	e013      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0xe6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f84:	e00b      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0xf6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f94:	e003      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 f8f5 	bl	8005196 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	; (8004058 <HAL_TIM_PWM_Start+0x1b8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_TIM_PWM_Start+0x134>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a28      	ldr	r2, [pc, #160]	; (800405c <HAL_TIM_PWM_Start+0x1bc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_TIM_PWM_Start+0x134>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	; (8004060 <HAL_TIM_PWM_Start+0x1c0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_PWM_Start+0x134>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a25      	ldr	r2, [pc, #148]	; (8004064 <HAL_TIM_PWM_Start+0x1c4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_PWM_Start+0x138>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_TIM_PWM_Start+0x13a>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_TIM_PWM_Start+0x1b8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_PWM_Start+0x16c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d004      	beq.n	800400c <HAL_TIM_PWM_Start+0x16c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <HAL_TIM_PWM_Start+0x1bc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d115      	bne.n	8004038 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_TIM_PWM_Start+0x1c8>)
 8004014:	4013      	ands	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b06      	cmp	r3, #6
 800401c:	d015      	beq.n	800404a <HAL_TIM_PWM_Start+0x1aa>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d011      	beq.n	800404a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	e008      	b.n	800404a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e000      	b.n	800404c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800
 8004068:	00010007 	.word	0x00010007

0800406c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e041      	b.n	8004104 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f839 	bl	800410c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 fc31 	bl	8004914 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0208 	bic.w	r2, r2, #8
 80040c0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0202 	mvn.w	r2, #2
 800414c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fba9 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fb9b 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fbac 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b04      	cmp	r3, #4
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0204 	mvn.w	r2, #4
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb7f 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb71 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fb82 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d122      	bne.n	8004224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0208 	mvn.w	r2, #8
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fb55 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fb47 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb58 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b10      	cmp	r3, #16
 8004230:	d122      	bne.n	8004278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b10      	cmp	r3, #16
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0210 	mvn.w	r2, #16
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2208      	movs	r2, #8
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fb2b 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fb1d 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb2e 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0201 	mvn.w	r2, #1
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 faf7 	bl	8004892 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b80      	cmp	r3, #128	; 0x80
 80042b0:	d10e      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b80      	cmp	r3, #128	; 0x80
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 f870 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d10e      	bne.n	80042fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f001 f863 	bl	80053c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d10e      	bne.n	800432a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d107      	bne.n	800432a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fadc 	bl	80048e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b20      	cmp	r3, #32
 8004336:	d10e      	bne.n	8004356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d107      	bne.n	8004356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f06f 0220 	mvn.w	r2, #32
 800434e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f001 f823 	bl	800539c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_TIM_OC_ConfigChannel+0x1e>
 800437a:	2302      	movs	r3, #2
 800437c:	e066      	b.n	800444c <HAL_TIM_OC_ConfigChannel+0xec>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b14      	cmp	r3, #20
 800438a:	d857      	bhi.n	800443c <HAL_TIM_OC_ConfigChannel+0xdc>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <HAL_TIM_OC_ConfigChannel+0x34>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043e9 	.word	0x080043e9
 8004398:	0800443d 	.word	0x0800443d
 800439c:	0800443d 	.word	0x0800443d
 80043a0:	0800443d 	.word	0x0800443d
 80043a4:	080043f7 	.word	0x080043f7
 80043a8:	0800443d 	.word	0x0800443d
 80043ac:	0800443d 	.word	0x0800443d
 80043b0:	0800443d 	.word	0x0800443d
 80043b4:	08004405 	.word	0x08004405
 80043b8:	0800443d 	.word	0x0800443d
 80043bc:	0800443d 	.word	0x0800443d
 80043c0:	0800443d 	.word	0x0800443d
 80043c4:	08004413 	.word	0x08004413
 80043c8:	0800443d 	.word	0x0800443d
 80043cc:	0800443d 	.word	0x0800443d
 80043d0:	0800443d 	.word	0x0800443d
 80043d4:	08004421 	.word	0x08004421
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	0800443d 	.word	0x0800443d
 80043e0:	0800443d 	.word	0x0800443d
 80043e4:	0800442f 	.word	0x0800442f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fafe 	bl	80049f0 <TIM_OC1_SetConfig>
      break;
 80043f4:	e025      	b.n	8004442 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fb7d 	bl	8004afc <TIM_OC2_SetConfig>
      break;
 8004402:	e01e      	b.n	8004442 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fbf6 	bl	8004bfc <TIM_OC3_SetConfig>
      break;
 8004410:	e017      	b.n	8004442 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fc6d 	bl	8004cf8 <TIM_OC4_SetConfig>
      break;
 800441e:	e010      	b.n	8004442 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fcca 	bl	8004dc0 <TIM_OC5_SetConfig>
      break;
 800442c:	e009      	b.n	8004442 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fd21 	bl	8004e7c <TIM_OC6_SetConfig>
      break;
 800443a:	e002      	b.n	8004442 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	75fb      	strb	r3, [r7, #23]
      break;
 8004440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800446e:	2302      	movs	r3, #2
 8004470:	e0ff      	b.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b14      	cmp	r3, #20
 800447e:	f200 80f0 	bhi.w	8004662 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004663 	.word	0x08004663
 8004490:	08004663 	.word	0x08004663
 8004494:	08004663 	.word	0x08004663
 8004498:	0800451d 	.word	0x0800451d
 800449c:	08004663 	.word	0x08004663
 80044a0:	08004663 	.word	0x08004663
 80044a4:	08004663 	.word	0x08004663
 80044a8:	0800455f 	.word	0x0800455f
 80044ac:	08004663 	.word	0x08004663
 80044b0:	08004663 	.word	0x08004663
 80044b4:	08004663 	.word	0x08004663
 80044b8:	0800459f 	.word	0x0800459f
 80044bc:	08004663 	.word	0x08004663
 80044c0:	08004663 	.word	0x08004663
 80044c4:	08004663 	.word	0x08004663
 80044c8:	080045e1 	.word	0x080045e1
 80044cc:	08004663 	.word	0x08004663
 80044d0:	08004663 	.word	0x08004663
 80044d4:	08004663 	.word	0x08004663
 80044d8:	08004621 	.word	0x08004621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fa84 	bl	80049f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
      break;
 800451a:	e0a5      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 faea 	bl	8004afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
      break;
 800455c:	e084      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fb49 	bl	8004bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0208 	orr.w	r2, r2, #8
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0204 	bic.w	r2, r2, #4
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
      break;
 800459c:	e064      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fba7 	bl	8004cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	61da      	str	r2, [r3, #28]
      break;
 80045de:	e043      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fbea 	bl	8004dc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800461e:	e023      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fc28 	bl	8004e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	021a      	lsls	r2, r3, #8
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004660:	e002      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	75fb      	strb	r3, [r7, #23]
      break;
 8004666:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_TIM_ConfigClockSource+0x1c>
 8004694:	2302      	movs	r3, #2
 8004696:	e0b6      	b.n	8004806 <HAL_TIM_ConfigClockSource+0x18a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d4:	d03e      	beq.n	8004754 <HAL_TIM_ConfigClockSource+0xd8>
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	f200 8087 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	f000 8086 	beq.w	80047f2 <HAL_TIM_ConfigClockSource+0x176>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	d87f      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046ec:	2b70      	cmp	r3, #112	; 0x70
 80046ee:	d01a      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xaa>
 80046f0:	2b70      	cmp	r3, #112	; 0x70
 80046f2:	d87b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046f4:	2b60      	cmp	r3, #96	; 0x60
 80046f6:	d050      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x11e>
 80046f8:	2b60      	cmp	r3, #96	; 0x60
 80046fa:	d877      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046fc:	2b50      	cmp	r3, #80	; 0x50
 80046fe:	d03c      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xfe>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d873      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d058      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x13e>
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d86f      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d064      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004710:	2b30      	cmp	r3, #48	; 0x30
 8004712:	d86b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d060      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004718:	2b20      	cmp	r3, #32
 800471a:	d867      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d05c      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004720:	2b10      	cmp	r3, #16
 8004722:	d05a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004724:	e062      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6899      	ldr	r1, [r3, #8]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f000 fd0e 	bl	8005156 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	609a      	str	r2, [r3, #8]
      break;
 8004752:	e04f      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6899      	ldr	r1, [r3, #8]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f000 fcf7 	bl	8005156 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004776:	609a      	str	r2, [r3, #8]
      break;
 8004778:	e03c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	f000 fc6b 	bl	8005062 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2150      	movs	r1, #80	; 0x50
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fcc4 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004798:	e02c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f000 fc8a 	bl	80050c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2160      	movs	r1, #96	; 0x60
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fcb4 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 80047b8:	e01c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fc4b 	bl	8005062 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fca4 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e00c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f000 fc9b 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 80047ea:	e003      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e000      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004822:	2302      	movs	r3, #2
 8004824:	e031      	b.n	800488a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb7f 	bl	8004f3c <TIM_SlaveTimer_SetConfig>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e018      	b.n	800488a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004876:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  return htim->State;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2e      	ldr	r2, [pc, #184]	; (80049e0 <TIM_Base_SetConfig+0xcc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0x20>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d108      	bne.n	8004946 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <TIM_Base_SetConfig+0xcc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_Base_SetConfig+0x5a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d00b      	beq.n	800496e <TIM_Base_SetConfig+0x5a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <TIM_Base_SetConfig+0xd0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_Base_SetConfig+0x5a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <TIM_Base_SetConfig+0xd4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_Base_SetConfig+0x5a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <TIM_Base_SetConfig+0xd8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <TIM_Base_SetConfig+0xcc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_Base_SetConfig+0xb0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <TIM_Base_SetConfig+0xd0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_Base_SetConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <TIM_Base_SetConfig+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0xb0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <TIM_Base_SetConfig+0xd8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d103      	bne.n	80049cc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	615a      	str	r2, [r3, #20]
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 0302 	bic.w	r3, r3, #2
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a28      	ldr	r2, [pc, #160]	; (8004aec <TIM_OC1_SetConfig+0xfc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_OC1_SetConfig+0x78>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a27      	ldr	r2, [pc, #156]	; (8004af0 <TIM_OC1_SetConfig+0x100>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_OC1_SetConfig+0x78>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a26      	ldr	r2, [pc, #152]	; (8004af4 <TIM_OC1_SetConfig+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC1_SetConfig+0x78>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <TIM_OC1_SetConfig+0x108>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10c      	bne.n	8004a82 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0308 	bic.w	r3, r3, #8
 8004a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <TIM_OC1_SetConfig+0xfc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <TIM_OC1_SetConfig+0x100>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <TIM_OC1_SetConfig+0x104>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC1_SetConfig+0x108>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800

08004afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0210 	bic.w	r2, r3, #16
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0320 	bic.w	r3, r3, #32
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a24      	ldr	r2, [pc, #144]	; (8004bec <TIM_OC2_SetConfig+0xf0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10d      	bne.n	8004b7c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <TIM_OC2_SetConfig+0xf0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_OC2_SetConfig+0xa0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <TIM_OC2_SetConfig+0xf4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_OC2_SetConfig+0xa0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC2_SetConfig+0xf8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_OC2_SetConfig+0xa0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC2_SetConfig+0xfc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d113      	bne.n	8004bc4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004baa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800

08004bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <TIM_OC3_SetConfig+0xec>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10d      	bne.n	8004c7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <TIM_OC3_SetConfig+0xec>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_OC3_SetConfig+0x9e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <TIM_OC3_SetConfig+0xf0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC3_SetConfig+0x9e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <TIM_OC3_SetConfig+0xf4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC3_SetConfig+0x9e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <TIM_OC3_SetConfig+0xf8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d113      	bne.n	8004cc2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800

08004cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <TIM_OC4_SetConfig+0xb8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_OC4_SetConfig+0x7c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <TIM_OC4_SetConfig+0xbc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d007      	beq.n	8004d74 <TIM_OC4_SetConfig+0x7c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <TIM_OC4_SetConfig+0xc0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_OC4_SetConfig+0x7c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <TIM_OC4_SetConfig+0xc4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d109      	bne.n	8004d88 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <TIM_OC5_SetConfig+0xac>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_OC5_SetConfig+0x72>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <TIM_OC5_SetConfig+0xb0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_OC5_SetConfig+0x72>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <TIM_OC5_SetConfig+0xb4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC5_SetConfig+0x72>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a12      	ldr	r2, [pc, #72]	; (8004e78 <TIM_OC5_SetConfig+0xb8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d109      	bne.n	8004e46 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800

08004e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	051b      	lsls	r3, r3, #20
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <TIM_OC6_SetConfig+0xb0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_OC6_SetConfig+0x74>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <TIM_OC6_SetConfig+0xb4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_OC6_SetConfig+0x74>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <TIM_OC6_SetConfig+0xb8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_OC6_SetConfig+0x74>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <TIM_OC6_SetConfig+0xbc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d109      	bne.n	8004f04 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	029b      	lsls	r3, r3, #10
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40014400 	.word	0x40014400
 8004f38:	40014800 	.word	0x40014800

08004f3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b70      	cmp	r3, #112	; 0x70
 8004f88:	d01a      	beq.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x84>
 8004f8a:	2b70      	cmp	r3, #112	; 0x70
 8004f8c:	d860      	bhi.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
 8004f8e:	2b60      	cmp	r3, #96	; 0x60
 8004f90:	d054      	beq.n	800503c <TIM_SlaveTimer_SetConfig+0x100>
 8004f92:	2b60      	cmp	r3, #96	; 0x60
 8004f94:	d85c      	bhi.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
 8004f96:	2b50      	cmp	r3, #80	; 0x50
 8004f98:	d046      	beq.n	8005028 <TIM_SlaveTimer_SetConfig+0xec>
 8004f9a:	2b50      	cmp	r3, #80	; 0x50
 8004f9c:	d858      	bhi.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d019      	beq.n	8004fd6 <TIM_SlaveTimer_SetConfig+0x9a>
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d854      	bhi.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
 8004fa6:	2b30      	cmp	r3, #48	; 0x30
 8004fa8:	d055      	beq.n	8005056 <TIM_SlaveTimer_SetConfig+0x11a>
 8004faa:	2b30      	cmp	r3, #48	; 0x30
 8004fac:	d850      	bhi.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d051      	beq.n	8005056 <TIM_SlaveTimer_SetConfig+0x11a>
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d84c      	bhi.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d04d      	beq.n	8005056 <TIM_SlaveTimer_SetConfig+0x11a>
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d04b      	beq.n	8005056 <TIM_SlaveTimer_SetConfig+0x11a>
 8004fbe:	e047      	b.n	8005050 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68d9      	ldr	r1, [r3, #12]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f000 f8c1 	bl	8005156 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004fd4:	e040      	b.n	8005058 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d101      	bne.n	8004fe2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e03b      	b.n	800505a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005008:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
      break;
 8005026:	e017      	b.n	8005058 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6899      	ldr	r1, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	461a      	mov	r2, r3
 8005036:	f000 f814 	bl	8005062 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800503a:	e00d      	b.n	8005058 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6899      	ldr	r1, [r3, #8]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	461a      	mov	r2, r3
 800504a:	f000 f839 	bl	80050c0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800504e:	e003      	b.n	8005058 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
      break;
 8005054:	e000      	b.n	8005058 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005056:	bf00      	nop
  }

  return status;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005062:	b480      	push	{r7}
 8005064:	b087      	sub	sp, #28
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f023 0201 	bic.w	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 030a 	bic.w	r3, r3, #10
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f023 0210 	bic.w	r2, r3, #16
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	031b      	lsls	r3, r3, #12
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	f043 0307 	orr.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	609a      	str	r2, [r3, #8]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005156:	b480      	push	{r7}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005170:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	431a      	orrs	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	609a      	str	r2, [r3, #8]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2201      	movs	r2, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	401a      	ands	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e04f      	b.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005228:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d004      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e060      	b.n	800538a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d115      	bne.n	8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	051b      	lsls	r3, r3, #20
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00

0800539c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e040      	b.n	800546c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fb fd2e 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fd16 	bl	8005e48 <UART_SetConfig>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e022      	b.n	800546c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fe40 	bl	80060b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fec7 	bl	80061f8 <UART_CheckIdleState>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005488:	2b20      	cmp	r3, #32
 800548a:	f040 8082 	bne.w	8005592 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_Transmit+0x26>
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e07a      	b.n	8005594 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_UART_Transmit+0x38>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e073      	b.n	8005594 <HAL_UART_Transmit+0x120>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2221      	movs	r2, #33	; 0x21
 80054c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054c2:	f7fb ff13 	bl	80012ec <HAL_GetTick>
 80054c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d108      	bne.n	80054f4 <HAL_UART_Transmit+0x80>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e003      	b.n	80054fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005504:	e02d      	b.n	8005562 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2200      	movs	r2, #0
 800550e:	2180      	movs	r1, #128	; 0x80
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 feba 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e039      	b.n	8005594 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005532:	b292      	uxth	r2, r2
 8005534:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	3302      	adds	r3, #2
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e008      	b.n	8005550 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	b292      	uxth	r2, r2
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1cb      	bne.n	8005506 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	2140      	movs	r1, #64	; 0x40
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fe86 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e005      	b.n	8005594 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	f040 80bf 	bne.w	8005734 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_UART_Receive+0x26>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0b7      	b.n	8005736 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Receive+0x38>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e0b0      	b.n	8005736 <HAL_UART_Receive+0x19a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2222      	movs	r2, #34	; 0x22
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f0:	f7fb fe7c 	bl	80012ec <HAL_GetTick>
 80055f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560e:	d10e      	bne.n	800562e <HAL_UART_Receive+0x92>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_UART_Receive+0x88>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800561e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005622:	e02d      	b.n	8005680 <HAL_UART_Receive+0xe4>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	22ff      	movs	r2, #255	; 0xff
 8005628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800562c:	e028      	b.n	8005680 <HAL_UART_Receive+0xe4>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <HAL_UART_Receive+0xb6>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <HAL_UART_Receive+0xac>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	22ff      	movs	r2, #255	; 0xff
 8005642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005646:	e01b      	b.n	8005680 <HAL_UART_Receive+0xe4>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	227f      	movs	r2, #127	; 0x7f
 800564c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005650:	e016      	b.n	8005680 <HAL_UART_Receive+0xe4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800565a:	d10d      	bne.n	8005678 <HAL_UART_Receive+0xdc>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_UART_Receive+0xd2>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	227f      	movs	r2, #127	; 0x7f
 8005668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800566c:	e008      	b.n	8005680 <HAL_UART_Receive+0xe4>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	223f      	movs	r2, #63	; 0x3f
 8005672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005676:	e003      	b.n	8005680 <HAL_UART_Receive+0xe4>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005686:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005690:	d108      	bne.n	80056a4 <HAL_UART_Receive+0x108>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	e003      	b.n	80056ac <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056b4:	e033      	b.n	800571e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2200      	movs	r2, #0
 80056be:	2120      	movs	r1, #32
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fde2 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e032      	b.n	8005736 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10c      	bne.n	80056f0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056dc:	b29a      	uxth	r2, r3
 80056de:	8a7b      	ldrh	r3, [r7, #18]
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	3302      	adds	r3, #2
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e00d      	b.n	800570c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8a7b      	ldrh	r3, [r7, #18]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	4013      	ands	r3, r2
 8005700:	b2da      	uxtb	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3301      	adds	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1c5      	bne.n	80056b6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005752:	2b20      	cmp	r3, #32
 8005754:	d178      	bne.n	8005848 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_UART_Transmit_DMA+0x22>
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e071      	b.n	800584a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_UART_Transmit_DMA+0x34>
 8005770:	2302      	movs	r3, #2
 8005772:	e06a      	b.n	800584a <HAL_UART_Transmit_DMA+0x10a>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	88fa      	ldrh	r2, [r7, #6]
 800578e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2221      	movs	r2, #33	; 0x21
 800579e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02b      	beq.n	8005800 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ac:	4a29      	ldr	r2, [pc, #164]	; (8005854 <HAL_UART_Transmit_DMA+0x114>)
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <HAL_UART_Transmit_DMA+0x118>)
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	4a27      	ldr	r2, [pc, #156]	; (800585c <HAL_UART_Transmit_DMA+0x11c>)
 80057be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c4:	2200      	movs	r2, #0
 80057c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	4619      	mov	r1, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3328      	adds	r3, #40	; 0x28
 80057d8:	461a      	mov	r2, r3
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f7fc fae8 	bl	8001db0 <HAL_DMA_Start_IT>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e024      	b.n	800584a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2240      	movs	r2, #64	; 0x40
 8005806:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	613b      	str	r3, [r7, #16]
   return(result);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005830:	623a      	str	r2, [r7, #32]
 8005832:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	69f9      	ldr	r1, [r7, #28]
 8005836:	6a3a      	ldr	r2, [r7, #32]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	61bb      	str	r3, [r7, #24]
   return(result);
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	08006525 	.word	0x08006525
 8005858:	080065b9 	.word	0x080065b9
 800585c:	080065d5 	.word	0x080065d5

08005860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b0ba      	sub	sp, #232	; 0xe8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005886:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800588a:	f640 030f 	movw	r3, #2063	; 0x80f
 800588e:	4013      	ands	r3, r2
 8005890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d115      	bne.n	80058c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00f      	beq.n	80058c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 82a3 	beq.w	8005e04 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      }
      return;
 80058c6:	e29d      	b.n	8005e04 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8117 	beq.w	8005b00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058e2:	4b85      	ldr	r3, [pc, #532]	; (8005af8 <HAL_UART_IRQHandler+0x298>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 810a 	beq.w	8005b00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <HAL_UART_IRQHandler+0xbc>
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d011      	beq.n	800594c <HAL_UART_IRQHandler+0xec>
 8005928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2202      	movs	r2, #2
 800593a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <HAL_UART_IRQHandler+0x11c>
 8005958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2204      	movs	r2, #4
 800596a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d017      	beq.n	80059b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005998:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2208      	movs	r2, #8
 80059a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ae:	f043 0208 	orr.w	r2, r3, #8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d012      	beq.n	80059ea <HAL_UART_IRQHandler+0x18a>
 80059c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8209 	beq.w	8005e08 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d04f      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd0b 	bl	800645e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d141      	bne.n	8005ada <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1d9      	bne.n	8005a56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	4a13      	ldr	r2, [pc, #76]	; (8005afc <HAL_UART_IRQHandler+0x29c>)
 8005ab0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fc fa12 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d017      	beq.n	8005af2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e00f      	b.n	8005af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fa ff8e 	bl	80009f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	e00b      	b.n	8005af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fa ff8a 	bl	80009f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e007      	b.n	8005af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fa ff86 	bl	80009f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005af0:	e18a      	b.n	8005e08 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af2:	bf00      	nop
    return;
 8005af4:	e188      	b.n	8005e08 <HAL_UART_IRQHandler+0x5a8>
 8005af6:	bf00      	nop
 8005af8:	04000120 	.word	0x04000120
 8005afc:	08006651 	.word	0x08006651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 8143 	bne.w	8005d90 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 813c 	beq.w	8005d90 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8135 	beq.w	8005d90 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2210      	movs	r2, #16
 8005b2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	f040 80b1 	bne.w	8005ca0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 815c 	beq.w	8005e0c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f080 8154 	bcs.w	8005e0c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f000 8085 	beq.w	8005c84 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ba8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1da      	bne.n	8005b7a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005be8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e1      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e3      	bne.n	8005c00 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c54:	f023 0310 	bic.w	r3, r3, #16
 8005c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e4      	bne.n	8005c44 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fc f8f5 	bl	8001e6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f8c9 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c9e:	e0b5      	b.n	8005e0c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80a7 	beq.w	8005e10 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80a2 	beq.w	8005e10 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e4      	bne.n	8005ccc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	623b      	str	r3, [r7, #32]
   return(result);
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d26:	633a      	str	r2, [r7, #48]	; 0x30
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e3      	bne.n	8005d02 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0310 	bic.w	r3, r3, #16
 8005d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	69b9      	ldr	r1, [r7, #24]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e4      	bne.n	8005d4c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f851 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d8e:	e03f      	b.n	8005e10 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00e      	beq.n	8005dba <HAL_UART_IRQHandler+0x55a>
 8005d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fc8c 	bl	80066d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005db8:	e02d      	b.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01c      	beq.n	8005e14 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
    }
    return;
 8005de2:	e017      	b.n	8005e14 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d012      	beq.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fc3d 	bl	800667c <UART_EndTransmit_IT>
    return;
 8005e02:	e008      	b.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e04:	bf00      	nop
 8005e06:	e006      	b.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e08:	bf00      	nop
 8005e0a:	e004      	b.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e0c:	bf00      	nop
 8005e0e:	e002      	b.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e14:	bf00      	nop
  }

}
 8005e16:	37e8      	adds	r7, #232	; 0xe8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b8a      	ldr	r3, [pc, #552]	; (800609c <UART_SetConfig+0x254>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	6979      	ldr	r1, [r7, #20]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a78      	ldr	r2, [pc, #480]	; (80060a0 <UART_SetConfig+0x258>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d120      	bne.n	8005f06 <UART_SetConfig+0xbe>
 8005ec4:	4b77      	ldr	r3, [pc, #476]	; (80060a4 <UART_SetConfig+0x25c>)
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d817      	bhi.n	8005f00 <UART_SetConfig+0xb8>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <UART_SetConfig+0x90>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005efb 	.word	0x08005efb
 8005ee4:	08005eef 	.word	0x08005eef
 8005ee8:	2300      	movs	r3, #0
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e01d      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	77fb      	strb	r3, [r7, #31]
 8005ef2:	e01a      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e017      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005efa:	2308      	movs	r3, #8
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e014      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005f00:	2310      	movs	r3, #16
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e011      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a67      	ldr	r2, [pc, #412]	; (80060a8 <UART_SetConfig+0x260>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d102      	bne.n	8005f16 <UART_SetConfig+0xce>
 8005f10:	2300      	movs	r3, #0
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e009      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a64      	ldr	r2, [pc, #400]	; (80060ac <UART_SetConfig+0x264>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d102      	bne.n	8005f26 <UART_SetConfig+0xde>
 8005f20:	2300      	movs	r3, #0
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e001      	b.n	8005f2a <UART_SetConfig+0xe2>
 8005f26:	2310      	movs	r3, #16
 8005f28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f32:	d15b      	bne.n	8005fec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d827      	bhi.n	8005f8a <UART_SetConfig+0x142>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0xf8>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	08005f8b 	.word	0x08005f8b
 8005f50:	08005f7b 	.word	0x08005f7b
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005f8b 	.word	0x08005f8b
 8005f60:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f64:	f7fd fb70 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8005f68:	61b8      	str	r0, [r7, #24]
        break;
 8005f6a:	e013      	b.n	8005f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fd fb8e 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8005f70:	61b8      	str	r0, [r7, #24]
        break;
 8005f72:	e00f      	b.n	8005f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f74:	4b4e      	ldr	r3, [pc, #312]	; (80060b0 <UART_SetConfig+0x268>)
 8005f76:	61bb      	str	r3, [r7, #24]
        break;
 8005f78:	e00c      	b.n	8005f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7a:	f7fd faef 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8005f7e:	61b8      	str	r0, [r7, #24]
        break;
 8005f80:	e008      	b.n	8005f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f86:	61bb      	str	r3, [r7, #24]
        break;
 8005f88:	e004      	b.n	8005f94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	77bb      	strb	r3, [r7, #30]
        break;
 8005f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d074      	beq.n	8006084 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	005a      	lsls	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d916      	bls.n	8005fe6 <UART_SetConfig+0x19e>
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbe:	d212      	bcs.n	8005fe6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f023 030f 	bic.w	r3, r3, #15
 8005fc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	89fb      	ldrh	r3, [r7, #14]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	89fa      	ldrh	r2, [r7, #14]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e04e      	b.n	8006084 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	77bb      	strb	r3, [r7, #30]
 8005fea:	e04b      	b.n	8006084 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fec:	7ffb      	ldrb	r3, [r7, #31]
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d827      	bhi.n	8006042 <UART_SetConfig+0x1fa>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x1b0>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006025 	.word	0x08006025
 8006000:	0800602d 	.word	0x0800602d
 8006004:	08006043 	.word	0x08006043
 8006008:	08006033 	.word	0x08006033
 800600c:	08006043 	.word	0x08006043
 8006010:	08006043 	.word	0x08006043
 8006014:	08006043 	.word	0x08006043
 8006018:	0800603b 	.word	0x0800603b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601c:	f7fd fb14 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8006020:	61b8      	str	r0, [r7, #24]
        break;
 8006022:	e013      	b.n	800604c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006024:	f7fd fb32 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8006028:	61b8      	str	r0, [r7, #24]
        break;
 800602a:	e00f      	b.n	800604c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800602c:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <UART_SetConfig+0x268>)
 800602e:	61bb      	str	r3, [r7, #24]
        break;
 8006030:	e00c      	b.n	800604c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006032:	f7fd fa93 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8006036:	61b8      	str	r0, [r7, #24]
        break;
 8006038:	e008      	b.n	800604c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603e:	61bb      	str	r3, [r7, #24]
        break;
 8006040:	e004      	b.n	800604c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	77bb      	strb	r3, [r7, #30]
        break;
 800604a:	bf00      	nop
    }

    if (pclk != 0U)
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d018      	beq.n	8006084 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	085a      	lsrs	r2, r3, #1
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	441a      	add	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	b29b      	uxth	r3, r3
 8006066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b0f      	cmp	r3, #15
 800606c:	d908      	bls.n	8006080 <UART_SetConfig+0x238>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d204      	bcs.n	8006080 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	e001      	b.n	8006084 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006090:	7fbb      	ldrb	r3, [r7, #30]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	efff69f3 	.word	0xefff69f3
 80060a0:	40013800 	.word	0x40013800
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40004400 	.word	0x40004400
 80060ac:	40004800 	.word	0x40004800
 80060b0:	007a1200 	.word	0x007a1200

080060b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01a      	beq.n	80061ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b2:	d10a      	bne.n	80061ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006208:	f7fb f870 	bl	80012ec <HAL_GetTick>
 800620c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d10e      	bne.n	800623a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f82d 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e023      	b.n	8006282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b04      	cmp	r3, #4
 8006246:	d10e      	bne.n	8006266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f817 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e00d      	b.n	8006282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b09c      	sub	sp, #112	; 0x70
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	e0a5      	b.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a2:	f000 80a1 	beq.w	80063e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fb f821 	bl	80012ec <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <UART_WaitOnFlagUntilTimeout+0x32>
 80062b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d13e      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	663b      	str	r3, [r7, #96]	; 0x60
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800630e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e067      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d04f      	beq.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d147      	bne.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006360:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
 8006382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e6      	bne.n	8006362 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3308      	adds	r3, #8
 800639a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	613b      	str	r3, [r7, #16]
   return(result);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3308      	adds	r3, #8
 80063b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063b4:	623a      	str	r2, [r7, #32]
 80063b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e5      	bne.n	8006394 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e010      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	429a      	cmp	r2, r3
 8006404:	f43f af4a 	beq.w	800629c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3770      	adds	r7, #112	; 0x70
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006412:	b480      	push	{r7}
 8006414:	b089      	sub	sp, #36	; 0x24
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	60bb      	str	r3, [r7, #8]
   return(result);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6979      	ldr	r1, [r7, #20]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	613b      	str	r3, [r7, #16]
   return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e6      	bne.n	800641a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006452:	bf00      	nop
 8006454:	3724      	adds	r7, #36	; 0x24
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800645e:	b480      	push	{r7}
 8006460:	b095      	sub	sp, #84	; 0x54
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006484:	643b      	str	r3, [r7, #64]	; 0x40
 8006486:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800648a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f023 0301 	bic.w	r3, r3, #1
 80064ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d118      	bne.n	8006506 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f023 0310 	bic.w	r3, r3, #16
 80064e8:	647b      	str	r3, [r7, #68]	; 0x44
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6979      	ldr	r1, [r7, #20]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e6      	bne.n	80064d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006518:	bf00      	nop
 800651a:	3754      	adds	r7, #84	; 0x54
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b090      	sub	sp, #64	; 0x40
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b20      	cmp	r3, #32
 8006538:	d037      	beq.n	80065aa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653c:	2200      	movs	r2, #0
 800653e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	623b      	str	r3, [r7, #32]
   return(result);
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
 800655a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006562:	633a      	str	r2, [r7, #48]	; 0x30
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e5      	bne.n	8006542 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60fb      	str	r3, [r7, #12]
   return(result);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69b9      	ldr	r1, [r7, #24]
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	617b      	str	r3, [r7, #20]
   return(result);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065a8:	e002      	b.n	80065b0 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80065aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065ac:	f7fa fa18 	bl	80009e0 <HAL_UART_TxCpltCallback>
}
 80065b0:	bf00      	nop
 80065b2:	3740      	adds	r7, #64	; 0x40
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fc28 	bl	8005e1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b80      	cmp	r3, #128	; 0x80
 80065fa:	d109      	bne.n	8006610 <UART_DMAError+0x3c>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b21      	cmp	r3, #33	; 0x21
 8006600:	d106      	bne.n	8006610 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800660a:	6978      	ldr	r0, [r7, #20]
 800660c:	f7ff ff01 	bl	8006412 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b40      	cmp	r3, #64	; 0x40
 800661c:	d109      	bne.n	8006632 <UART_DMAError+0x5e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b22      	cmp	r3, #34	; 0x22
 8006622:	d106      	bne.n	8006632 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800662c:	6978      	ldr	r0, [r7, #20]
 800662e:	f7ff ff16 	bl	800645e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006638:	f043 0210 	orr.w	r2, r3, #16
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f7fa f9d6 	bl	80009f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006648:	bf00      	nop
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7fa f9c0 	bl	80009f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	60bb      	str	r3, [r7, #8]
   return(result);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	613b      	str	r3, [r7, #16]
   return(result);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fa f98c 	bl	80009e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <__errno>:
 80066e4:	4b01      	ldr	r3, [pc, #4]	; (80066ec <__errno+0x8>)
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000024 	.word	0x20000024

080066f0 <__libc_init_array>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	4d0d      	ldr	r5, [pc, #52]	; (8006728 <__libc_init_array+0x38>)
 80066f4:	4c0d      	ldr	r4, [pc, #52]	; (800672c <__libc_init_array+0x3c>)
 80066f6:	1b64      	subs	r4, r4, r5
 80066f8:	10a4      	asrs	r4, r4, #2
 80066fa:	2600      	movs	r6, #0
 80066fc:	42a6      	cmp	r6, r4
 80066fe:	d109      	bne.n	8006714 <__libc_init_array+0x24>
 8006700:	4d0b      	ldr	r5, [pc, #44]	; (8006730 <__libc_init_array+0x40>)
 8006702:	4c0c      	ldr	r4, [pc, #48]	; (8006734 <__libc_init_array+0x44>)
 8006704:	f000 fdb4 	bl	8007270 <_init>
 8006708:	1b64      	subs	r4, r4, r5
 800670a:	10a4      	asrs	r4, r4, #2
 800670c:	2600      	movs	r6, #0
 800670e:	42a6      	cmp	r6, r4
 8006710:	d105      	bne.n	800671e <__libc_init_array+0x2e>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	f855 3b04 	ldr.w	r3, [r5], #4
 8006718:	4798      	blx	r3
 800671a:	3601      	adds	r6, #1
 800671c:	e7ee      	b.n	80066fc <__libc_init_array+0xc>
 800671e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006722:	4798      	blx	r3
 8006724:	3601      	adds	r6, #1
 8006726:	e7f2      	b.n	800670e <__libc_init_array+0x1e>
 8006728:	08007330 	.word	0x08007330
 800672c:	08007330 	.word	0x08007330
 8006730:	08007330 	.word	0x08007330
 8006734:	08007334 	.word	0x08007334

08006738 <memset>:
 8006738:	4402      	add	r2, r0
 800673a:	4603      	mov	r3, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	f803 1b01 	strb.w	r1, [r3], #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <_puts_r>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4605      	mov	r5, r0
 800674e:	b118      	cbz	r0, 8006758 <_puts_r+0x10>
 8006750:	6983      	ldr	r3, [r0, #24]
 8006752:	b90b      	cbnz	r3, 8006758 <_puts_r+0x10>
 8006754:	f000 fb0e 	bl	8006d74 <__sinit>
 8006758:	69ab      	ldr	r3, [r5, #24]
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	b913      	cbnz	r3, 8006764 <_puts_r+0x1c>
 800675e:	4628      	mov	r0, r5
 8006760:	f000 fb08 	bl	8006d74 <__sinit>
 8006764:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <_puts_r+0xd0>)
 8006766:	429c      	cmp	r4, r3
 8006768:	d120      	bne.n	80067ac <_puts_r+0x64>
 800676a:	686c      	ldr	r4, [r5, #4]
 800676c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676e:	07db      	lsls	r3, r3, #31
 8006770:	d405      	bmi.n	800677e <_puts_r+0x36>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	0598      	lsls	r0, r3, #22
 8006776:	d402      	bmi.n	800677e <_puts_r+0x36>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f000 fb99 	bl	8006eb0 <__retarget_lock_acquire_recursive>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	0719      	lsls	r1, r3, #28
 8006782:	d51d      	bpl.n	80067c0 <_puts_r+0x78>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	b1db      	cbz	r3, 80067c0 <_puts_r+0x78>
 8006788:	3e01      	subs	r6, #1
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006790:	3b01      	subs	r3, #1
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	bb39      	cbnz	r1, 80067e6 <_puts_r+0x9e>
 8006796:	2b00      	cmp	r3, #0
 8006798:	da38      	bge.n	800680c <_puts_r+0xc4>
 800679a:	4622      	mov	r2, r4
 800679c:	210a      	movs	r1, #10
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f90e 	bl	80069c0 <__swbuf_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d011      	beq.n	80067cc <_puts_r+0x84>
 80067a8:	250a      	movs	r5, #10
 80067aa:	e011      	b.n	80067d0 <_puts_r+0x88>
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <_puts_r+0xd4>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <_puts_r+0x6e>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7da      	b.n	800676c <_puts_r+0x24>
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <_puts_r+0xd8>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7d5      	b.n	800676c <_puts_r+0x24>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f94e 	bl	8006a64 <__swsetup_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d0dd      	beq.n	8006788 <_puts_r+0x40>
 80067cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d2:	07da      	lsls	r2, r3, #31
 80067d4:	d405      	bmi.n	80067e2 <_puts_r+0x9a>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	059b      	lsls	r3, r3, #22
 80067da:	d402      	bmi.n	80067e2 <_puts_r+0x9a>
 80067dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067de:	f000 fb68 	bl	8006eb2 <__retarget_lock_release_recursive>
 80067e2:	4628      	mov	r0, r5
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da04      	bge.n	80067f4 <_puts_r+0xac>
 80067ea:	69a2      	ldr	r2, [r4, #24]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	dc06      	bgt.n	80067fe <_puts_r+0xb6>
 80067f0:	290a      	cmp	r1, #10
 80067f2:	d004      	beq.n	80067fe <_puts_r+0xb6>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	6022      	str	r2, [r4, #0]
 80067fa:	7019      	strb	r1, [r3, #0]
 80067fc:	e7c5      	b.n	800678a <_puts_r+0x42>
 80067fe:	4622      	mov	r2, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f8dd 	bl	80069c0 <__swbuf_r>
 8006806:	3001      	adds	r0, #1
 8006808:	d1bf      	bne.n	800678a <_puts_r+0x42>
 800680a:	e7df      	b.n	80067cc <_puts_r+0x84>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	250a      	movs	r5, #10
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	6022      	str	r2, [r4, #0]
 8006814:	701d      	strb	r5, [r3, #0]
 8006816:	e7db      	b.n	80067d0 <_puts_r+0x88>
 8006818:	080072f0 	.word	0x080072f0
 800681c:	08007310 	.word	0x08007310
 8006820:	080072d0 	.word	0x080072d0

08006824 <puts>:
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <puts+0xc>)
 8006826:	4601      	mov	r1, r0
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	f7ff bf8d 	b.w	8006748 <_puts_r>
 800682e:	bf00      	nop
 8006830:	20000024 	.word	0x20000024

08006834 <setvbuf>:
 8006834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006838:	461d      	mov	r5, r3
 800683a:	4b5d      	ldr	r3, [pc, #372]	; (80069b0 <setvbuf+0x17c>)
 800683c:	681f      	ldr	r7, [r3, #0]
 800683e:	4604      	mov	r4, r0
 8006840:	460e      	mov	r6, r1
 8006842:	4690      	mov	r8, r2
 8006844:	b127      	cbz	r7, 8006850 <setvbuf+0x1c>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	b913      	cbnz	r3, 8006850 <setvbuf+0x1c>
 800684a:	4638      	mov	r0, r7
 800684c:	f000 fa92 	bl	8006d74 <__sinit>
 8006850:	4b58      	ldr	r3, [pc, #352]	; (80069b4 <setvbuf+0x180>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d167      	bne.n	8006926 <setvbuf+0xf2>
 8006856:	687c      	ldr	r4, [r7, #4]
 8006858:	f1b8 0f02 	cmp.w	r8, #2
 800685c:	d006      	beq.n	800686c <setvbuf+0x38>
 800685e:	f1b8 0f01 	cmp.w	r8, #1
 8006862:	f200 809f 	bhi.w	80069a4 <setvbuf+0x170>
 8006866:	2d00      	cmp	r5, #0
 8006868:	f2c0 809c 	blt.w	80069a4 <setvbuf+0x170>
 800686c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800686e:	07db      	lsls	r3, r3, #31
 8006870:	d405      	bmi.n	800687e <setvbuf+0x4a>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	0598      	lsls	r0, r3, #22
 8006876:	d402      	bmi.n	800687e <setvbuf+0x4a>
 8006878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800687a:	f000 fb19 	bl	8006eb0 <__retarget_lock_acquire_recursive>
 800687e:	4621      	mov	r1, r4
 8006880:	4638      	mov	r0, r7
 8006882:	f000 f9e3 	bl	8006c4c <_fflush_r>
 8006886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006888:	b141      	cbz	r1, 800689c <setvbuf+0x68>
 800688a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800688e:	4299      	cmp	r1, r3
 8006890:	d002      	beq.n	8006898 <setvbuf+0x64>
 8006892:	4638      	mov	r0, r7
 8006894:	f000 fb7a 	bl	8006f8c <_free_r>
 8006898:	2300      	movs	r3, #0
 800689a:	6363      	str	r3, [r4, #52]	; 0x34
 800689c:	2300      	movs	r3, #0
 800689e:	61a3      	str	r3, [r4, #24]
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	0619      	lsls	r1, r3, #24
 80068a6:	d503      	bpl.n	80068b0 <setvbuf+0x7c>
 80068a8:	6921      	ldr	r1, [r4, #16]
 80068aa:	4638      	mov	r0, r7
 80068ac:	f000 fb6e 	bl	8006f8c <_free_r>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f1b8 0f02 	cmp.w	r8, #2
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	d06c      	beq.n	800699c <setvbuf+0x168>
 80068c2:	ab01      	add	r3, sp, #4
 80068c4:	466a      	mov	r2, sp
 80068c6:	4621      	mov	r1, r4
 80068c8:	4638      	mov	r0, r7
 80068ca:	f000 faf3 	bl	8006eb4 <__swhatbuf_r>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	4318      	orrs	r0, r3
 80068d2:	81a0      	strh	r0, [r4, #12]
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	d130      	bne.n	800693a <setvbuf+0x106>
 80068d8:	9d00      	ldr	r5, [sp, #0]
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 fb4e 	bl	8006f7c <malloc>
 80068e0:	4606      	mov	r6, r0
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d155      	bne.n	8006992 <setvbuf+0x15e>
 80068e6:	f8dd 9000 	ldr.w	r9, [sp]
 80068ea:	45a9      	cmp	r9, r5
 80068ec:	d14a      	bne.n	8006984 <setvbuf+0x150>
 80068ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80068f2:	2200      	movs	r2, #0
 80068f4:	60a2      	str	r2, [r4, #8]
 80068f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80068fa:	6022      	str	r2, [r4, #0]
 80068fc:	6122      	str	r2, [r4, #16]
 80068fe:	2201      	movs	r2, #1
 8006900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006904:	6162      	str	r2, [r4, #20]
 8006906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006908:	f043 0302 	orr.w	r3, r3, #2
 800690c:	07d2      	lsls	r2, r2, #31
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	d405      	bmi.n	800691e <setvbuf+0xea>
 8006912:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006916:	d102      	bne.n	800691e <setvbuf+0xea>
 8006918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691a:	f000 faca 	bl	8006eb2 <__retarget_lock_release_recursive>
 800691e:	4628      	mov	r0, r5
 8006920:	b003      	add	sp, #12
 8006922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006926:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <setvbuf+0x184>)
 8006928:	429c      	cmp	r4, r3
 800692a:	d101      	bne.n	8006930 <setvbuf+0xfc>
 800692c:	68bc      	ldr	r4, [r7, #8]
 800692e:	e793      	b.n	8006858 <setvbuf+0x24>
 8006930:	4b22      	ldr	r3, [pc, #136]	; (80069bc <setvbuf+0x188>)
 8006932:	429c      	cmp	r4, r3
 8006934:	bf08      	it	eq
 8006936:	68fc      	ldreq	r4, [r7, #12]
 8006938:	e78e      	b.n	8006858 <setvbuf+0x24>
 800693a:	2e00      	cmp	r6, #0
 800693c:	d0cd      	beq.n	80068da <setvbuf+0xa6>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	b913      	cbnz	r3, 8006948 <setvbuf+0x114>
 8006942:	4638      	mov	r0, r7
 8006944:	f000 fa16 	bl	8006d74 <__sinit>
 8006948:	f1b8 0f01 	cmp.w	r8, #1
 800694c:	bf08      	it	eq
 800694e:	89a3      	ldrheq	r3, [r4, #12]
 8006950:	6026      	str	r6, [r4, #0]
 8006952:	bf04      	itt	eq
 8006954:	f043 0301 	orreq.w	r3, r3, #1
 8006958:	81a3      	strheq	r3, [r4, #12]
 800695a:	89a2      	ldrh	r2, [r4, #12]
 800695c:	f012 0308 	ands.w	r3, r2, #8
 8006960:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006964:	d01c      	beq.n	80069a0 <setvbuf+0x16c>
 8006966:	07d3      	lsls	r3, r2, #31
 8006968:	bf41      	itttt	mi
 800696a:	2300      	movmi	r3, #0
 800696c:	426d      	negmi	r5, r5
 800696e:	60a3      	strmi	r3, [r4, #8]
 8006970:	61a5      	strmi	r5, [r4, #24]
 8006972:	bf58      	it	pl
 8006974:	60a5      	strpl	r5, [r4, #8]
 8006976:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006978:	f015 0501 	ands.w	r5, r5, #1
 800697c:	d115      	bne.n	80069aa <setvbuf+0x176>
 800697e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006982:	e7c8      	b.n	8006916 <setvbuf+0xe2>
 8006984:	4648      	mov	r0, r9
 8006986:	f000 faf9 	bl	8006f7c <malloc>
 800698a:	4606      	mov	r6, r0
 800698c:	2800      	cmp	r0, #0
 800698e:	d0ae      	beq.n	80068ee <setvbuf+0xba>
 8006990:	464d      	mov	r5, r9
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	e7d0      	b.n	800693e <setvbuf+0x10a>
 800699c:	2500      	movs	r5, #0
 800699e:	e7a8      	b.n	80068f2 <setvbuf+0xbe>
 80069a0:	60a3      	str	r3, [r4, #8]
 80069a2:	e7e8      	b.n	8006976 <setvbuf+0x142>
 80069a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80069a8:	e7b9      	b.n	800691e <setvbuf+0xea>
 80069aa:	2500      	movs	r5, #0
 80069ac:	e7b7      	b.n	800691e <setvbuf+0xea>
 80069ae:	bf00      	nop
 80069b0:	20000024 	.word	0x20000024
 80069b4:	080072f0 	.word	0x080072f0
 80069b8:	08007310 	.word	0x08007310
 80069bc:	080072d0 	.word	0x080072d0

080069c0 <__swbuf_r>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	460e      	mov	r6, r1
 80069c4:	4614      	mov	r4, r2
 80069c6:	4605      	mov	r5, r0
 80069c8:	b118      	cbz	r0, 80069d2 <__swbuf_r+0x12>
 80069ca:	6983      	ldr	r3, [r0, #24]
 80069cc:	b90b      	cbnz	r3, 80069d2 <__swbuf_r+0x12>
 80069ce:	f000 f9d1 	bl	8006d74 <__sinit>
 80069d2:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <__swbuf_r+0x98>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d12b      	bne.n	8006a30 <__swbuf_r+0x70>
 80069d8:	686c      	ldr	r4, [r5, #4]
 80069da:	69a3      	ldr	r3, [r4, #24]
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	071a      	lsls	r2, r3, #28
 80069e2:	d52f      	bpl.n	8006a44 <__swbuf_r+0x84>
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b36b      	cbz	r3, 8006a44 <__swbuf_r+0x84>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1ac0      	subs	r0, r0, r3
 80069ee:	6963      	ldr	r3, [r4, #20]
 80069f0:	b2f6      	uxtb	r6, r6
 80069f2:	4283      	cmp	r3, r0
 80069f4:	4637      	mov	r7, r6
 80069f6:	dc04      	bgt.n	8006a02 <__swbuf_r+0x42>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 f926 	bl	8006c4c <_fflush_r>
 8006a00:	bb30      	cbnz	r0, 8006a50 <__swbuf_r+0x90>
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	701e      	strb	r6, [r3, #0]
 8006a10:	6963      	ldr	r3, [r4, #20]
 8006a12:	3001      	adds	r0, #1
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d004      	beq.n	8006a22 <__swbuf_r+0x62>
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	07db      	lsls	r3, r3, #31
 8006a1c:	d506      	bpl.n	8006a2c <__swbuf_r+0x6c>
 8006a1e:	2e0a      	cmp	r6, #10
 8006a20:	d104      	bne.n	8006a2c <__swbuf_r+0x6c>
 8006a22:	4621      	mov	r1, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f911 	bl	8006c4c <_fflush_r>
 8006a2a:	b988      	cbnz	r0, 8006a50 <__swbuf_r+0x90>
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <__swbuf_r+0x9c>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	d101      	bne.n	8006a3a <__swbuf_r+0x7a>
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	e7cf      	b.n	80069da <__swbuf_r+0x1a>
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <__swbuf_r+0xa0>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	bf08      	it	eq
 8006a40:	68ec      	ldreq	r4, [r5, #12]
 8006a42:	e7ca      	b.n	80069da <__swbuf_r+0x1a>
 8006a44:	4621      	mov	r1, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f80c 	bl	8006a64 <__swsetup_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0cb      	beq.n	80069e8 <__swbuf_r+0x28>
 8006a50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a54:	e7ea      	b.n	8006a2c <__swbuf_r+0x6c>
 8006a56:	bf00      	nop
 8006a58:	080072f0 	.word	0x080072f0
 8006a5c:	08007310 	.word	0x08007310
 8006a60:	080072d0 	.word	0x080072d0

08006a64 <__swsetup_r>:
 8006a64:	4b32      	ldr	r3, [pc, #200]	; (8006b30 <__swsetup_r+0xcc>)
 8006a66:	b570      	push	{r4, r5, r6, lr}
 8006a68:	681d      	ldr	r5, [r3, #0]
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	b125      	cbz	r5, 8006a7a <__swsetup_r+0x16>
 8006a70:	69ab      	ldr	r3, [r5, #24]
 8006a72:	b913      	cbnz	r3, 8006a7a <__swsetup_r+0x16>
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 f97d 	bl	8006d74 <__sinit>
 8006a7a:	4b2e      	ldr	r3, [pc, #184]	; (8006b34 <__swsetup_r+0xd0>)
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	d10f      	bne.n	8006aa0 <__swsetup_r+0x3c>
 8006a80:	686c      	ldr	r4, [r5, #4]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a88:	0719      	lsls	r1, r3, #28
 8006a8a:	d42c      	bmi.n	8006ae6 <__swsetup_r+0x82>
 8006a8c:	06dd      	lsls	r5, r3, #27
 8006a8e:	d411      	bmi.n	8006ab4 <__swsetup_r+0x50>
 8006a90:	2309      	movs	r3, #9
 8006a92:	6033      	str	r3, [r6, #0]
 8006a94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a9e:	e03e      	b.n	8006b1e <__swsetup_r+0xba>
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <__swsetup_r+0xd4>)
 8006aa2:	429c      	cmp	r4, r3
 8006aa4:	d101      	bne.n	8006aaa <__swsetup_r+0x46>
 8006aa6:	68ac      	ldr	r4, [r5, #8]
 8006aa8:	e7eb      	b.n	8006a82 <__swsetup_r+0x1e>
 8006aaa:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <__swsetup_r+0xd8>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	bf08      	it	eq
 8006ab0:	68ec      	ldreq	r4, [r5, #12]
 8006ab2:	e7e6      	b.n	8006a82 <__swsetup_r+0x1e>
 8006ab4:	0758      	lsls	r0, r3, #29
 8006ab6:	d512      	bpl.n	8006ade <__swsetup_r+0x7a>
 8006ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aba:	b141      	cbz	r1, 8006ace <__swsetup_r+0x6a>
 8006abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d002      	beq.n	8006aca <__swsetup_r+0x66>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 fa61 	bl	8006f8c <_free_r>
 8006aca:	2300      	movs	r3, #0
 8006acc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f043 0308 	orr.w	r3, r3, #8
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	b94b      	cbnz	r3, 8006afe <__swsetup_r+0x9a>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d003      	beq.n	8006afe <__swsetup_r+0x9a>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f9ff 	bl	8006efc <__smakebuf_r>
 8006afe:	89a0      	ldrh	r0, [r4, #12]
 8006b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b04:	f010 0301 	ands.w	r3, r0, #1
 8006b08:	d00a      	beq.n	8006b20 <__swsetup_r+0xbc>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60a3      	str	r3, [r4, #8]
 8006b0e:	6963      	ldr	r3, [r4, #20]
 8006b10:	425b      	negs	r3, r3
 8006b12:	61a3      	str	r3, [r4, #24]
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	b943      	cbnz	r3, 8006b2a <__swsetup_r+0xc6>
 8006b18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b1c:	d1ba      	bne.n	8006a94 <__swsetup_r+0x30>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	0781      	lsls	r1, r0, #30
 8006b22:	bf58      	it	pl
 8006b24:	6963      	ldrpl	r3, [r4, #20]
 8006b26:	60a3      	str	r3, [r4, #8]
 8006b28:	e7f4      	b.n	8006b14 <__swsetup_r+0xb0>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	e7f7      	b.n	8006b1e <__swsetup_r+0xba>
 8006b2e:	bf00      	nop
 8006b30:	20000024 	.word	0x20000024
 8006b34:	080072f0 	.word	0x080072f0
 8006b38:	08007310 	.word	0x08007310
 8006b3c:	080072d0 	.word	0x080072d0

08006b40 <__sflush_r>:
 8006b40:	898a      	ldrh	r2, [r1, #12]
 8006b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	4605      	mov	r5, r0
 8006b48:	0710      	lsls	r0, r2, #28
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	d458      	bmi.n	8006c00 <__sflush_r+0xc0>
 8006b4e:	684b      	ldr	r3, [r1, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dc05      	bgt.n	8006b60 <__sflush_r+0x20>
 8006b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc02      	bgt.n	8006b60 <__sflush_r+0x20>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	d0f9      	beq.n	8006b5a <__sflush_r+0x1a>
 8006b66:	2300      	movs	r3, #0
 8006b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b6c:	682f      	ldr	r7, [r5, #0]
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	d032      	beq.n	8006bd8 <__sflush_r+0x98>
 8006b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	075a      	lsls	r2, r3, #29
 8006b78:	d505      	bpl.n	8006b86 <__sflush_r+0x46>
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	1ac0      	subs	r0, r0, r3
 8006b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b80:	b10b      	cbz	r3, 8006b86 <__sflush_r+0x46>
 8006b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b84:	1ac0      	subs	r0, r0, r3
 8006b86:	2300      	movs	r3, #0
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8c:	6a21      	ldr	r1, [r4, #32]
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b0      	blx	r6
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	d106      	bne.n	8006ba6 <__sflush_r+0x66>
 8006b98:	6829      	ldr	r1, [r5, #0]
 8006b9a:	291d      	cmp	r1, #29
 8006b9c:	d82c      	bhi.n	8006bf8 <__sflush_r+0xb8>
 8006b9e:	4a2a      	ldr	r2, [pc, #168]	; (8006c48 <__sflush_r+0x108>)
 8006ba0:	40ca      	lsrs	r2, r1
 8006ba2:	07d6      	lsls	r6, r2, #31
 8006ba4:	d528      	bpl.n	8006bf8 <__sflush_r+0xb8>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	6062      	str	r2, [r4, #4]
 8006baa:	04d9      	lsls	r1, r3, #19
 8006bac:	6922      	ldr	r2, [r4, #16]
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	d504      	bpl.n	8006bbc <__sflush_r+0x7c>
 8006bb2:	1c42      	adds	r2, r0, #1
 8006bb4:	d101      	bne.n	8006bba <__sflush_r+0x7a>
 8006bb6:	682b      	ldr	r3, [r5, #0]
 8006bb8:	b903      	cbnz	r3, 8006bbc <__sflush_r+0x7c>
 8006bba:	6560      	str	r0, [r4, #84]	; 0x54
 8006bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bbe:	602f      	str	r7, [r5, #0]
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	d0ca      	beq.n	8006b5a <__sflush_r+0x1a>
 8006bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	d002      	beq.n	8006bd2 <__sflush_r+0x92>
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 f9dd 	bl	8006f8c <_free_r>
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bd6:	e7c1      	b.n	8006b5c <__sflush_r+0x1c>
 8006bd8:	6a21      	ldr	r1, [r4, #32]
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b0      	blx	r6
 8006be0:	1c41      	adds	r1, r0, #1
 8006be2:	d1c7      	bne.n	8006b74 <__sflush_r+0x34>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0c4      	beq.n	8006b74 <__sflush_r+0x34>
 8006bea:	2b1d      	cmp	r3, #29
 8006bec:	d001      	beq.n	8006bf2 <__sflush_r+0xb2>
 8006bee:	2b16      	cmp	r3, #22
 8006bf0:	d101      	bne.n	8006bf6 <__sflush_r+0xb6>
 8006bf2:	602f      	str	r7, [r5, #0]
 8006bf4:	e7b1      	b.n	8006b5a <__sflush_r+0x1a>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	e7ad      	b.n	8006b5c <__sflush_r+0x1c>
 8006c00:	690f      	ldr	r7, [r1, #16]
 8006c02:	2f00      	cmp	r7, #0
 8006c04:	d0a9      	beq.n	8006b5a <__sflush_r+0x1a>
 8006c06:	0793      	lsls	r3, r2, #30
 8006c08:	680e      	ldr	r6, [r1, #0]
 8006c0a:	bf08      	it	eq
 8006c0c:	694b      	ldreq	r3, [r1, #20]
 8006c0e:	600f      	str	r7, [r1, #0]
 8006c10:	bf18      	it	ne
 8006c12:	2300      	movne	r3, #0
 8006c14:	eba6 0807 	sub.w	r8, r6, r7
 8006c18:	608b      	str	r3, [r1, #8]
 8006c1a:	f1b8 0f00 	cmp.w	r8, #0
 8006c1e:	dd9c      	ble.n	8006b5a <__sflush_r+0x1a>
 8006c20:	6a21      	ldr	r1, [r4, #32]
 8006c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c24:	4643      	mov	r3, r8
 8006c26:	463a      	mov	r2, r7
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b0      	blx	r6
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	dc06      	bgt.n	8006c3e <__sflush_r+0xfe>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c3c:	e78e      	b.n	8006b5c <__sflush_r+0x1c>
 8006c3e:	4407      	add	r7, r0
 8006c40:	eba8 0800 	sub.w	r8, r8, r0
 8006c44:	e7e9      	b.n	8006c1a <__sflush_r+0xda>
 8006c46:	bf00      	nop
 8006c48:	20400001 	.word	0x20400001

08006c4c <_fflush_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	690b      	ldr	r3, [r1, #16]
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b913      	cbnz	r3, 8006c5c <_fflush_r+0x10>
 8006c56:	2500      	movs	r5, #0
 8006c58:	4628      	mov	r0, r5
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	b118      	cbz	r0, 8006c66 <_fflush_r+0x1a>
 8006c5e:	6983      	ldr	r3, [r0, #24]
 8006c60:	b90b      	cbnz	r3, 8006c66 <_fflush_r+0x1a>
 8006c62:	f000 f887 	bl	8006d74 <__sinit>
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <_fflush_r+0x6c>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	d11b      	bne.n	8006ca4 <_fflush_r+0x58>
 8006c6c:	686c      	ldr	r4, [r5, #4]
 8006c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0ef      	beq.n	8006c56 <_fflush_r+0xa>
 8006c76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c78:	07d0      	lsls	r0, r2, #31
 8006c7a:	d404      	bmi.n	8006c86 <_fflush_r+0x3a>
 8006c7c:	0599      	lsls	r1, r3, #22
 8006c7e:	d402      	bmi.n	8006c86 <_fflush_r+0x3a>
 8006c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c82:	f000 f915 	bl	8006eb0 <__retarget_lock_acquire_recursive>
 8006c86:	4628      	mov	r0, r5
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f7ff ff59 	bl	8006b40 <__sflush_r>
 8006c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c90:	07da      	lsls	r2, r3, #31
 8006c92:	4605      	mov	r5, r0
 8006c94:	d4e0      	bmi.n	8006c58 <_fflush_r+0xc>
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	059b      	lsls	r3, r3, #22
 8006c9a:	d4dd      	bmi.n	8006c58 <_fflush_r+0xc>
 8006c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9e:	f000 f908 	bl	8006eb2 <__retarget_lock_release_recursive>
 8006ca2:	e7d9      	b.n	8006c58 <_fflush_r+0xc>
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <_fflush_r+0x70>)
 8006ca6:	429c      	cmp	r4, r3
 8006ca8:	d101      	bne.n	8006cae <_fflush_r+0x62>
 8006caa:	68ac      	ldr	r4, [r5, #8]
 8006cac:	e7df      	b.n	8006c6e <_fflush_r+0x22>
 8006cae:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <_fflush_r+0x74>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	bf08      	it	eq
 8006cb4:	68ec      	ldreq	r4, [r5, #12]
 8006cb6:	e7da      	b.n	8006c6e <_fflush_r+0x22>
 8006cb8:	080072f0 	.word	0x080072f0
 8006cbc:	08007310 	.word	0x08007310
 8006cc0:	080072d0 	.word	0x080072d0

08006cc4 <std>:
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	4604      	mov	r4, r0
 8006cca:	e9c0 3300 	strd	r3, r3, [r0]
 8006cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cd2:	6083      	str	r3, [r0, #8]
 8006cd4:	8181      	strh	r1, [r0, #12]
 8006cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8006cd8:	81c2      	strh	r2, [r0, #14]
 8006cda:	6183      	str	r3, [r0, #24]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	2208      	movs	r2, #8
 8006ce0:	305c      	adds	r0, #92	; 0x5c
 8006ce2:	f7ff fd29 	bl	8006738 <memset>
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <std+0x38>)
 8006ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <std+0x3c>)
 8006cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <std+0x40>)
 8006cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <std+0x44>)
 8006cf4:	6224      	str	r4, [r4, #32]
 8006cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08007101 	.word	0x08007101
 8006d00:	08007123 	.word	0x08007123
 8006d04:	0800715b 	.word	0x0800715b
 8006d08:	0800717f 	.word	0x0800717f

08006d0c <_cleanup_r>:
 8006d0c:	4901      	ldr	r1, [pc, #4]	; (8006d14 <_cleanup_r+0x8>)
 8006d0e:	f000 b8af 	b.w	8006e70 <_fwalk_reent>
 8006d12:	bf00      	nop
 8006d14:	08006c4d 	.word	0x08006c4d

08006d18 <__sfmoreglue>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	1e4a      	subs	r2, r1, #1
 8006d1c:	2568      	movs	r5, #104	; 0x68
 8006d1e:	4355      	muls	r5, r2
 8006d20:	460e      	mov	r6, r1
 8006d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d26:	f000 f981 	bl	800702c <_malloc_r>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	b140      	cbz	r0, 8006d40 <__sfmoreglue+0x28>
 8006d2e:	2100      	movs	r1, #0
 8006d30:	e9c0 1600 	strd	r1, r6, [r0]
 8006d34:	300c      	adds	r0, #12
 8006d36:	60a0      	str	r0, [r4, #8]
 8006d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d3c:	f7ff fcfc 	bl	8006738 <memset>
 8006d40:	4620      	mov	r0, r4
 8006d42:	bd70      	pop	{r4, r5, r6, pc}

08006d44 <__sfp_lock_acquire>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__sfp_lock_acquire+0x8>)
 8006d46:	f000 b8b3 	b.w	8006eb0 <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	20000b38 	.word	0x20000b38

08006d50 <__sfp_lock_release>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__sfp_lock_release+0x8>)
 8006d52:	f000 b8ae 	b.w	8006eb2 <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000b38 	.word	0x20000b38

08006d5c <__sinit_lock_acquire>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__sinit_lock_acquire+0x8>)
 8006d5e:	f000 b8a7 	b.w	8006eb0 <__retarget_lock_acquire_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000b33 	.word	0x20000b33

08006d68 <__sinit_lock_release>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sinit_lock_release+0x8>)
 8006d6a:	f000 b8a2 	b.w	8006eb2 <__retarget_lock_release_recursive>
 8006d6e:	bf00      	nop
 8006d70:	20000b33 	.word	0x20000b33

08006d74 <__sinit>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	4604      	mov	r4, r0
 8006d78:	f7ff fff0 	bl	8006d5c <__sinit_lock_acquire>
 8006d7c:	69a3      	ldr	r3, [r4, #24]
 8006d7e:	b11b      	cbz	r3, 8006d88 <__sinit+0x14>
 8006d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d84:	f7ff bff0 	b.w	8006d68 <__sinit_lock_release>
 8006d88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d8c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <__sinit+0x68>)
 8006d90:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <__sinit+0x6c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	bf04      	itt	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	61a3      	streq	r3, [r4, #24]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 f820 	bl	8006de4 <__sfp>
 8006da4:	6060      	str	r0, [r4, #4]
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 f81c 	bl	8006de4 <__sfp>
 8006dac:	60a0      	str	r0, [r4, #8]
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f818 	bl	8006de4 <__sfp>
 8006db4:	2200      	movs	r2, #0
 8006db6:	60e0      	str	r0, [r4, #12]
 8006db8:	2104      	movs	r1, #4
 8006dba:	6860      	ldr	r0, [r4, #4]
 8006dbc:	f7ff ff82 	bl	8006cc4 <std>
 8006dc0:	68a0      	ldr	r0, [r4, #8]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	2109      	movs	r1, #9
 8006dc6:	f7ff ff7d 	bl	8006cc4 <std>
 8006dca:	68e0      	ldr	r0, [r4, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	2112      	movs	r1, #18
 8006dd0:	f7ff ff78 	bl	8006cc4 <std>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	61a3      	str	r3, [r4, #24]
 8006dd8:	e7d2      	b.n	8006d80 <__sinit+0xc>
 8006dda:	bf00      	nop
 8006ddc:	080072cc 	.word	0x080072cc
 8006de0:	08006d0d 	.word	0x08006d0d

08006de4 <__sfp>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	4607      	mov	r7, r0
 8006de8:	f7ff ffac 	bl	8006d44 <__sfp_lock_acquire>
 8006dec:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <__sfp+0x84>)
 8006dee:	681e      	ldr	r6, [r3, #0]
 8006df0:	69b3      	ldr	r3, [r6, #24]
 8006df2:	b913      	cbnz	r3, 8006dfa <__sfp+0x16>
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff ffbd 	bl	8006d74 <__sinit>
 8006dfa:	3648      	adds	r6, #72	; 0x48
 8006dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	d503      	bpl.n	8006e0c <__sfp+0x28>
 8006e04:	6833      	ldr	r3, [r6, #0]
 8006e06:	b30b      	cbz	r3, 8006e4c <__sfp+0x68>
 8006e08:	6836      	ldr	r6, [r6, #0]
 8006e0a:	e7f7      	b.n	8006dfc <__sfp+0x18>
 8006e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e10:	b9d5      	cbnz	r5, 8006e48 <__sfp+0x64>
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <__sfp+0x88>)
 8006e14:	60e3      	str	r3, [r4, #12]
 8006e16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e1a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e1c:	f000 f847 	bl	8006eae <__retarget_lock_init_recursive>
 8006e20:	f7ff ff96 	bl	8006d50 <__sfp_lock_release>
 8006e24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e2c:	6025      	str	r5, [r4, #0]
 8006e2e:	61a5      	str	r5, [r4, #24]
 8006e30:	2208      	movs	r2, #8
 8006e32:	4629      	mov	r1, r5
 8006e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e38:	f7ff fc7e 	bl	8006738 <memset>
 8006e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e44:	4620      	mov	r0, r4
 8006e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e48:	3468      	adds	r4, #104	; 0x68
 8006e4a:	e7d9      	b.n	8006e00 <__sfp+0x1c>
 8006e4c:	2104      	movs	r1, #4
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7ff ff62 	bl	8006d18 <__sfmoreglue>
 8006e54:	4604      	mov	r4, r0
 8006e56:	6030      	str	r0, [r6, #0]
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1d5      	bne.n	8006e08 <__sfp+0x24>
 8006e5c:	f7ff ff78 	bl	8006d50 <__sfp_lock_release>
 8006e60:	230c      	movs	r3, #12
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	e7ee      	b.n	8006e44 <__sfp+0x60>
 8006e66:	bf00      	nop
 8006e68:	080072cc 	.word	0x080072cc
 8006e6c:	ffff0001 	.word	0xffff0001

08006e70 <_fwalk_reent>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4606      	mov	r6, r0
 8006e76:	4688      	mov	r8, r1
 8006e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e7c:	2700      	movs	r7, #0
 8006e7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e82:	f1b9 0901 	subs.w	r9, r9, #1
 8006e86:	d505      	bpl.n	8006e94 <_fwalk_reent+0x24>
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d1f7      	bne.n	8006e7e <_fwalk_reent+0xe>
 8006e8e:	4638      	mov	r0, r7
 8006e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e94:	89ab      	ldrh	r3, [r5, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d907      	bls.n	8006eaa <_fwalk_reent+0x3a>
 8006e9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	d003      	beq.n	8006eaa <_fwalk_reent+0x3a>
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	47c0      	blx	r8
 8006ea8:	4307      	orrs	r7, r0
 8006eaa:	3568      	adds	r5, #104	; 0x68
 8006eac:	e7e9      	b.n	8006e82 <_fwalk_reent+0x12>

08006eae <__retarget_lock_init_recursive>:
 8006eae:	4770      	bx	lr

08006eb0 <__retarget_lock_acquire_recursive>:
 8006eb0:	4770      	bx	lr

08006eb2 <__retarget_lock_release_recursive>:
 8006eb2:	4770      	bx	lr

08006eb4 <__swhatbuf_r>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	460e      	mov	r6, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	b096      	sub	sp, #88	; 0x58
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	461d      	mov	r5, r3
 8006ec4:	da07      	bge.n	8006ed6 <__swhatbuf_r+0x22>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	89b3      	ldrh	r3, [r6, #12]
 8006ecc:	061a      	lsls	r2, r3, #24
 8006ece:	d410      	bmi.n	8006ef2 <__swhatbuf_r+0x3e>
 8006ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed4:	e00e      	b.n	8006ef4 <__swhatbuf_r+0x40>
 8006ed6:	466a      	mov	r2, sp
 8006ed8:	f000 f978 	bl	80071cc <_fstat_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	dbf2      	blt.n	8006ec6 <__swhatbuf_r+0x12>
 8006ee0:	9a01      	ldr	r2, [sp, #4]
 8006ee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006eea:	425a      	negs	r2, r3
 8006eec:	415a      	adcs	r2, r3
 8006eee:	602a      	str	r2, [r5, #0]
 8006ef0:	e7ee      	b.n	8006ed0 <__swhatbuf_r+0x1c>
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	b016      	add	sp, #88	; 0x58
 8006efa:	bd70      	pop	{r4, r5, r6, pc}

08006efc <__smakebuf_r>:
 8006efc:	898b      	ldrh	r3, [r1, #12]
 8006efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f00:	079d      	lsls	r5, r3, #30
 8006f02:	4606      	mov	r6, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	d507      	bpl.n	8006f18 <__smakebuf_r+0x1c>
 8006f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	6123      	str	r3, [r4, #16]
 8006f10:	2301      	movs	r3, #1
 8006f12:	6163      	str	r3, [r4, #20]
 8006f14:	b002      	add	sp, #8
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	ab01      	add	r3, sp, #4
 8006f1a:	466a      	mov	r2, sp
 8006f1c:	f7ff ffca 	bl	8006eb4 <__swhatbuf_r>
 8006f20:	9900      	ldr	r1, [sp, #0]
 8006f22:	4605      	mov	r5, r0
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f881 	bl	800702c <_malloc_r>
 8006f2a:	b948      	cbnz	r0, 8006f40 <__smakebuf_r+0x44>
 8006f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f30:	059a      	lsls	r2, r3, #22
 8006f32:	d4ef      	bmi.n	8006f14 <__smakebuf_r+0x18>
 8006f34:	f023 0303 	bic.w	r3, r3, #3
 8006f38:	f043 0302 	orr.w	r3, r3, #2
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	e7e3      	b.n	8006f08 <__smakebuf_r+0xc>
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <__smakebuf_r+0x7c>)
 8006f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	6020      	str	r0, [r4, #0]
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	9b00      	ldr	r3, [sp, #0]
 8006f50:	6163      	str	r3, [r4, #20]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	6120      	str	r0, [r4, #16]
 8006f56:	b15b      	cbz	r3, 8006f70 <__smakebuf_r+0x74>
 8006f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 f947 	bl	80071f0 <_isatty_r>
 8006f62:	b128      	cbz	r0, 8006f70 <__smakebuf_r+0x74>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f023 0303 	bic.w	r3, r3, #3
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	89a0      	ldrh	r0, [r4, #12]
 8006f72:	4305      	orrs	r5, r0
 8006f74:	81a5      	strh	r5, [r4, #12]
 8006f76:	e7cd      	b.n	8006f14 <__smakebuf_r+0x18>
 8006f78:	08006d0d 	.word	0x08006d0d

08006f7c <malloc>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <malloc+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f000 b853 	b.w	800702c <_malloc_r>
 8006f86:	bf00      	nop
 8006f88:	20000024 	.word	0x20000024

08006f8c <_free_r>:
 8006f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d048      	beq.n	8007024 <_free_r+0x98>
 8006f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f96:	9001      	str	r0, [sp, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f9e:	bfb8      	it	lt
 8006fa0:	18e4      	addlt	r4, r4, r3
 8006fa2:	f000 f947 	bl	8007234 <__malloc_lock>
 8006fa6:	4a20      	ldr	r2, [pc, #128]	; (8007028 <_free_r+0x9c>)
 8006fa8:	9801      	ldr	r0, [sp, #4]
 8006faa:	6813      	ldr	r3, [r2, #0]
 8006fac:	4615      	mov	r5, r2
 8006fae:	b933      	cbnz	r3, 8006fbe <_free_r+0x32>
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	6014      	str	r4, [r2, #0]
 8006fb4:	b003      	add	sp, #12
 8006fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fba:	f000 b941 	b.w	8007240 <__malloc_unlock>
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	d90b      	bls.n	8006fda <_free_r+0x4e>
 8006fc2:	6821      	ldr	r1, [r4, #0]
 8006fc4:	1862      	adds	r2, r4, r1
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	bf04      	itt	eq
 8006fca:	681a      	ldreq	r2, [r3, #0]
 8006fcc:	685b      	ldreq	r3, [r3, #4]
 8006fce:	6063      	str	r3, [r4, #4]
 8006fd0:	bf04      	itt	eq
 8006fd2:	1852      	addeq	r2, r2, r1
 8006fd4:	6022      	streq	r2, [r4, #0]
 8006fd6:	602c      	str	r4, [r5, #0]
 8006fd8:	e7ec      	b.n	8006fb4 <_free_r+0x28>
 8006fda:	461a      	mov	r2, r3
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b10b      	cbz	r3, 8006fe4 <_free_r+0x58>
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d9fa      	bls.n	8006fda <_free_r+0x4e>
 8006fe4:	6811      	ldr	r1, [r2, #0]
 8006fe6:	1855      	adds	r5, r2, r1
 8006fe8:	42a5      	cmp	r5, r4
 8006fea:	d10b      	bne.n	8007004 <_free_r+0x78>
 8006fec:	6824      	ldr	r4, [r4, #0]
 8006fee:	4421      	add	r1, r4
 8006ff0:	1854      	adds	r4, r2, r1
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	d1dd      	bne.n	8006fb4 <_free_r+0x28>
 8006ff8:	681c      	ldr	r4, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	6053      	str	r3, [r2, #4]
 8006ffe:	4421      	add	r1, r4
 8007000:	6011      	str	r1, [r2, #0]
 8007002:	e7d7      	b.n	8006fb4 <_free_r+0x28>
 8007004:	d902      	bls.n	800700c <_free_r+0x80>
 8007006:	230c      	movs	r3, #12
 8007008:	6003      	str	r3, [r0, #0]
 800700a:	e7d3      	b.n	8006fb4 <_free_r+0x28>
 800700c:	6825      	ldr	r5, [r4, #0]
 800700e:	1961      	adds	r1, r4, r5
 8007010:	428b      	cmp	r3, r1
 8007012:	bf04      	itt	eq
 8007014:	6819      	ldreq	r1, [r3, #0]
 8007016:	685b      	ldreq	r3, [r3, #4]
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	bf04      	itt	eq
 800701c:	1949      	addeq	r1, r1, r5
 800701e:	6021      	streq	r1, [r4, #0]
 8007020:	6054      	str	r4, [r2, #4]
 8007022:	e7c7      	b.n	8006fb4 <_free_r+0x28>
 8007024:	b003      	add	sp, #12
 8007026:	bd30      	pop	{r4, r5, pc}
 8007028:	200000ac 	.word	0x200000ac

0800702c <_malloc_r>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	1ccd      	adds	r5, r1, #3
 8007030:	f025 0503 	bic.w	r5, r5, #3
 8007034:	3508      	adds	r5, #8
 8007036:	2d0c      	cmp	r5, #12
 8007038:	bf38      	it	cc
 800703a:	250c      	movcc	r5, #12
 800703c:	2d00      	cmp	r5, #0
 800703e:	4606      	mov	r6, r0
 8007040:	db01      	blt.n	8007046 <_malloc_r+0x1a>
 8007042:	42a9      	cmp	r1, r5
 8007044:	d903      	bls.n	800704e <_malloc_r+0x22>
 8007046:	230c      	movs	r3, #12
 8007048:	6033      	str	r3, [r6, #0]
 800704a:	2000      	movs	r0, #0
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704e:	f000 f8f1 	bl	8007234 <__malloc_lock>
 8007052:	4921      	ldr	r1, [pc, #132]	; (80070d8 <_malloc_r+0xac>)
 8007054:	680a      	ldr	r2, [r1, #0]
 8007056:	4614      	mov	r4, r2
 8007058:	b99c      	cbnz	r4, 8007082 <_malloc_r+0x56>
 800705a:	4f20      	ldr	r7, [pc, #128]	; (80070dc <_malloc_r+0xb0>)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	b923      	cbnz	r3, 800706a <_malloc_r+0x3e>
 8007060:	4621      	mov	r1, r4
 8007062:	4630      	mov	r0, r6
 8007064:	f000 f83c 	bl	80070e0 <_sbrk_r>
 8007068:	6038      	str	r0, [r7, #0]
 800706a:	4629      	mov	r1, r5
 800706c:	4630      	mov	r0, r6
 800706e:	f000 f837 	bl	80070e0 <_sbrk_r>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d123      	bne.n	80070be <_malloc_r+0x92>
 8007076:	230c      	movs	r3, #12
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	4630      	mov	r0, r6
 800707c:	f000 f8e0 	bl	8007240 <__malloc_unlock>
 8007080:	e7e3      	b.n	800704a <_malloc_r+0x1e>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	1b5b      	subs	r3, r3, r5
 8007086:	d417      	bmi.n	80070b8 <_malloc_r+0x8c>
 8007088:	2b0b      	cmp	r3, #11
 800708a:	d903      	bls.n	8007094 <_malloc_r+0x68>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	441c      	add	r4, r3
 8007090:	6025      	str	r5, [r4, #0]
 8007092:	e004      	b.n	800709e <_malloc_r+0x72>
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	42a2      	cmp	r2, r4
 8007098:	bf0c      	ite	eq
 800709a:	600b      	streq	r3, [r1, #0]
 800709c:	6053      	strne	r3, [r2, #4]
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f8ce 	bl	8007240 <__malloc_unlock>
 80070a4:	f104 000b 	add.w	r0, r4, #11
 80070a8:	1d23      	adds	r3, r4, #4
 80070aa:	f020 0007 	bic.w	r0, r0, #7
 80070ae:	1ac2      	subs	r2, r0, r3
 80070b0:	d0cc      	beq.n	800704c <_malloc_r+0x20>
 80070b2:	1a1b      	subs	r3, r3, r0
 80070b4:	50a3      	str	r3, [r4, r2]
 80070b6:	e7c9      	b.n	800704c <_malloc_r+0x20>
 80070b8:	4622      	mov	r2, r4
 80070ba:	6864      	ldr	r4, [r4, #4]
 80070bc:	e7cc      	b.n	8007058 <_malloc_r+0x2c>
 80070be:	1cc4      	adds	r4, r0, #3
 80070c0:	f024 0403 	bic.w	r4, r4, #3
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d0e3      	beq.n	8007090 <_malloc_r+0x64>
 80070c8:	1a21      	subs	r1, r4, r0
 80070ca:	4630      	mov	r0, r6
 80070cc:	f000 f808 	bl	80070e0 <_sbrk_r>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1dd      	bne.n	8007090 <_malloc_r+0x64>
 80070d4:	e7cf      	b.n	8007076 <_malloc_r+0x4a>
 80070d6:	bf00      	nop
 80070d8:	200000ac 	.word	0x200000ac
 80070dc:	200000b0 	.word	0x200000b0

080070e0 <_sbrk_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	; (80070fc <_sbrk_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7f9 ffdc 	bl	80010a8 <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_sbrk_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_sbrk_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20000b3c 	.word	0x20000b3c

08007100 <__sread>:
 8007100:	b510      	push	{r4, lr}
 8007102:	460c      	mov	r4, r1
 8007104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007108:	f000 f8a0 	bl	800724c <_read_r>
 800710c:	2800      	cmp	r0, #0
 800710e:	bfab      	itete	ge
 8007110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007112:	89a3      	ldrhlt	r3, [r4, #12]
 8007114:	181b      	addge	r3, r3, r0
 8007116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800711a:	bfac      	ite	ge
 800711c:	6563      	strge	r3, [r4, #84]	; 0x54
 800711e:	81a3      	strhlt	r3, [r4, #12]
 8007120:	bd10      	pop	{r4, pc}

08007122 <__swrite>:
 8007122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007126:	461f      	mov	r7, r3
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	05db      	lsls	r3, r3, #23
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	4616      	mov	r6, r2
 8007132:	d505      	bpl.n	8007140 <__swrite+0x1e>
 8007134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007138:	2302      	movs	r3, #2
 800713a:	2200      	movs	r2, #0
 800713c:	f000 f868 	bl	8007210 <_lseek_r>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	4632      	mov	r2, r6
 800714e:	463b      	mov	r3, r7
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007156:	f000 b817 	b.w	8007188 <_write_r>

0800715a <__sseek>:
 800715a:	b510      	push	{r4, lr}
 800715c:	460c      	mov	r4, r1
 800715e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007162:	f000 f855 	bl	8007210 <_lseek_r>
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	bf15      	itete	ne
 800716c:	6560      	strne	r0, [r4, #84]	; 0x54
 800716e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007176:	81a3      	strheq	r3, [r4, #12]
 8007178:	bf18      	it	ne
 800717a:	81a3      	strhne	r3, [r4, #12]
 800717c:	bd10      	pop	{r4, pc}

0800717e <__sclose>:
 800717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007182:	f000 b813 	b.w	80071ac <_close_r>
	...

08007188 <_write_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	; (80071a8 <_write_r+0x20>)
 800718c:	4604      	mov	r4, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	2200      	movs	r2, #0
 8007194:	602a      	str	r2, [r5, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f7f9 fc6a 	bl	8000a70 <_write>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_write_r+0x1e>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_write_r+0x1e>
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20000b3c 	.word	0x20000b3c

080071ac <_close_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d06      	ldr	r5, [pc, #24]	; (80071c8 <_close_r+0x1c>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	602b      	str	r3, [r5, #0]
 80071b8:	f7f9 fc86 	bl	8000ac8 <_close>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_close_r+0x1a>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_close_r+0x1a>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	20000b3c 	.word	0x20000b3c

080071cc <_fstat_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d07      	ldr	r5, [pc, #28]	; (80071ec <_fstat_r+0x20>)
 80071d0:	2300      	movs	r3, #0
 80071d2:	4604      	mov	r4, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	4611      	mov	r1, r2
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	f7f9 fcc5 	bl	8000b68 <_fstat>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d102      	bne.n	80071e8 <_fstat_r+0x1c>
 80071e2:	682b      	ldr	r3, [r5, #0]
 80071e4:	b103      	cbz	r3, 80071e8 <_fstat_r+0x1c>
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop
 80071ec:	20000b3c 	.word	0x20000b3c

080071f0 <_isatty_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d06      	ldr	r5, [pc, #24]	; (800720c <_isatty_r+0x1c>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	f7f9 fc22 	bl	8000a44 <_isatty>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_isatty_r+0x1a>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_isatty_r+0x1a>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20000b3c 	.word	0x20000b3c

08007210 <_lseek_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	; (8007230 <_lseek_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7f9 fc69 	bl	8000af6 <_lseek>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_lseek_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_lseek_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000b3c 	.word	0x20000b3c

08007234 <__malloc_lock>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__malloc_lock+0x8>)
 8007236:	f7ff be3b 	b.w	8006eb0 <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	20000b34 	.word	0x20000b34

08007240 <__malloc_unlock>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__malloc_unlock+0x8>)
 8007242:	f7ff be36 	b.w	8006eb2 <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	20000b34 	.word	0x20000b34

0800724c <_read_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d07      	ldr	r5, [pc, #28]	; (800726c <_read_r+0x20>)
 8007250:	4604      	mov	r4, r0
 8007252:	4608      	mov	r0, r1
 8007254:	4611      	mov	r1, r2
 8007256:	2200      	movs	r2, #0
 8007258:	602a      	str	r2, [r5, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	f7f9 fc5c 	bl	8000b18 <_read>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_read_r+0x1e>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_read_r+0x1e>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	20000b3c 	.word	0x20000b3c

08007270 <_init>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr

0800727c <_fini>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr
