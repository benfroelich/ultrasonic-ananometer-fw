
sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003688  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003848  08003848  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003848  08003848  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003848  08003848  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000084  080038d4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080038d4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a783  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fd  00000000  00000000  0002a837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0002c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0002c768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a01e  00000000  00000000  0002ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b5e  00000000  00000000  00046e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009851a  00000000  00000000  0005098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000e8efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037f8 	.word	0x080037f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080037f8 	.word	0x080037f8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fac0 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f854 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80001d4:	f000 f8c4 	bl	8000360 <MX_DMA_Init>
  MX_GPIO_Init();
 80001d8:	f000 f8e8 	bl	80003ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f890 	bl	8000300 <MX_USART2_UART_Init>
  HAL_UART_Receive(&huart2, aRxBuffer, 10, 0xffff);
#endif
  /* USER CODE END WHILE */
	  /*##-1- Start the transmission process #####################################*/
	  /* User start transmission data through "TxBuffer" buffer */
	  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 80001e0:	225d      	movs	r2, #93	; 0x5d
 80001e2:	4922      	ldr	r1, [pc, #136]	; (800026c <main+0xa4>)
 80001e4:	4822      	ldr	r0, [pc, #136]	; (8000270 <main+0xa8>)
 80001e6:	f002 f94f 	bl	8002488 <HAL_UART_Transmit_DMA>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d01d      	beq.n	800022c <main+0x64>
	  {
	    /* Transfer error in transmission process */
	    Error_Handler();
 80001f0:	f000 f962 	bl	80004b8 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (aRxBuffer[0] != 'Q')
 80001f4:	e01a      	b.n	800022c <main+0x64>
  {
	  // read a byte
	  if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 80001f6:	2201      	movs	r2, #1
 80001f8:	491e      	ldr	r1, [pc, #120]	; (8000274 <main+0xac>)
 80001fa:	481d      	ldr	r0, [pc, #116]	; (8000270 <main+0xa8>)
 80001fc:	f002 f9d4 	bl	80025a8 <HAL_UART_Receive_DMA>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <main+0x42>
	  {
	    /* Transfer error in reception process */
	    Error_Handler();
 8000206:	f000 f957 	bl	80004b8 <Error_Handler>
	  }

	  /*##-3- Wait for the end of the transfer ###################################*/
	  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY)
 800020a:	bf00      	nop
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <main+0xa8>)
 800020e:	f002 fd17 	bl	8002c40 <HAL_UART_GetState>
 8000212:	4603      	mov	r3, r0
 8000214:	2b20      	cmp	r3, #32
 8000216:	d1f9      	bne.n	800020c <main+0x44>
	  {
	  }

	  /*##-4- Send the received Buffer ###########################################*/
	  if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 8000218:	2201      	movs	r2, #1
 800021a:	4916      	ldr	r1, [pc, #88]	; (8000274 <main+0xac>)
 800021c:	4814      	ldr	r0, [pc, #80]	; (8000270 <main+0xa8>)
 800021e:	f002 f933 	bl	8002488 <HAL_UART_Transmit_DMA>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <main+0x64>
	  {
	    /* Transfer error in transmission process */
	    Error_Handler();
 8000228:	f000 f946 	bl	80004b8 <Error_Handler>
  while (aRxBuffer[0] != 'Q')
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <main+0xac>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b51      	cmp	r3, #81	; 0x51
 8000232:	d1e0      	bne.n	80001f6 <main+0x2e>
	  state of the peripheral; if it's busy you need to wait for the end of current
	  transfer before starting a new one.
	  For simplicity reasons, this example is just waiting till the end of the
	  transfer, but application may perform other tasks while transfer operation
	  is ongoing. */
  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY)
 8000234:	bf00      	nop
 8000236:	480e      	ldr	r0, [pc, #56]	; (8000270 <main+0xa8>)
 8000238:	f002 fd02 	bl	8002c40 <HAL_UART_GetState>
 800023c:	4603      	mov	r3, r0
 800023e:	2b20      	cmp	r3, #32
 8000240:	d1f9      	bne.n	8000236 <main+0x6e>
  {
  }

  /*##-6- Send the End Message ###############################################*/
  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxEndMessage, TXENDMESSAGESIZE)!= HAL_OK)
 8000242:	2215      	movs	r2, #21
 8000244:	490c      	ldr	r1, [pc, #48]	; (8000278 <main+0xb0>)
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <main+0xa8>)
 8000248:	f002 f91e 	bl	8002488 <HAL_UART_Transmit_DMA>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <main+0x8e>
  {
	/* Transfer error in transmission process */
	Error_Handler();
 8000252:	f000 f931 	bl	80004b8 <Error_Handler>
  }

  /*##-7- Wait for the end of the transfer ###################################*/
  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY)
 8000256:	bf00      	nop
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <main+0xa8>)
 800025a:	f002 fcf1 	bl	8002c40 <HAL_UART_GetState>
 800025e:	4603      	mov	r3, r0
 8000260:	2b20      	cmp	r3, #32
 8000262:	d1f9      	bne.n	8000258 <main+0x90>
 8000264:	2300      	movs	r3, #0
  {
  }
  /* USER CODE END 3 */
}
 8000266:	4618      	mov	r0, r3
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000000 	.word	0x20000000
 8000270:	20000134 	.word	0x20000134
 8000274:	20000128 	.word	0x20000128
 8000278:	20000060 	.word	0x20000060

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 faac 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 ff57 	bl	8001170 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c8:	f000 f8f6 	bl	80004b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fe4a 	bl	8001f80 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002f2:	f000 f8e1 	bl	80004b8 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	; 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000306:	4a15      	ldr	r2, [pc, #84]	; (800035c <MX_USART2_UART_Init+0x5c>)
 8000308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800030c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000344:	f002 f852 	bl	80023ec <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034e:	f000 f8b3 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000134 	.word	0x20000134
 800035c:	40004400 	.word	0x40004400

08000360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_DMA_Init+0x48>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <MX_DMA_Init+0x48>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MX_DMA_Init+0x48>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	2010      	movs	r0, #16
 8000384:	f000 fb25 	bl	80009d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000388:	2010      	movs	r0, #16
 800038a:	f000 fb3e 	bl	8000a0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	2011      	movs	r0, #17
 8000394:	f000 fb1d 	bl	80009d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000398:	2011      	movs	r0, #17
 800039a:	f000 fb36 	bl	8000a0a <HAL_NVIC_EnableIRQ>

}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	; 0x28
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a2a      	ldr	r2, [pc, #168]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b28      	ldr	r3, [pc, #160]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a24      	ldr	r2, [pc, #144]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <MX_GPIO_Init+0xc4>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <MX_GPIO_Init+0xc4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_GPIO_Init+0xc4>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a18      	ldr	r2, [pc, #96]	; (8000470 <MX_GPIO_Init+0xc4>)
 8000410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_GPIO_Init+0xc4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	4812      	ldr	r0, [pc, #72]	; (8000474 <MX_GPIO_Init+0xc8>)
 800042a:	f000 fe89 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000434:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	480c      	ldr	r0, [pc, #48]	; (8000478 <MX_GPIO_Init+0xcc>)
 8000446:	f000 fd09 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800044a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	4619      	mov	r1, r3
 8000462:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0xc8>)
 8000464:	f000 fcfa 	bl	8000e5c <HAL_GPIO_Init>

}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	; 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	48000400 	.word	0x48000400
 8000478:	48000800 	.word	0x48000800

0800047c <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004fa:	2007      	movs	r0, #7
 80004fc:	f000 fa5e 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a41      	ldr	r2, [pc, #260]	; (8000630 <HAL_UART_MspInit+0x124>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d17c      	bne.n	8000628 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <HAL_UART_MspInit+0x128>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a40      	ldr	r2, [pc, #256]	; (8000634 <HAL_UART_MspInit+0x128>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b3e      	ldr	r3, [pc, #248]	; (8000634 <HAL_UART_MspInit+0x128>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <HAL_UART_MspInit+0x128>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a3a      	ldr	r2, [pc, #232]	; (8000634 <HAL_UART_MspInit+0x128>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <HAL_UART_MspInit+0x128>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800055e:	230c      	movs	r3, #12
 8000560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800056e:	2307      	movs	r3, #7
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f000 fc6e 	bl	8000e5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <HAL_UART_MspInit+0x12c>)
 8000582:	4a2e      	ldr	r2, [pc, #184]	; (800063c <HAL_UART_MspInit+0x130>)
 8000584:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <HAL_UART_MspInit+0x12c>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <HAL_UART_MspInit+0x12c>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <HAL_UART_MspInit+0x12c>)
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <HAL_UART_MspInit+0x12c>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <HAL_UART_MspInit+0x12c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <HAL_UART_MspInit+0x12c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <HAL_UART_MspInit+0x12c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005b0:	4821      	ldr	r0, [pc, #132]	; (8000638 <HAL_UART_MspInit+0x12c>)
 80005b2:	f000 fa44 	bl	8000a3e <HAL_DMA_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80005bc:	f7ff ff7c 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <HAL_UART_MspInit+0x12c>)
 80005c4:	671a      	str	r2, [r3, #112]	; 0x70
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <HAL_UART_MspInit+0x12c>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005ce:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <HAL_UART_MspInit+0x138>)
 80005d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005d4:	2210      	movs	r2, #16
 80005d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <HAL_UART_MspInit+0x134>)
 80005fe:	f000 fa1e 	bl	8000a3e <HAL_DMA_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000608:	f7ff ff56 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <HAL_UART_MspInit+0x134>)
 8000610:	66da      	str	r2, [r3, #108]	; 0x6c
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <HAL_UART_MspInit+0x134>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2026      	movs	r0, #38	; 0x26
 800061e:	f000 f9d8 	bl	80009d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000622:	2026      	movs	r0, #38	; 0x26
 8000624:	f000 f9f1 	bl	8000a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004400 	.word	0x40004400
 8000634:	40021000 	.word	0x40021000
 8000638:	200000a0 	.word	0x200000a0
 800063c:	4002006c 	.word	0x4002006c
 8000640:	200000e4 	.word	0x200000e4
 8000644:	40020080 	.word	0x40020080

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f8a2 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <DMA1_Channel6_IRQHandler+0x10>)
 80006a2:	f000 fae9 	bl	8000c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000a0 	.word	0x200000a0

080006b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <DMA1_Channel7_IRQHandler+0x10>)
 80006b6:	f000 fadf 	bl	8000c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000e4 	.word	0x200000e4

080006c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <USART2_IRQHandler+0x10>)
 80006ca:	f001 ffbb 	bl	8002644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000134 	.word	0x20000134

080006d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <SystemInit+0x20>)
 80006de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <SystemInit+0x20>)
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490e      	ldr	r1, [pc, #56]	; (800073c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0b      	ldr	r4, [pc, #44]	; (8000748 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000726:	f7ff ffd7 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072a:	f003 f839 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072e:	f7ff fd4b 	bl	80001c8 <main>

08000732 <LoopForever>:

LoopForever:
    b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000734:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000740:	08003850 	.word	0x08003850
  ldr r2, =_sbss
 8000744:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000748:	200001bc 	.word	0x200001bc

0800074c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_IRQHandler>
	...

08000750 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f92b 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff feaa 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f943 	bl	8000a26 <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b8:	f000 f90b 	bl	80009d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000078 	.word	0x20000078
 80007d4:	20000080 	.word	0x20000080
 80007d8:	2000007c 	.word	0x2000007c

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000080 	.word	0x20000080
 8000800:	200001b8 	.word	0x200001b8

08000804 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;  
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	200001b8 	.word	0x200001b8

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	f7ff ff8e 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff29 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff3e 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff8e 	bl	8000910 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff31 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffa2 	bl	8000978 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e037      	b.n	8000ac4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2202      	movs	r2, #2
 8000a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f9b8 	bl	8000e1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}  
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d101      	bne.n	8000aec <HAL_DMA_Start_IT+0x20>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	e04a      	b.n	8000b82 <HAL_DMA_Start_IT+0xb6>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2201      	movs	r2, #1
 8000af0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d13a      	bne.n	8000b74 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2202      	movs	r2, #2
 8000b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 0201 	bic.w	r2, r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f000 f94b 	bl	8000dbe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d008      	beq.n	8000b42 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 020e 	orr.w	r2, r2, #14
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e00f      	b.n	8000b62 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 020a 	orr.w	r2, r2, #10
 8000b50:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0204 	bic.w	r2, r2, #4
 8000b60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 0201 	orr.w	r2, r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e005      	b.n	8000b80 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d008      	beq.n	8000bae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e020      	b.n	8000bf0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 020e 	bic.w	r2, r2, #14
 8000bbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0201 	bic.w	r2, r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d005      	beq.n	8000c1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e027      	b.n	8000c6e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 020e 	bic.w	r2, r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	4798      	blx	r3
    } 
  }
  return status;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	2204      	movs	r2, #4
 8000c96:	409a      	lsls	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d024      	beq.n	8000cea <HAL_DMA_IRQHandler+0x72>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01f      	beq.n	8000cea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0204 	bic.w	r2, r2, #4
 8000cc6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d06a      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ce8:	e065      	b.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	2202      	movs	r2, #2
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d02c      	beq.n	8000d54 <HAL_DMA_IRQHandler+0xdc>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d027      	beq.n	8000d54 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10b      	bne.n	8000d2a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 020a 	bic.w	r2, r2, #10
 8000d20:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d32:	2102      	movs	r1, #2
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d035      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d52:	e030      	b.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	2208      	movs	r2, #8
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d028      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d023      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 020e 	bic.w	r2, r2, #14
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d004      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	4798      	blx	r3
    }
  }
}  
 8000db4:	e7ff      	b.n	8000db6 <HAL_DMA_IRQHandler+0x13e>
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b10      	cmp	r3, #16
 8000dea:	d108      	bne.n	8000dfe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000dfc:	e007      	b.n	8000e0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	60da      	str	r2, [r3, #12]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <DMA_CalcBaseAndBitshift+0x34>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <DMA_CalcBaseAndBitshift+0x38>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	009a      	lsls	r2, r3, #2
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <DMA_CalcBaseAndBitshift+0x3c>)
 8000e40:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	bffdfff8 	.word	0xbffdfff8
 8000e54:	cccccccd 	.word	0xcccccccd
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e14e      	b.n	800110a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8140 	beq.w	8001104 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d005      	beq.n	8000e9c <HAL_GPIO_Init+0x40>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d130      	bne.n	8000efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	f003 0201 	and.w	r2, r3, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d017      	beq.n	8000f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d123      	bne.n	8000f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	6939      	ldr	r1, [r7, #16]
 8000f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0203 	and.w	r2, r3, #3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 809a 	beq.w	8001104 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd0:	4b55      	ldr	r3, [pc, #340]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x2cc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe8:	4a50      	ldr	r2, [pc, #320]	; (800112c <HAL_GPIO_Init+0x2d0>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001012:	d013      	beq.n	800103c <HAL_GPIO_Init+0x1e0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a46      	ldr	r2, [pc, #280]	; (8001130 <HAL_GPIO_Init+0x2d4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00d      	beq.n	8001038 <HAL_GPIO_Init+0x1dc>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a45      	ldr	r2, [pc, #276]	; (8001134 <HAL_GPIO_Init+0x2d8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x1d8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a44      	ldr	r2, [pc, #272]	; (8001138 <HAL_GPIO_Init+0x2dc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d101      	bne.n	8001030 <HAL_GPIO_Init+0x1d4>
 800102c:	2303      	movs	r3, #3
 800102e:	e006      	b.n	800103e <HAL_GPIO_Init+0x1e2>
 8001030:	2305      	movs	r3, #5
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x1e2>
 8001034:	2302      	movs	r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x1e2>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x1e2>
 800103c:	2300      	movs	r3, #0
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104e:	4937      	ldr	r1, [pc, #220]	; (800112c <HAL_GPIO_Init+0x2d0>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_GPIO_Init+0x2e0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001080:	4a2e      	ldr	r2, [pc, #184]	; (800113c <HAL_GPIO_Init+0x2e0>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_GPIO_Init+0x2e0>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010aa:	4a24      	ldr	r2, [pc, #144]	; (800113c <HAL_GPIO_Init+0x2e0>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_GPIO_Init+0x2e0>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_GPIO_Init+0x2e0>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_GPIO_Init+0x2e0>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_GPIO_Init+0x2e0>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	f47f aea9 	bne.w	8000e6c <HAL_GPIO_Init+0x10>
  }
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800
 8001138:	48000c00 	.word	0x48000c00
 800113c:	40010400 	.word	0x40010400

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800115c:	e002      	b.n	8001164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001176:	af00      	add	r7, sp, #0
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	f000 bef4 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 816a 	beq.w	800146e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800119a:	4bb3      	ldr	r3, [pc, #716]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d00c      	beq.n	80011c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a6:	4bb0      	ldr	r3, [pc, #704]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d159      	bne.n	8001266 <HAL_RCC_OscConfig+0xf6>
 80011b2:	4bad      	ldr	r3, [pc, #692]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d152      	bne.n	8001266 <HAL_RCC_OscConfig+0xf6>
 80011c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d102      	bne.n	80011f2 <HAL_RCC_OscConfig+0x82>
 80011ec:	4b9e      	ldr	r3, [pc, #632]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0xae>
 80011f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800120e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800121a:	4b93      	ldr	r3, [pc, #588]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001226:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800122a:	fa92 f2a2 	rbit	r2, r2
 800122e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001232:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001236:	fab2 f282 	clz	r2, r2
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	f042 0220 	orr.w	r2, r2, #32
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 810c 	beq.w	800146c <HAL_RCC_OscConfig+0x2fc>
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 8106 	bne.w	800146c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f000 be86 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x110>
 8001272:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a7c      	ldr	r2, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e030      	b.n	80012e2 <HAL_RCC_OscConfig+0x172>
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x134>
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a76      	ldr	r2, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a73      	ldr	r2, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01e      	b.n	80012e2 <HAL_RCC_OscConfig+0x172>
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x15a>
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a69      	ldr	r2, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x172>
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b64      	ldr	r3, [pc, #400]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f023 020f 	bic.w	r2, r3, #15
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	495d      	ldr	r1, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d059      	beq.n	80013b4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fa80 	bl	8000804 <HAL_GetTick>
 8001304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130a:	f7ff fa7b 	bl	8000804 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d902      	bls.n	8001320 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	f000 be29 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>
 8001320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001324:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800132c:	fa93 f3a3 	rbit	r3, r3
 8001330:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001334:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d102      	bne.n	8001352 <HAL_RCC_OscConfig+0x1e2>
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x20e>
 8001352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001356:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800136e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001382:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001386:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800138a:	fa92 f2a2 	rbit	r2, r2
 800138e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001392:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f002 021f 	and.w	r2, r2, #31
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ab      	beq.n	800130a <HAL_RCC_OscConfig+0x19a>
 80013b2:	e05c      	b.n	800146e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fa26 	bl	8000804 <HAL_GetTick>
 80013b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013be:	f7ff fa21 	bl	8000804 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d902      	bls.n	80013d4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f000 bdcf 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>
 80013d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d102      	bne.n	8001406 <HAL_RCC_OscConfig+0x296>
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x2c2>
 8001406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800141a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001422:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_RCC_OscConfig+0x2f8>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001436:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800143a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800143e:	fa92 f2a2 	rbit	r2, r2
 8001442:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001446:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800144a:	fab2 f282 	clz	r2, r2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f002 021f 	and.w	r2, r2, #31
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ab      	bne.n	80013be <HAL_RCC_OscConfig+0x24e>
 8001466:	e002      	b.n	800146e <HAL_RCC_OscConfig+0x2fe>
 8001468:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 816f 	beq.w	800175c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800147e:	4bd0      	ldr	r3, [pc, #832]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800148a:	4bcd      	ldr	r3, [pc, #820]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d16c      	bne.n	8001570 <HAL_RCC_OscConfig+0x400>
 8001496:	4bca      	ldr	r3, [pc, #808]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d166      	bne.n	8001570 <HAL_RCC_OscConfig+0x400>
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_RCC_OscConfig+0x362>
 80014cc:	4bbc      	ldr	r3, [pc, #752]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e013      	b.n	80014fa <HAL_RCC_OscConfig+0x38a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014f6:	4bb2      	ldr	r3, [pc, #712]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	2202      	movs	r2, #2
 80014fc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001500:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001504:	fa92 f2a2 	rbit	r2, r2
 8001508:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800150c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001510:	fab2 f282 	clz	r2, r2
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f002 021f 	and.w	r2, r2, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_RCC_OscConfig+0x3cc>
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d002      	beq.n	800153c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f000 bd1b 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4ba0      	ldr	r3, [pc, #640]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	21f8      	movs	r1, #248	; 0xf8
 800154c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001554:	fa91 f1a1 	rbit	r1, r1
 8001558:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800155c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001560:	fab1 f181 	clz	r1, r1
 8001564:	b2c9      	uxtb	r1, r1
 8001566:	408b      	lsls	r3, r1
 8001568:	4995      	ldr	r1, [pc, #596]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e0f5      	b.n	800175c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8085 	beq.w	8001686 <HAL_RCC_OscConfig+0x516>
 800157c:	2301      	movs	r3, #1
 800157e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800158e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800159c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	461a      	mov	r2, r3
 80015a4:	2301      	movs	r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f92c 	bl	8000804 <HAL_GetTick>
 80015ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff f927 	bl	8000804 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d902      	bls.n	80015c8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f000 bcd5 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x488>
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	e013      	b.n	8001620 <HAL_RCC_OscConfig+0x4b0>
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001610:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	2202      	movs	r2, #2
 8001622:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001626:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001632:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001636:	fab2 f282 	clz	r2, r2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0af      	beq.n	80015b2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	21f8      	movs	r1, #248	; 0xf8
 8001662:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800166a:	fa91 f1a1 	rbit	r1, r1
 800166e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001672:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001676:	fab1 f181 	clz	r1, r1
 800167a:	b2c9      	uxtb	r1, r1
 800167c:	408b      	lsls	r3, r1
 800167e:	4950      	ldr	r1, [pc, #320]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e06a      	b.n	800175c <HAL_RCC_OscConfig+0x5ec>
 8001686:	2301      	movs	r3, #1
 8001688:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001698:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	461a      	mov	r2, r3
 80016ae:	2300      	movs	r3, #0
 80016b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f8a7 	bl	8000804 <HAL_GetTick>
 80016b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff f8a2 	bl	8000804 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d902      	bls.n	80016d2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f000 bc50 	b.w	8001f72 <HAL_RCC_OscConfig+0xe02>
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x592>
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0x5ba>
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800171a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x650>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2202      	movs	r2, #2
 800172c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001730:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001734:	fa92 f2a2 	rbit	r2, r2
 8001738:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800173c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1af      	bne.n	80016bc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80da 	beq.w	8001920 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d069      	beq.n	800184a <HAL_RCC_OscConfig+0x6da>
 8001776:	2301      	movs	r3, #1
 8001778:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_OscConfig+0x654>)
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	461a      	mov	r2, r3
 800179c:	2301      	movs	r3, #1
 800179e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff f830 	bl	8000804 <HAL_GetTick>
 80017a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a8:	e00e      	b.n	80017c8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff f82b 	bl	8000804 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d906      	bls.n	80017c8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e3d9      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	10908120 	.word	0x10908120
 80017c8:	2302      	movs	r3, #2
 80017ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f2a3 	rbit	r2, r3
 80017ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001808:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4ba5      	ldr	r3, [pc, #660]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001812:	2102      	movs	r1, #2
 8001814:	6019      	str	r1, [r3, #0]
 8001816:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f1a3 	rbit	r1, r3
 8001820:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001824:	6019      	str	r1, [r3, #0]
  return result;
 8001826:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0b0      	beq.n	80017aa <HAL_RCC_OscConfig+0x63a>
 8001848:	e06a      	b.n	8001920 <HAL_RCC_OscConfig+0x7b0>
 800184a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001860:	601a      	str	r2, [r3, #0]
  return result;
 8001862:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001866:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <HAL_RCC_OscConfig+0x934>)
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	461a      	mov	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7fe ffc2 	bl	8000804 <HAL_GetTick>
 8001880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	e009      	b.n	800189a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001886:	f7fe ffbd 	bl	8000804 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e36b      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 800189a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80018e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ea:	2102      	movs	r1, #2
 80018ec:	6019      	str	r1, [r3, #0]
 80018ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f1a3 	rbit	r1, r3
 80018f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018fc:	6019      	str	r1, [r3, #0]
  return result;
 80018fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1b2      	bne.n	8001886 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8158 	beq.w	8001be0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d112      	bne.n	8001968 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a56      	ldr	r2, [pc, #344]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <HAL_RCC_OscConfig+0x938>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11a      	bne.n	80019aa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x938>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_RCC_OscConfig+0x938>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001980:	f7fe ff40 	bl	8000804 <HAL_GetTick>
 8001984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e009      	b.n	800199e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7fe ff3b 	bl	8000804 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2e9      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_RCC_OscConfig+0x938>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ef      	beq.n	800198a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x852>
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a39      	ldr	r2, [pc, #228]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e02f      	b.n	8001a22 <HAL_RCC_OscConfig+0x8b2>
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x876>
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a33      	ldr	r2, [pc, #204]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e01d      	b.n	8001a22 <HAL_RCC_OscConfig+0x8b2>
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x89a>
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x8b2>
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d06b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7fe feea 	bl	8000804 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00b      	b.n	8001a4e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7fe fee5 	bl	8000804 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e291      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 8001a4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a7c:	601a      	str	r2, [r3, #0]
  return result;
 8001a7e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x93c>
 8001a98:	4b01      	ldr	r3, [pc, #4]	; (8001aa0 <HAL_RCC_OscConfig+0x930>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x958>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	10908120 	.word	0x10908120
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4bbb      	ldr	r3, [pc, #748]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001acc:	2102      	movs	r1, #2
 8001ace:	6011      	str	r1, [r2, #0]
 8001ad0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	fa92 f1a2 	rbit	r1, r2
 8001ada:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ade:	6011      	str	r1, [r2, #0]
  return result;
 8001ae0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	fab2 f282 	clz	r2, r2
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f002 021f 	and.w	r2, r2, #31
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d099      	beq.n	8001a36 <HAL_RCC_OscConfig+0x8c6>
 8001b02:	e063      	b.n	8001bcc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7fe fe7e 	bl	8000804 <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00b      	b.n	8001b26 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7fe fe79 	bl	8000804 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e225      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 8001b26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b54:	601a      	str	r2, [r3, #0]
  return result;
 8001b56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_OscConfig+0xa06>
 8001b70:	4b90      	ldr	r3, [pc, #576]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	e00d      	b.n	8001b92 <HAL_RCC_OscConfig+0xa22>
 8001b76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b96:	2102      	movs	r1, #2
 8001b98:	6011      	str	r1, [r2, #0]
 8001b9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	fa92 f1a2 	rbit	r1, r2
 8001ba4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ba8:	6011      	str	r1, [r2, #0]
  return result;
 8001baa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f002 021f 	and.w	r2, r2, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1a0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bcc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b77      	ldr	r3, [pc, #476]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a76      	ldr	r2, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 81c2 	beq.w	8001f70 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	f000 819c 	beq.w	8001f32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f040 8114 	bne.w	8001e2e <HAL_RCC_OscConfig+0xcbe>
 8001c06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c1e:	601a      	str	r2, [r3, #0]
  return result;
 8001c20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	461a      	mov	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7fe fde2 	bl	8000804 <HAL_GetTick>
 8001c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe fddd 	bl	8000804 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e18b      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 8001c5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c72:	601a      	str	r2, [r3, #0]
  return result;
 8001c74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_OscConfig+0xb24>
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e01b      	b.n	8001ccc <HAL_RCC_OscConfig+0xb5c>
 8001c94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	fa92 f1a2 	rbit	r1, r2
 8001ce0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ce4:	6011      	str	r1, [r2, #0]
  return result;
 8001ce6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d19e      	bne.n	8001c46 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
 8001d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3c:	601a      	str	r2, [r3, #0]
  return result;
 8001d3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d42:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	461a      	mov	r2, r3
 8001d56:	2301      	movs	r3, #1
 8001d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fd53 	bl	8000804 <HAL_GetTick>
 8001d5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d62:	e009      	b.n	8001d78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe fd4e 	bl	8000804 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0fc      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 8001d78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d90:	601a      	str	r2, [r3, #0]
  return result;
 8001d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_RCC_OscConfig+0xc48>
 8001dac:	4b01      	ldr	r3, [pc, #4]	; (8001db4 <HAL_RCC_OscConfig+0xc44>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e01e      	b.n	8001df0 <HAL_RCC_OscConfig+0xc80>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	fa93 f2a3 	rbit	r2, r3
 8001de6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <HAL_RCC_OscConfig+0xe0c>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df8:	6011      	str	r1, [r2, #0]
 8001dfa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	fa92 f1a2 	rbit	r1, r2
 8001e04:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e08:	6011      	str	r1, [r2, #0]
  return result;
 8001e0a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d09b      	beq.n	8001d64 <HAL_RCC_OscConfig+0xbf4>
 8001e2c:	e0a0      	b.n	8001f70 <HAL_RCC_OscConfig+0xe00>
 8001e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	601a      	str	r2, [r3, #0]
  return result;
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fcce 	bl	8000804 <HAL_GetTick>
 8001e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fcc9 	bl	8000804 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e077      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0xd4c>
 8001eb6:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_RCC_OscConfig+0xe0c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd84>
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_RCC_OscConfig+0xe0c>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f107 0210 	add.w	r2, r7, #16
 8001ef8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001efc:	6011      	str	r1, [r2, #0]
 8001efe:	f107 0210 	add.w	r2, r7, #16
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fa92 f1a2 	rbit	r1, r2
 8001f08:	f107 020c 	add.w	r2, r7, #12
 8001f0c:	6011      	str	r1, [r2, #0]
  return result;
 8001f0e:	f107 020c 	add.w	r2, r7, #12
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d19e      	bne.n	8001e6e <HAL_RCC_OscConfig+0xcfe>
 8001f30:	e01e      	b.n	8001f70 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_RCC_OscConfig+0xe0c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b09e      	sub	sp, #120	; 0x78
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e162      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b90      	ldr	r3, [pc, #576]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b8d      	ldr	r3, [pc, #564]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	498b      	ldr	r1, [pc, #556]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b89      	ldr	r3, [pc, #548]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e14a      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	497f      	ldr	r1, [pc, #508]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80dc 	beq.w	80021ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d13c      	bne.n	8002076 <HAL_RCC_ClockConfig+0xf6>
 8001ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002000:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800200a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_RCC_ClockConfig+0xa6>
 8002020:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	e00f      	b.n	8002046 <HAL_RCC_ClockConfig+0xc6>
 8002026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	667b      	str	r3, [r7, #100]	; 0x64
 8002034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002038:	663b      	str	r3, [r7, #96]	; 0x60
 800203a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800204a:	65ba      	str	r2, [r7, #88]	; 0x58
 800204c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d17b      	bne.n	800216a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0f3      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d13c      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x178>
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x128>
 80020a2:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_ClockConfig+0x148>
 80020a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c4:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f042 0220 	orr.w	r2, r2, #32
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f002 021f 	and.w	r2, r2, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d13a      	bne.n	800216a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b2      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
 80020f8:	2302      	movs	r3, #2
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1a0>
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e00d      	b.n	800213c <HAL_RCC_ClockConfig+0x1bc>
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	2302      	movs	r3, #2
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	2202      	movs	r2, #2
 800213e:	61ba      	str	r2, [r7, #24]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	617a      	str	r2, [r7, #20]
  return result;
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e079      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	491a      	ldr	r1, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7fe fb42 	bl	8000804 <HAL_GetTick>
 8002180:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fb3e 	bl	8000804 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e061      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_RCC_ClockConfig+0x260>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d214      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4906      	ldr	r1, [pc, #24]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_RCC_ClockConfig+0x25c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e040      	b.n	800225e <HAL_RCC_ClockConfig+0x2de>
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCC_ClockConfig+0x2e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	491a      	ldr	r1, [pc, #104]	; (8002268 <HAL_RCC_ClockConfig+0x2e8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_RCC_ClockConfig+0x2e8>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4912      	ldr	r1, [pc, #72]	; (8002268 <HAL_RCC_ClockConfig+0x2e8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002222:	f000 f829 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002226:	4601      	mov	r1, r0
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_ClockConfig+0x2e8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002230:	22f0      	movs	r2, #240	; 0xf0
 8002232:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	fa92 f2a2 	rbit	r2, r2
 800223a:	60fa      	str	r2, [r7, #12]
  return result;
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	40d3      	lsrs	r3, r2
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x2ec>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	fa21 f303 	lsr.w	r3, r1, r3
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_RCC_ClockConfig+0x2f0>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_ClockConfig+0x2f4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fa90 	bl	800077c <HAL_InitTick>
  
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3778      	adds	r7, #120	; 0x78
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	08003810 	.word	0x08003810
 8002270:	20000078 	.word	0x20000078
 8002274:	2000007c 	.word	0x2000007c

08002278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b08b      	sub	sp, #44	; 0x2c
 800227c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x30>
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x36>
 80022a6:	e03c      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022aa:	623b      	str	r3, [r7, #32]
      break;
 80022ac:	e03c      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	fa92 f2a2 	rbit	r2, r2
 80022c0:	607a      	str	r2, [r7, #4]
  return result;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	40d3      	lsrs	r3, r2
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	220f      	movs	r2, #15
 80022dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	fa92 f2a2 	rbit	r2, r2
 80022e4:	60fa      	str	r2, [r7, #12]
  return result;
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	40d3      	lsrs	r3, r2
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	fbb2 f2f3 	udiv	r2, r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	e004      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e002      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002324:	623b      	str	r3, [r7, #32]
      break;
 8002326:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002328:	6a3b      	ldr	r3, [r7, #32]
}
 800232a:	4618      	mov	r0, r3
 800232c:	372c      	adds	r7, #44	; 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	08003828 	.word	0x08003828
 8002344:	08003838 	.word	0x08003838
 8002348:	003d0900 	.word	0x003d0900

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000078 	.word	0x20000078

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800236a:	f7ff ffef 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236e:	4601      	mov	r1, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002378:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800237c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	603a      	str	r2, [r7, #0]
  return result;
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	fab2 f282 	clz	r2, r2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	40d3      	lsrs	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	08003820 	.word	0x08003820

080023a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ae:	f7ff ffcd 	bl	800234c <HAL_RCC_GetHCLKFreq>
 80023b2:	4601      	mov	r1, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	fa92 f2a2 	rbit	r2, r2
 80023c8:	603a      	str	r2, [r7, #0]
  return result;
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	40d3      	lsrs	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08003820 	.word	0x08003820

080023ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e040      	b.n	8002480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe f87c 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fc1c 	bl	8002c68 <UART_SetConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e022      	b.n	8002480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fd46 	bl	8002ed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fdcd 	bl	8003018 <UART_CheckIdleState>
 800247e:	4603      	mov	r3, r0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800249a:	2b20      	cmp	r3, #32
 800249c:	d178      	bne.n	8002590 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_UART_Transmit_DMA+0x22>
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e071      	b.n	8002592 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_UART_Transmit_DMA+0x34>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e06a      	b.n	8002592 <HAL_UART_Transmit_DMA+0x10a>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2221      	movs	r2, #33	; 0x21
 80024e6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02b      	beq.n	8002548 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_UART_Transmit_DMA+0x114>)
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_UART_Transmit_DMA+0x118>)
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_UART_Transmit_DMA+0x11c>)
 8002506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	2200      	movs	r2, #0
 800250e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	4619      	mov	r1, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3328      	adds	r3, #40	; 0x28
 8002520:	461a      	mov	r2, r3
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	f7fe fad2 	bl	8000acc <HAL_DMA_Start_IT>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2210      	movs	r2, #16
 8002532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e024      	b.n	8002592 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3308      	adds	r3, #8
 800255e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	e853 3f00 	ldrex	r3, [r3]
 8002566:	613b      	str	r3, [r7, #16]
   return(result);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3308      	adds	r3, #8
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	623a      	str	r2, [r7, #32]
 800257a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	69f9      	ldr	r1, [r7, #28]
 800257e:	6a3a      	ldr	r2, [r7, #32]
 8002580:	e841 2300 	strex	r3, r2, [r1]
 8002584:	61bb      	str	r3, [r7, #24]
   return(result);
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	0800348b 	.word	0x0800348b
 80025a0:	0800351f 	.word	0x0800351f
 80025a4:	08003691 	.word	0x08003691

080025a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d13d      	bne.n	800263a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_UART_Receive_DMA+0x22>
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e036      	b.n	800263c <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_UART_Receive_DMA+0x34>
 80025d8:	2302      	movs	r3, #2
 80025da:	e02f      	b.n	800263c <HAL_UART_Receive_DMA+0x94>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d018      	beq.n	800262a <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	613b      	str	r3, [r7, #16]
   return(result);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	69f9      	ldr	r1, [r7, #28]
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	61bb      	str	r3, [r7, #24]
   return(result);
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e6      	bne.n	80025f8 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	461a      	mov	r2, r3
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fdff 	bl	8003234 <UART_Start_Receive_DMA>
 8002636:	4603      	mov	r3, r0
 8002638:	e000      	b.n	800263c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0ba      	sub	sp, #232	; 0xe8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800266a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800266e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002672:	4013      	ands	r3, r2
 8002674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d115      	bne.n	80026ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00f      	beq.n	80026ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 82a3 	beq.w	8002be8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
      }
      return;
 80026aa:	e29d      	b.n	8002be8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8117 	beq.w	80028e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026c6:	4b85      	ldr	r3, [pc, #532]	; (80028dc <HAL_UART_IRQHandler+0x298>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 810a 	beq.w	80028e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d011      	beq.n	8002700 <HAL_UART_IRQHandler+0xbc>
 80026dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d011      	beq.n	8002730 <HAL_UART_IRQHandler+0xec>
 800270c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d011      	beq.n	8002760 <HAL_UART_IRQHandler+0x11c>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	f043 0202 	orr.w	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800276c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00b      	beq.n	800279c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2208      	movs	r2, #8
 800278a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002792:	f043 0208 	orr.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800279c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_UART_IRQHandler+0x18a>
 80027a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00c      	beq.n	80027ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8209 	beq.w	8002bec <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d005      	beq.n	8002826 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800281a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800281e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04f      	beq.n	80028c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fdcc 	bl	80033c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d141      	bne.n	80028be <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3308      	adds	r3, #8
 8002840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3308      	adds	r3, #8
 8002862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800286a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800287e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1d9      	bne.n	800283a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	2b00      	cmp	r3, #0
 800288c:	d013      	beq.n	80028b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_UART_IRQHandler+0x29c>)
 8002894:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f9ae 	bl	8000bfc <HAL_DMA_Abort_IT>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80028b0:	4610      	mov	r0, r2
 80028b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	e00f      	b.n	80028d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fd fdf4 	bl	80004a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	e00b      	b.n	80028d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fd fdf0 	bl	80004a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	e007      	b.n	80028d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fd fdec 	bl	80004a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80028d4:	e18a      	b.n	8002bec <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d6:	bf00      	nop
    return;
 80028d8:	e188      	b.n	8002bec <HAL_UART_IRQHandler+0x5a8>
 80028da:	bf00      	nop
 80028dc:	04000120 	.word	0x04000120
 80028e0:	0800370d 	.word	0x0800370d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 8143 	bne.w	8002b74 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 813c 	beq.w	8002b74 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8135 	beq.w	8002b74 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	f040 80b1 	bne.w	8002a84 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800292e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 815c 	beq.w	8002bf0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800293e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002942:	429a      	cmp	r2, r3
 8002944:	f080 8154 	bcs.w	8002bf0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800294e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b20      	cmp	r3, #32
 800295a:	f000 8085 	beq.w	8002a68 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800298c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002994:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1da      	bne.n	800295e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3308      	adds	r3, #8
 80029ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3308      	adds	r3, #8
 80029c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e1      	bne.n	80029a8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3308      	adds	r3, #8
 80029ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3308      	adds	r3, #8
 8002a04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e3      	bne.n	80029e4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a38:	f023 0310 	bic.w	r3, r3, #16
 8002a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e4      	bne.n	8002a28 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f891 	bl	8000b8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f8d3 	bl	8002c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a82:	e0b5      	b.n	8002bf0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a7 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a2 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e4      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3308      	adds	r3, #8
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	623b      	str	r3, [r7, #32]
   return(result);
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3308      	adds	r3, #8
 8002b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e3      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f023 0310 	bic.w	r3, r3, #16
 8002b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e4      	bne.n	8002b30 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f85b 	bl	8002c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b72:	e03f      	b.n	8002bf4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <HAL_UART_IRQHandler+0x55a>
 8002b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fdf8 	bl	800378c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b9c:	e02d      	b.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01c      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    }
    return;
 8002bc6:	e017      	b.n	8002bf8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fda9 	bl	8003738 <UART_EndTransmit_IT>
    return;
 8002be6:	e008      	b.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
      return;
 8002be8:	bf00      	nop
 8002bea:	e006      	b.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
    return;
 8002bec:	bf00      	nop
 8002bee:	e004      	b.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
      return;
 8002bf0:	bf00      	nop
 8002bf2:	e002      	b.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
      return;
 8002bf4:	bf00      	nop
 8002bf6:	e000      	b.n	8002bfa <HAL_UART_IRQHandler+0x5b6>
    return;
 8002bf8:	bf00      	nop
  }

}
 8002bfa:	37e8      	adds	r7, #232	; 0xe8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c52:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4313      	orrs	r3, r2
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <UART_SetConfig+0x254>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	6979      	ldr	r1, [r7, #20]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a78      	ldr	r2, [pc, #480]	; (8002ec0 <UART_SetConfig+0x258>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d120      	bne.n	8002d26 <UART_SetConfig+0xbe>
 8002ce4:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <UART_SetConfig+0x25c>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d817      	bhi.n	8002d20 <UART_SetConfig+0xb8>
 8002cf0:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <UART_SetConfig+0x90>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d15 	.word	0x08002d15
 8002d00:	08002d1b 	.word	0x08002d1b
 8002d04:	08002d0f 	.word	0x08002d0f
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e01d      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e01a      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d14:	2304      	movs	r3, #4
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e017      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e014      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d20:	2310      	movs	r3, #16
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e011      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <UART_SetConfig+0x260>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <UART_SetConfig+0xce>
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e009      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a64      	ldr	r2, [pc, #400]	; (8002ecc <UART_SetConfig+0x264>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <UART_SetConfig+0xde>
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e001      	b.n	8002d4a <UART_SetConfig+0xe2>
 8002d46:	2310      	movs	r3, #16
 8002d48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d52:	d15b      	bne.n	8002e0c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d827      	bhi.n	8002daa <UART_SetConfig+0x142>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <UART_SetConfig+0xf8>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002d8d 	.word	0x08002d8d
 8002d68:	08002d95 	.word	0x08002d95
 8002d6c:	08002dab 	.word	0x08002dab
 8002d70:	08002d9b 	.word	0x08002d9b
 8002d74:	08002dab 	.word	0x08002dab
 8002d78:	08002dab 	.word	0x08002dab
 8002d7c:	08002dab 	.word	0x08002dab
 8002d80:	08002da3 	.word	0x08002da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7ff faee 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8002d88:	61b8      	str	r0, [r7, #24]
        break;
 8002d8a:	e013      	b.n	8002db4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f7ff fb0c 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 8002d90:	61b8      	str	r0, [r7, #24]
        break;
 8002d92:	e00f      	b.n	8002db4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d94:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <UART_SetConfig+0x268>)
 8002d96:	61bb      	str	r3, [r7, #24]
        break;
 8002d98:	e00c      	b.n	8002db4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9a:	f7ff fa6d 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002d9e:	61b8      	str	r0, [r7, #24]
        break;
 8002da0:	e008      	b.n	8002db4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da6:	61bb      	str	r3, [r7, #24]
        break;
 8002da8:	e004      	b.n	8002db4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	77bb      	strb	r3, [r7, #30]
        break;
 8002db2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d074      	beq.n	8002ea4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	005a      	lsls	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	441a      	add	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d916      	bls.n	8002e06 <UART_SetConfig+0x19e>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dde:	d212      	bcs.n	8002e06 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	f023 030f 	bic.w	r3, r3, #15
 8002de8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	89fa      	ldrh	r2, [r7, #14]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e04e      	b.n	8002ea4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	77bb      	strb	r3, [r7, #30]
 8002e0a:	e04b      	b.n	8002ea4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d827      	bhi.n	8002e62 <UART_SetConfig+0x1fa>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <UART_SetConfig+0x1b0>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	08002e45 	.word	0x08002e45
 8002e20:	08002e4d 	.word	0x08002e4d
 8002e24:	08002e63 	.word	0x08002e63
 8002e28:	08002e53 	.word	0x08002e53
 8002e2c:	08002e63 	.word	0x08002e63
 8002e30:	08002e63 	.word	0x08002e63
 8002e34:	08002e63 	.word	0x08002e63
 8002e38:	08002e5b 	.word	0x08002e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f7ff fa92 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8002e40:	61b8      	str	r0, [r7, #24]
        break;
 8002e42:	e013      	b.n	8002e6c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e44:	f7ff fab0 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 8002e48:	61b8      	str	r0, [r7, #24]
        break;
 8002e4a:	e00f      	b.n	8002e6c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <UART_SetConfig+0x268>)
 8002e4e:	61bb      	str	r3, [r7, #24]
        break;
 8002e50:	e00c      	b.n	8002e6c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e52:	f7ff fa11 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002e56:	61b8      	str	r0, [r7, #24]
        break;
 8002e58:	e008      	b.n	8002e6c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5e:	61bb      	str	r3, [r7, #24]
        break;
 8002e60:	e004      	b.n	8002e6c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77bb      	strb	r3, [r7, #30]
        break;
 8002e6a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	085a      	lsrs	r2, r3, #1
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	441a      	add	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	d908      	bls.n	8002ea0 <UART_SetConfig+0x238>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e94:	d204      	bcs.n	8002ea0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e001      	b.n	8002ea4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002eb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	efff69f3 	.word	0xefff69f3
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40004400 	.word	0x40004400
 8002ecc:	40004800 	.word	0x40004800
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01a      	beq.n	8002fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd2:	d10a      	bne.n	8002fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  }
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af02      	add	r7, sp, #8
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003028:	f7fd fbec 	bl	8000804 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d10e      	bne.n	800305a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f82d 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e023      	b.n	80030a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b04      	cmp	r3, #4
 8003066:	d10e      	bne.n	8003086 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f817 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e00d      	b.n	80030a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b09c      	sub	sp, #112	; 0x70
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ba:	e0a5      	b.n	8003208 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c2:	f000 80a1 	beq.w	8003208 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fd fb9d 	bl	8000804 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <UART_WaitOnFlagUntilTimeout+0x32>
 80030d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d13e      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030f0:	667b      	str	r3, [r7, #100]	; 0x64
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e6      	bne.n	80030dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3308      	adds	r3, #8
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	663b      	str	r3, [r7, #96]	; 0x60
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3308      	adds	r3, #8
 800312c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800312e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003130:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e067      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d04f      	beq.n	8003208 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d147      	bne.n	8003208 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003196:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
 80031a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e6      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3308      	adds	r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	613b      	str	r3, [r7, #16]
   return(result);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031d4:	623a      	str	r2, [r7, #32]
 80031d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	69f9      	ldr	r1, [r7, #28]
 80031da:	6a3a      	ldr	r2, [r7, #32]
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e010      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	429a      	cmp	r2, r3
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	429a      	cmp	r2, r3
 8003224:	f43f af4a 	beq.w	80030bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3770      	adds	r7, #112	; 0x70
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b096      	sub	sp, #88	; 0x58
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2222      	movs	r2, #34	; 0x22
 800325c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02b      	beq.n	80032be <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a40      	ldr	r2, [pc, #256]	; (800336c <UART_Start_Receive_DMA+0x138>)
 800326c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <UART_Start_Receive_DMA+0x13c>)
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a3e      	ldr	r2, [pc, #248]	; (8003374 <UART_Start_Receive_DMA+0x140>)
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3324      	adds	r3, #36	; 0x24
 8003290:	4619      	mov	r1, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	461a      	mov	r2, r3
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	f7fd fc17 	bl	8000acc <HAL_DMA_Start_IT>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2210      	movs	r2, #16
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e051      	b.n	8003362 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	657b      	str	r3, [r7, #84]	; 0x54
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e6      	bne.n	80032c6 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	653b      	str	r3, [r7, #80]	; 0x50
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003318:	637a      	str	r2, [r7, #52]	; 0x34
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800331e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e5      	bne.n	80032f8 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	613b      	str	r3, [r7, #16]
   return(result);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800334c:	623a      	str	r2, [r7, #32]
 800334e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	69f9      	ldr	r1, [r7, #28]
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	61bb      	str	r3, [r7, #24]
   return(result);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3758      	adds	r7, #88	; 0x58
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	0800353b 	.word	0x0800353b
 8003370:	08003659 	.word	0x08003659
 8003374:	08003691 	.word	0x08003691

08003378 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	60bb      	str	r3, [r7, #8]
   return(result);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6979      	ldr	r1, [r7, #20]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	613b      	str	r3, [r7, #16]
   return(result);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e6      	bne.n	8003380 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80033b8:	bf00      	nop
 80033ba:	3724      	adds	r7, #36	; 0x24
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b095      	sub	sp, #84	; 0x54
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
 80033ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e6      	bne.n	80033cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3308      	adds	r3, #8
 8003404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	61fb      	str	r3, [r7, #28]
   return(result);
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800341e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e5      	bne.n	80033fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003436:	2b01      	cmp	r3, #1
 8003438:	d118      	bne.n	800346c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	60bb      	str	r3, [r7, #8]
   return(result);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f023 0310 	bic.w	r3, r3, #16
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6979      	ldr	r1, [r7, #20]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	613b      	str	r3, [r7, #16]
   return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e6      	bne.n	800343a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800347e:	bf00      	nop
 8003480:	3754      	adds	r7, #84	; 0x54
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b090      	sub	sp, #64	; 0x40
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b20      	cmp	r3, #32
 800349e:	d037      	beq.n	8003510 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	623b      	str	r3, [r7, #32]
   return(result);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034be:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c8:	633a      	str	r2, [r7, #48]	; 0x30
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e5      	bne.n	80034a8 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	617b      	str	r3, [r7, #20]
   return(result);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e6      	bne.n	80034dc <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800350e:	e002      	b.n	8003516 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8003510:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003512:	f7fc ffb3 	bl	800047c <HAL_UART_TxCpltCallback>
}
 8003516:	bf00      	nop
 8003518:	3740      	adds	r7, #64	; 0x40
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fb67 	bl	8002c00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b09c      	sub	sp, #112	; 0x70
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b20      	cmp	r3, #32
 800354e:	d070      	beq.n	8003632 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8003550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003552:	2200      	movs	r2, #0
 8003554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800356c:	66bb      	str	r3, [r7, #104]	; 0x68
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003576:	65bb      	str	r3, [r7, #88]	; 0x58
 8003578:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800357c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e6      	bne.n	8003558 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3308      	adds	r3, #8
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	667b      	str	r3, [r7, #100]	; 0x64
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035aa:	647a      	str	r2, [r7, #68]	; 0x44
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	623b      	str	r3, [r7, #32]
   return(result);
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d4:	663b      	str	r3, [r7, #96]	; 0x60
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3308      	adds	r3, #8
 80035dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035de:	633a      	str	r2, [r7, #48]	; 0x30
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e5      	bne.n	80035be <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f4:	2220      	movs	r2, #32
 80035f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d118      	bne.n	8003632 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	60fb      	str	r3, [r7, #12]
   return(result);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 0310 	bic.w	r3, r3, #16
 8003614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	617b      	str	r3, [r7, #20]
   return(result);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003640:	4619      	mov	r1, r3
 8003642:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003644:	f7ff faf0 	bl	8002c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003648:	e002      	b.n	8003650 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800364a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800364c:	f7fc ff20 	bl	8000490 <HAL_UART_RxCpltCallback>
}
 8003650:	bf00      	nop
 8003652:	3770      	adds	r7, #112	; 0x70
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	2b01      	cmp	r3, #1
 800366c:	d109      	bne.n	8003682 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	b29b      	uxth	r3, r3
 8003678:	4619      	mov	r1, r3
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7ff fad4 	bl	8002c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003680:	e002      	b.n	8003688 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fac6 	bl	8002c14 <HAL_UART_RxHalfCpltCallback>
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d109      	bne.n	80036cc <UART_DMAError+0x3c>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b21      	cmp	r3, #33	; 0x21
 80036bc:	d106      	bne.n	80036cc <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff fe56 	bl	8003378 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d109      	bne.n	80036ee <UART_DMAError+0x5e>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b22      	cmp	r3, #34	; 0x22
 80036de:	d106      	bne.n	80036ee <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f7ff fe6b 	bl	80033c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f4:	f043 0210 	orr.w	r2, r3, #16
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7fc fed0 	bl	80004a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7fc feba 	bl	80004a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	60bb      	str	r3, [r7, #8]
   return(result);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6979      	ldr	r1, [r7, #20]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	613b      	str	r3, [r7, #16]
   return(result);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e6      	bne.n	8003740 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fc fe7c 	bl	800047c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4d0d      	ldr	r5, [pc, #52]	; (80037d8 <__libc_init_array+0x38>)
 80037a4:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	2600      	movs	r6, #0
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	4d0b      	ldr	r5, [pc, #44]	; (80037e0 <__libc_init_array+0x40>)
 80037b2:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <__libc_init_array+0x44>)
 80037b4:	f000 f820 	bl	80037f8 <_init>
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	2600      	movs	r6, #0
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	08003848 	.word	0x08003848
 80037dc:	08003848 	.word	0x08003848
 80037e0:	08003848 	.word	0x08003848
 80037e4:	0800384c 	.word	0x0800384c

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
